
Rover-bot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  00000c56  00000cea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000861  00800210  00800210  00000cfa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cfa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00000d70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021fb  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001388  00000000  00000000  00003143  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000128f  00000000  00000000  000044cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f0  00000000  00000000  0000575c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ea  00000000  00000000  00005b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b99  00000000  00000000  00006536  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000070cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	1a c3       	rjmp	.+1588   	; 0x65e <__vector_10>
  2a:	00 00       	nop
  2c:	19 c1       	rjmp	.+562    	; 0x260 <__vector_11>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	87 c1       	rjmp	.+782    	; 0x344 <__vector_13>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	54 c5       	rjmp	.+2728   	; 0xafe <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e5       	ldi	r30, 0x56	; 86
  fc:	fc e0       	ldi	r31, 0x0C	; 12
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 31       	cpi	r26, 0x10	; 16
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	2a e0       	ldi	r18, 0x0A	; 10
 110:	a0 e1       	ldi	r26, 0x10	; 16
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 37       	cpi	r26, 0x71	; 113
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	ff d2       	rcall	.+1534   	; 0x71e <main>
 120:	98 c5       	rjmp	.+2864   	; 0xc52 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <x_yield>:
 124:	2f 92       	push	r2
 126:	3f 92       	push	r3
 128:	4f 92       	push	r4
 12a:	5f 92       	push	r5
 12c:	6f 92       	push	r6
 12e:	7f 92       	push	r7
 130:	8f 92       	push	r8
 132:	9f 92       	push	r9
 134:	af 92       	push	r10
 136:	bf 92       	push	r11
 138:	cf 92       	push	r12
 13a:	df 92       	push	r13
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	20 91 3c 02 	lds	r18, 0x023C	; 0x80023c <x_thread_id>
 14c:	30 91 70 0a 	lds	r19, 0x0A70	; 0x800a70 <x_thread_mask>
 150:	f8 94       	cli
 152:	ed b6       	in	r14, 0x3d	; 61
 154:	fe b6       	in	r15, 0x3e	; 62
 156:	78 94       	sei
 158:	ee e3       	ldi	r30, 0x3E	; 62
 15a:	f2 e0       	ldi	r31, 0x02	; 2
 15c:	22 0f       	add	r18, r18
 15e:	c0 e0       	ldi	r28, 0x00	; 0
 160:	d2 e0       	ldi	r29, 0x02	; 2
 162:	c2 0f       	add	r28, r18
 164:	d1 1d       	adc	r29, r1
 166:	19 91       	ld	r17, Y+
 168:	d8 81       	ld	r29, Y
 16a:	c1 2f       	mov	r28, r17
 16c:	18 81       	ld	r17, Y
 16e:	1a 3a       	cpi	r17, 0xAA	; 170
 170:	21 f0       	breq	.+8      	; 0x17a <x_yield+0x56>
 172:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <x_thread_id>
 176:	91 2d       	mov	r25, r1
 178:	0e c5       	rjmp	.+2588   	; 0xb96 <x_stack_overflow>
 17a:	22 0f       	add	r18, r18
 17c:	e2 0f       	add	r30, r18
 17e:	f1 1d       	adc	r31, r1
 180:	e1 92       	st	Z+, r14
 182:	f0 82       	st	Z, r15

00000184 <x_schedule>:
 184:	20 91 6f 0a 	lds	r18, 0x0A6F	; 0x800a6f <x_disable_status>
 188:	30 91 3d 02 	lds	r19, 0x023D	; 0x80023d <x_delay_status>
 18c:	40 91 5e 02 	lds	r20, 0x025E	; 0x80025e <x_suspend_status>
 190:	23 2b       	or	r18, r19
 192:	24 2b       	or	r18, r20
 194:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <x_thread_id>
 198:	40 91 70 0a 	lds	r20, 0x0A70	; 0x800a70 <x_thread_mask>
 19c:	68 e0       	ldi	r22, 0x08	; 8
 19e:	88 94       	clc
 1a0:	33 95       	inc	r19
 1a2:	37 70       	andi	r19, 0x07	; 7
 1a4:	44 1f       	adc	r20, r20
 1a6:	41 1d       	adc	r20, r1
 1a8:	74 2f       	mov	r23, r20
 1aa:	42 23       	and	r20, r18
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <restore>
 1ae:	6a 95       	dec	r22
 1b0:	b9 f7       	brne	.-18     	; 0x1a0 <x_schedule+0x1c>
 1b2:	e8 cf       	rjmp	.-48     	; 0x184 <x_schedule>

000001b4 <restore>:
 1b4:	30 93 3c 02 	sts	0x023C, r19	; 0x80023c <x_thread_id>
 1b8:	70 93 70 0a 	sts	0x0A70, r23	; 0x800a70 <x_thread_mask>
 1bc:	ee e3       	ldi	r30, 0x3E	; 62
 1be:	f2 e0       	ldi	r31, 0x02	; 2
 1c0:	33 0f       	add	r19, r19
 1c2:	33 0f       	add	r19, r19
 1c4:	e3 0f       	add	r30, r19
 1c6:	f1 1d       	adc	r31, r1
 1c8:	21 91       	ld	r18, Z+
 1ca:	30 81       	ld	r19, Z
 1cc:	f8 94       	cli
 1ce:	2d bf       	out	0x3d, r18	; 61
 1d0:	3e bf       	out	0x3e, r19	; 62
 1d2:	78 94       	sei
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	ff 90       	pop	r15
 1de:	ef 90       	pop	r14
 1e0:	df 90       	pop	r13
 1e2:	cf 90       	pop	r12
 1e4:	bf 90       	pop	r11
 1e6:	af 90       	pop	r10
 1e8:	9f 90       	pop	r9
 1ea:	8f 90       	pop	r8
 1ec:	7f 90       	pop	r7
 1ee:	6f 90       	pop	r6
 1f0:	5f 90       	pop	r5
 1f2:	85 2d       	mov	r24, r5
 1f4:	4f 90       	pop	r4
 1f6:	94 2d       	mov	r25, r4
 1f8:	3f 90       	pop	r3
 1fa:	63 2d       	mov	r22, r3
 1fc:	2f 90       	pop	r2
 1fe:	72 2d       	mov	r23, r2
 200:	08 95       	ret

00000202 <bit2mask8>:
 202:	ee e0       	ldi	r30, 0x0E	; 14
 204:	f2 e0       	ldi	r31, 0x02	; 2
 206:	e8 0f       	add	r30, r24
 208:	f1 1d       	adc	r31, r1
 20a:	84 91       	lpm	r24, Z
 20c:	08 95       	ret

0000020e <bitmask8_table>:
 20e:	01 02       	muls	r16, r17
 210:	04 08       	sbc	r0, r4
 212:	10 20       	and	r1, r0
 214:	40 80       	ld	r4, Z

00000216 <initUS>:
static volatile int pulse = 0;
static volatile int i = 0;

void initUS() {
// 	DDRB = 0xFF;
 	DDRD &= 0xFB;
 216:	52 98       	cbi	0x0a, 2	; 10
	
	PCICR |= (1<<PCIE2);
 218:	e8 e6       	ldi	r30, 0x68	; 104
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	84 60       	ori	r24, 0x04	; 4
 220:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT16) | (1 << PCINT17);
 222:	ed e6       	ldi	r30, 0x6D	; 109
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	83 60       	ori	r24, 0x03	; 3
 22a:	80 83       	st	Z, r24
	MCUCR|=(1<<ISC00);
 22c:	85 b7       	in	r24, 0x35	; 53
 22e:	81 60       	ori	r24, 0x01	; 1
 230:	85 bf       	out	0x35, r24	; 53
	
	TCCR1A = 0;
 232:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 236:	08 95       	ret

00000238 <USdetect>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 238:	2f ef       	ldi	r18, 0xFF	; 255
 23a:	8a e6       	ldi	r24, 0x6A	; 106
 23c:	93 e0       	ldi	r25, 0x03	; 3
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	80 40       	sbci	r24, 0x00	; 0
 242:	90 40       	sbci	r25, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <USdetect+0x6>
 246:	00 c0       	rjmp	.+0      	; 0x248 <USdetect+0x10>
 248:	00 00       	nop
	_delay_ms(70);
	
	while(1)
	{
		if (1) {
			PORTD|=(1<<PIND0); //trigger high
 24a:	58 9a       	sbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24c:	20 e4       	ldi	r18, 0x40	; 64
 24e:	2a 95       	dec	r18
 250:	f1 f7       	brne	.-4      	; 0x24e <USdetect+0x16>
			_delay_us(12);
			PORTD = (0<< PIND0); //trigger low
 252:	1b b8       	out	0x0b, r1	; 11
		
			distance = pulse/58; //distance
 254:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <pulse>
 258:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <pulse+0x1>
			} else {
				//PORTF &= ~0x01;
			}
			distance = 0;
		}
		x_yield();
 25c:	63 df       	rcall	.-314    	; 0x124 <x_yield>
 25e:	f5 cf       	rjmp	.-22     	; 0x24a <USdetect+0x12>

00000260 <__vector_11>:
	}
}


ISR(PCINT2_vect) {
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	0b b6       	in	r0, 0x3b	; 59
 26c:	0f 92       	push	r0
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
 272:	ef 93       	push	r30
 274:	ff 93       	push	r31
	
	PORTF ^= 0x01;
 276:	91 b3       	in	r25, 0x11	; 17
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	89 27       	eor	r24, r25
 27c:	81 bb       	out	0x11, r24	; 17

 	if (i==1) // HIGH to LOW
 27e:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__data_end>
 282:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__data_end+0x1>
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	81 f4       	brne	.+32     	; 0x2aa <__vector_11+0x4a>
 	{
	 	TCCR1B=0; //stop counter
 28a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	 	pulse=TCNT1; //count memory is updated to int
 28e:	e4 e8       	ldi	r30, 0x84	; 132
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	91 81       	ldd	r25, Z+1	; 0x01
 296:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <pulse+0x1>
 29a:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <pulse>
	 	TCNT1=0; //resetting t he counter memory
 29e:	11 82       	std	Z+1, r1	; 0x01
 2a0:	10 82       	st	Z, r1
	 	i=0;
 2a2:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <__data_end+0x1>
 2a6:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <__data_end>
 	}
 	if (i==0) //LOW to HIGH
 2aa:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__data_end>
 2ae:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__data_end+0x1>
 2b2:	89 2b       	or	r24, r25
 2b4:	59 f4       	brne	.+22     	; 0x2cc <__vector_11+0x6c>
 	{
		
	 	TCCR1B|=(1<<CS10); //Enable counter
 2b6:	e1 e8       	ldi	r30, 0x81	; 129
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	81 60       	ori	r24, 0x01	; 1
 2be:	80 83       	st	Z, r24
	 	i=1;
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <__data_end+0x1>
 2c8:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <__data_end>
 	}
	
 2cc:	ff 91       	pop	r31
 2ce:	ef 91       	pop	r30
 2d0:	9f 91       	pop	r25
 2d2:	8f 91       	pop	r24
 2d4:	0f 90       	pop	r0
 2d6:	0b be       	out	0x3b, r0	; 59
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <initIRDet>:
#include "wheels.h"
#include "acx.h"
#include "acxserial.h"

void initIRDet() {
	DDRF &= ~((1<<PF7) | (1<<PF6));
 2e2:	80 b3       	in	r24, 0x10	; 16
 2e4:	8f 73       	andi	r24, 0x3F	; 63
 2e6:	80 bb       	out	0x10, r24	; 16
	DDRF |= 0x03;
 2e8:	80 b3       	in	r24, 0x10	; 16
 2ea:	83 60       	ori	r24, 0x03	; 3
 2ec:	80 bb       	out	0x10, r24	; 16
 2ee:	08 95       	ret

000002f0 <irControl>:
		} else if (!(PINF & (1 << PD6) && (PINF & (1 << PD7)))) {// both sensors
			stop();
			if (turnedOn) setMode(DONE);
			
		} else {
			turnedOn = 1;
 2f0:	c1 e0       	ldi	r28, 0x01	; 1
 2f2:	d0 e0       	ldi	r29, 0x00	; 0

int turnedOn = 0;

void irControl() {
	while(1) {
		if (getMode() == DONE) {
 2f4:	ff d1       	rcall	.+1022   	; 0x6f4 <getMode>
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	19 f1       	breq	.+70     	; 0x340 <irControl+0x50>
			// do nothing
		} else if(PINF & (1 << PD6) && !(PINF & (1 << PD7))){ //LEFT SENSOR
 2fa:	7e 9b       	sbis	0x0f, 6	; 15
 2fc:	06 c0       	rjmp	.+12     	; 0x30a <irControl+0x1a>
 2fe:	7f 99       	sbic	0x0f, 7	; 15
 300:	04 c0       	rjmp	.+8      	; 0x30a <irControl+0x1a>
			//PORTF |= (1 << PF0);  //TODO This part should change based on what needs to be done if left sensor get high
			//_delay_ms(100);
			//PORTF &= 1;
			turn(-5);
 302:	8b ef       	ldi	r24, 0xFB	; 251
 304:	9f ef       	ldi	r25, 0xFF	; 255
 306:	21 d1       	rcall	.+578    	; 0x54a <turn>
 308:	1b c0       	rjmp	.+54     	; 0x340 <irControl+0x50>
		}
		else if(PINF & (1 << PD7) && !(PINF & (1 << PD6))) { //RIGHT SENSOR
 30a:	7f 9b       	sbis	0x0f, 7	; 15
 30c:	06 c0       	rjmp	.+12     	; 0x31a <irControl+0x2a>
 30e:	7e 99       	sbic	0x0f, 6	; 15
 310:	04 c0       	rjmp	.+8      	; 0x31a <irControl+0x2a>
			//PORTF |= (1 << PF1); //TODO This part should change based on what needs to be done if right sensor get high
			//_delay_ms(100);
			//PORTF &= 2;
			turn(5);
 312:	85 e0       	ldi	r24, 0x05	; 5
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	19 d1       	rcall	.+562    	; 0x54a <turn>
 318:	13 c0       	rjmp	.+38     	; 0x340 <irControl+0x50>
		} else if (!(PINF & (1 << PD6) && (PINF & (1 << PD7)))) {// both sensors
 31a:	7e 9b       	sbis	0x0f, 6	; 15
 31c:	02 c0       	rjmp	.+4      	; 0x322 <irControl+0x32>
 31e:	7f 99       	sbic	0x0f, 7	; 15
			stop();
 320:	0b c0       	rjmp	.+22     	; 0x338 <irControl+0x48>
 322:	cf d0       	rcall	.+414    	; 0x4c2 <stop>
			if (turnedOn) setMode(DONE);
 324:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <turnedOn>
 328:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <turnedOn+0x1>
 32c:	89 2b       	or	r24, r25
 32e:	41 f0       	breq	.+16     	; 0x340 <irControl+0x50>
 330:	8f ef       	ldi	r24, 0xFF	; 255
 332:	9f ef       	ldi	r25, 0xFF	; 255
 334:	e4 d1       	rcall	.+968    	; 0x6fe <setMode>
			
		} else {
			turnedOn = 1;
 336:	04 c0       	rjmp	.+8      	; 0x340 <irControl+0x50>
 338:	d0 93 15 02 	sts	0x0215, r29	; 0x800215 <turnedOn+0x1>
 33c:	c0 93 14 02 	sts	0x0214, r28	; 0x800214 <turnedOn>
		}
		x_yield();
 340:	f1 de       	rcall	.-542    	; 0x124 <x_yield>
	}
 342:	d8 cf       	rjmp	.-80     	; 0x2f4 <irControl+0x4>

00000344 <__vector_13>:
	TIMSK2 |= (1 << OCIE2A);
	
	OCR2A = tickTime;
}

ISR(TIMER2_COMPA_vect) {
 344:	1f 92       	push	r1
 346:	0f 92       	push	r0
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	0f 92       	push	r0
 34c:	11 24       	eor	r1, r1
 34e:	8f 93       	push	r24
 350:	9f 93       	push	r25
 352:	af 93       	push	r26
 354:	bf 93       	push	r27
	timeCounter++;
 356:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <timeCounter>
 35a:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <timeCounter+0x1>
 35e:	a0 91 24 02 	lds	r26, 0x0224	; 0x800224 <timeCounter+0x2>
 362:	b0 91 25 02 	lds	r27, 0x0225	; 0x800225 <timeCounter+0x3>
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	a1 1d       	adc	r26, r1
 36a:	b1 1d       	adc	r27, r1
 36c:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <timeCounter>
 370:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <timeCounter+0x1>
 374:	a0 93 24 02 	sts	0x0224, r26	; 0x800224 <timeCounter+0x2>
 378:	b0 93 25 02 	sts	0x0225, r27	; 0x800225 <timeCounter+0x3>
	/*if (timeCounter % 1000 == 0)*/ //PORTB ^= 0x80;
 37c:	bf 91       	pop	r27
 37e:	af 91       	pop	r26
 380:	9f 91       	pop	r25
 382:	8f 91       	pop	r24
 384:	0f 90       	pop	r0
 386:	0f be       	out	0x3f, r0	; 63
 388:	0f 90       	pop	r0
 38a:	1f 90       	pop	r1
 38c:	18 95       	reti

0000038e <changeDirection>:
	straight(0.7);
	float inches = 0;
	while(leftCount < 150) {
		 //PORTF ^= (1<<PF2);
	}
	straight(0);
 38e:	61 15       	cp	r22, r1
 390:	71 05       	cpc	r23, r1
 392:	71 f4       	brne	.+28     	; 0x3b0 <changeDirection+0x22>
 394:	00 97       	sbiw	r24, 0x00	; 0
 396:	29 f4       	brne	.+10     	; 0x3a2 <changeDirection+0x14>
 398:	88 b1       	in	r24, 0x08	; 8
 39a:	83 7f       	andi	r24, 0xF3	; 243
 39c:	88 b9       	out	0x08, r24	; 8
 39e:	43 9a       	sbi	0x08, 3	; 8
 3a0:	08 95       	ret
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	a9 f4       	brne	.+42     	; 0x3d0 <changeDirection+0x42>
 3a6:	88 b1       	in	r24, 0x08	; 8
 3a8:	83 7f       	andi	r24, 0xF3	; 243
 3aa:	88 b9       	out	0x08, r24	; 8
 3ac:	42 9a       	sbi	0x08, 2	; 8
 3ae:	08 95       	ret
 3b0:	61 30       	cpi	r22, 0x01	; 1
 3b2:	71 05       	cpc	r23, r1
 3b4:	69 f4       	brne	.+26     	; 0x3d0 <changeDirection+0x42>
 3b6:	00 97       	sbiw	r24, 0x00	; 0
 3b8:	29 f4       	brne	.+10     	; 0x3c4 <changeDirection+0x36>
 3ba:	88 b1       	in	r24, 0x08	; 8
 3bc:	8c 7f       	andi	r24, 0xFC	; 252
 3be:	88 b9       	out	0x08, r24	; 8
 3c0:	40 9a       	sbi	0x08, 0	; 8
 3c2:	08 95       	ret
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	21 f4       	brne	.+8      	; 0x3d0 <changeDirection+0x42>
 3c8:	88 b1       	in	r24, 0x08	; 8
 3ca:	8c 7f       	andi	r24, 0xFC	; 252
 3cc:	88 b9       	out	0x08, r24	; 8
 3ce:	41 9a       	sbi	0x08, 1	; 8
 3d0:	08 95       	ret

000003d2 <setDutyCycle>:
 3d2:	cf 92       	push	r12
 3d4:	df 92       	push	r13
 3d6:	ef 92       	push	r14
 3d8:	ff 92       	push	r15
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	6b 01       	movw	r12, r22
 3e0:	7c 01       	movw	r14, r24
 3e2:	ea 01       	movw	r28, r20
 3e4:	f8 94       	cli
 3e6:	20 e0       	ldi	r18, 0x00	; 0
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	a9 01       	movw	r20, r18
 3ec:	b1 d1       	rcall	.+866    	; 0x750 <__cmpsf2>
 3ee:	81 11       	cpse	r24, r1
 3f0:	0e c0       	rjmp	.+28     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3f2:	20 97       	sbiw	r28, 0x00	; 0
 3f4:	29 f4       	brne	.+10     	; 0x400 <__LOCK_REGION_LENGTH__>
 3f6:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 3fa:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 3fe:	30 c0       	rjmp	.+96     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 400:	21 97       	sbiw	r28, 0x01	; 1
 402:	71 f5       	brne	.+92     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 404:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 408:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 40c:	29 c0       	rjmp	.+82     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 40e:	20 e0       	ldi	r18, 0x00	; 0
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	48 ec       	ldi	r20, 0xC8	; 200
 414:	53 e4       	ldi	r21, 0x43	; 67
 416:	c7 01       	movw	r24, r14
 418:	b6 01       	movw	r22, r12
 41a:	1c d2       	rcall	.+1080   	; 0x854 <__mulsf3>
 41c:	9d d1       	rcall	.+826    	; 0x758 <__fixsfsi>
 41e:	60 57       	subi	r22, 0x70	; 112
 420:	7e 4f       	sbci	r23, 0xFE	; 254
 422:	20 97       	sbiw	r28, 0x00	; 0
 424:	71 f4       	brne	.+28     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 426:	16 16       	cp	r1, r22
 428:	17 06       	cpc	r1, r23
 42a:	d4 f4       	brge	.+52     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	e8 e2       	ldi	r30, 0x28	; 40
 432:	f1 e0       	ldi	r31, 0x01	; 1
 434:	91 83       	std	Z+1, r25	; 0x01
 436:	80 83       	st	Z, r24
 438:	01 96       	adiw	r24, 0x01	; 1
 43a:	86 17       	cp	r24, r22
 43c:	97 07       	cpc	r25, r23
 43e:	d4 f3       	brlt	.-12     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 440:	0f c0       	rjmp	.+30     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 442:	21 97       	sbiw	r28, 0x01	; 1
 444:	69 f4       	brne	.+26     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 446:	16 16       	cp	r1, r22
 448:	17 06       	cpc	r1, r23
 44a:	54 f4       	brge	.+20     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	ea e2       	ldi	r30, 0x2A	; 42
 452:	f1 e0       	ldi	r31, 0x01	; 1
 454:	91 83       	std	Z+1, r25	; 0x01
 456:	80 83       	st	Z, r24
 458:	01 96       	adiw	r24, 0x01	; 1
 45a:	86 17       	cp	r24, r22
 45c:	97 07       	cpc	r25, r23
 45e:	d4 f3       	brlt	.-12     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 460:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
 464:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
 468:	78 94       	sei
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	ff 90       	pop	r15
 470:	ef 90       	pop	r14
 472:	df 90       	pop	r13
 474:	cf 90       	pop	r12
 476:	08 95       	ret

00000478 <straight>:
 478:	cf 92       	push	r12
 47a:	df 92       	push	r13
 47c:	ef 92       	push	r14
 47e:	ff 92       	push	r15
 480:	6b 01       	movw	r12, r22
 482:	7c 01       	movw	r14, r24
 484:	f8 94       	cli
 486:	40 e0       	ldi	r20, 0x00	; 0
 488:	50 e0       	ldi	r21, 0x00	; 0
 48a:	a3 df       	rcall	.-186    	; 0x3d2 <setDutyCycle>
 48c:	41 e0       	ldi	r20, 0x01	; 1
 48e:	50 e0       	ldi	r21, 0x00	; 0
 490:	c7 01       	movw	r24, r14
 492:	b6 01       	movw	r22, r12
 494:	9e df       	rcall	.-196    	; 0x3d2 <setDutyCycle>
 496:	78 94       	sei
 498:	ff 90       	pop	r15
 49a:	ef 90       	pop	r14
 49c:	df 90       	pop	r13
 49e:	cf 90       	pop	r12
 4a0:	08 95       	ret

000004a2 <wheelControl>:
 4a2:	28 d1       	rcall	.+592    	; 0x6f4 <getMode>
 4a4:	01 97       	sbiw	r24, 0x01	; 1
 4a6:	59 f4       	brne	.+22     	; 0x4be <wheelControl+0x1c>
 4a8:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <l_ds>
 4ac:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <l_ds+0x1>
 4b0:	89 2b       	or	r24, r25
 4b2:	29 f4       	brne	.+10     	; 0x4be <wheelControl+0x1c>
 4b4:	6d ec       	ldi	r22, 0xCD	; 205
 4b6:	7c ec       	ldi	r23, 0xCC	; 204
 4b8:	8c e4       	ldi	r24, 0x4C	; 76
 4ba:	9e e3       	ldi	r25, 0x3E	; 62
 4bc:	dd df       	rcall	.-70     	; 0x478 <straight>
 4be:	32 de       	rcall	.-924    	; 0x124 <x_yield>
 4c0:	f0 cf       	rjmp	.-32     	; 0x4a2 <wheelControl>

000004c2 <stop>:
	sei();
}

void stop() {
	
	setMode(STOPPED);
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	1b d1       	rcall	.+566    	; 0x6fe <setMode>
	changeDirection(FORWARD, L_WHEEL);
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	5e df       	rcall	.-324    	; 0x38e <changeDirection>
	changeDirection(FORWARD, R_WHEEL);
 4d2:	61 e0       	ldi	r22, 0x01	; 1
 4d4:	70 e0       	ldi	r23, 0x00	; 0
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	59 df       	rcall	.-334    	; 0x38e <changeDirection>
	straight(0);
 4dc:	60 e0       	ldi	r22, 0x00	; 0
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	cb 01       	movw	r24, r22
 4e2:	ca cf       	rjmp	.-108    	; 0x478 <straight>
 4e4:	08 95       	ret

000004e6 <setTurnLeft>:
}

void setTurnLeft() {
	
	changeDirection(FORWARD, L_WHEEL);
 4e6:	60 e0       	ldi	r22, 0x00	; 0
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	4f df       	rcall	.-354    	; 0x38e <changeDirection>
	changeDirection(BACKWARD, R_WHEEL);
 4f0:	61 e0       	ldi	r22, 0x01	; 1
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	4a df       	rcall	.-364    	; 0x38e <changeDirection>
	setDutyCycle(0.5, L_WHEEL);
 4fa:	40 e0       	ldi	r20, 0x00	; 0
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	9f e3       	ldi	r25, 0x3F	; 63
 506:	65 df       	rcall	.-310    	; 0x3d2 <setDutyCycle>
	setDutyCycle(0.5, R_WHEEL);
 508:	41 e0       	ldi	r20, 0x01	; 1
 50a:	50 e0       	ldi	r21, 0x00	; 0
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	70 e0       	ldi	r23, 0x00	; 0
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	9f e3       	ldi	r25, 0x3F	; 63
 514:	5e cf       	rjmp	.-324    	; 0x3d2 <setDutyCycle>
 516:	08 95       	ret

00000518 <setTurnRight>:
}


void setTurnRight() {
	
	changeDirection(BACKWARD, L_WHEEL);
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	70 e0       	ldi	r23, 0x00	; 0
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	36 df       	rcall	.-404    	; 0x38e <changeDirection>
	changeDirection(FORWARD, R_WHEEL);
 522:	61 e0       	ldi	r22, 0x01	; 1
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	31 df       	rcall	.-414    	; 0x38e <changeDirection>
	setDutyCycle(0.5, L_WHEEL);
 52c:	40 e0       	ldi	r20, 0x00	; 0
 52e:	50 e0       	ldi	r21, 0x00	; 0
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	9f e3       	ldi	r25, 0x3F	; 63
 538:	4c df       	rcall	.-360    	; 0x3d2 <setDutyCycle>
	setDutyCycle(0.5, R_WHEEL);
 53a:	41 e0       	ldi	r20, 0x01	; 1
 53c:	50 e0       	ldi	r21, 0x00	; 0
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	70 e0       	ldi	r23, 0x00	; 0
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	9f e3       	ldi	r25, 0x3F	; 63
 546:	45 cf       	rjmp	.-374    	; 0x3d2 <setDutyCycle>
 548:	08 95       	ret

0000054a <turn>:
}

void turn(int d) {
 54a:	0f 93       	push	r16
 54c:	1f 93       	push	r17
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	8c 01       	movw	r16, r24
	int oldMode = getMode();
 554:	cf d0       	rcall	.+414    	; 0x6f4 <getMode>
 556:	ec 01       	movw	r28, r24
	stop();
 558:	b4 df       	rcall	.-152    	; 0x4c2 <stop>
 55a:	82 e0       	ldi	r24, 0x02	; 2
	setMode(TURNING);
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	cf d0       	rcall	.+414    	; 0x6fe <setMode>
 560:	f8 94       	cli
	//_delay_ms(100);
	cli();
 562:	10 16       	cp	r1, r16
	
	if (d > 0) setTurnLeft();
 564:	11 06       	cpc	r1, r17
 566:	14 f4       	brge	.+4      	; 0x56c <turn+0x22>
 568:	be df       	rcall	.-132    	; 0x4e6 <setTurnLeft>
 56a:	04 c0       	rjmp	.+8      	; 0x574 <turn+0x2a>
	else  {
		d *= -1;
 56c:	11 95       	neg	r17
 56e:	01 95       	neg	r16
 570:	11 09       	sbc	r17, r1
		setTurnRight();
 572:	d2 df       	rcall	.-92     	; 0x518 <setTurnRight>
 574:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <leftCount+0x1>
	}
	leftCount = 0;
 578:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <leftCount>
 57c:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <rightcount+0x1>
	rightcount = 0;
 580:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <rightcount>
 584:	78 94       	sei
	
	sei();
 586:	29 e1       	ldi	r18, 0x19	; 25
	
	int count = (d * 25) / 90;
 588:	20 9f       	mul	r18, r16
 58a:	c0 01       	movw	r24, r0
 58c:	21 9f       	mul	r18, r17
 58e:	90 0d       	add	r25, r0
 590:	11 24       	eor	r1, r1
 592:	6a e5       	ldi	r22, 0x5A	; 90
 594:	70 e0       	ldi	r23, 0x00	; 0
 596:	36 d3       	rcall	.+1644   	; 0xc04 <__divmodhi4>
 598:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <leftCount>

	while(leftCount < count) {
 59c:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <leftCount+0x1>
 5a0:	86 17       	cp	r24, r22
 5a2:	97 07       	cpc	r25, r23
 5a4:	5c f4       	brge	.+22     	; 0x5bc <turn+0x72>
 5a6:	24 e0       	ldi	r18, 0x04	; 4
		 PORTF ^= (1<<PF2);
 5a8:	81 b3       	in	r24, 0x11	; 17
 5aa:	82 27       	eor	r24, r18
 5ac:	81 bb       	out	0x11, r24	; 17
 5ae:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <leftCount>
	
	sei();
	
	int count = (d * 25) / 90;

	while(leftCount < count) {
 5b2:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <leftCount+0x1>
 5b6:	86 17       	cp	r24, r22
 5b8:	97 07       	cpc	r25, r23
		 PORTF ^= (1<<PF2);
	}
	stop();
 5ba:	b4 f3       	brlt	.-20     	; 0x5a8 <turn+0x5e>
 5bc:	82 df       	rcall	.-252    	; 0x4c2 <stop>
	setMode(oldMode);
 5be:	ce 01       	movw	r24, r28
 5c0:	9e d0       	rcall	.+316    	; 0x6fe <setMode>
 5c2:	df 91       	pop	r29
}
 5c4:	cf 91       	pop	r28
 5c6:	1f 91       	pop	r17
 5c8:	0f 91       	pop	r16
 5ca:	08 95       	ret

000005cc <initWheels>:
 5cc:	87 b1       	in	r24, 0x07	; 7

void initWheels() {
	DDRC |= 0x0F; 
 5ce:	8f 60       	ori	r24, 0x0F	; 15
 5d0:	87 b9       	out	0x07, r24	; 7
	DDRL |= 0x18;
 5d2:	ea e0       	ldi	r30, 0x0A	; 10
 5d4:	f1 e0       	ldi	r31, 0x01	; 1
 5d6:	80 81       	ld	r24, Z
 5d8:	88 61       	ori	r24, 0x18	; 24
 5da:	80 83       	st	Z, r24
	
	timer = 0;
 5dc:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <timer>
 5e0:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <timer+0x1>
 5e4:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <timer+0x2>
 5e8:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <timer+0x3>
 5ec:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <timer+0x4>
 5f0:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <timer+0x5>
 5f4:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <timer+0x6>
 5f8:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <timer+0x7>

	int period = 1000; //total time

	// set up left timer
	ICR5 = period;
 5fc:	88 ee       	ldi	r24, 0xE8	; 232
 5fe:	93 e0       	ldi	r25, 0x03	; 3
 600:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
 604:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
	setDutyCycle(0, L_WHEEL);
 608:	40 e0       	ldi	r20, 0x00	; 0
 60a:	50 e0       	ldi	r21, 0x00	; 0
 60c:	60 e0       	ldi	r22, 0x00	; 0
 60e:	70 e0       	ldi	r23, 0x00	; 0
 610:	cb 01       	movw	r24, r22
 612:	df de       	rcall	.-578    	; 0x3d2 <setDutyCycle>
	setDutyCycle(0, R_WHEEL);
 614:	41 e0       	ldi	r20, 0x01	; 1
 616:	50 e0       	ldi	r21, 0x00	; 0
 618:	60 e0       	ldi	r22, 0x00	; 0
 61a:	70 e0       	ldi	r23, 0x00	; 0
 61c:	cb 01       	movw	r24, r22
 61e:	d9 de       	rcall	.-590    	; 0x3d2 <setDutyCycle>

	TCCR5A |= (1 <<COM5A1) | (1 << COM5B1);
 620:	e0 e2       	ldi	r30, 0x20	; 32
 622:	f1 e0       	ldi	r31, 0x01	; 1
 624:	80 81       	ld	r24, Z
 626:	80 6a       	ori	r24, 0xA0	; 160
 628:	80 83       	st	Z, r24
	TCCR5B |= (1 << WGM53) | (1 << CS51);
 62a:	e1 e2       	ldi	r30, 0x21	; 33
 62c:	f1 e0       	ldi	r31, 0x01	; 1
 62e:	80 81       	ld	r24, Z
 630:	82 61       	ori	r24, 0x12	; 18
 632:	80 83       	st	Z, r24
	
	
	PORTC |= L_FORWARD;
 634:	43 9a       	sbi	0x08, 3	; 8
	PORTC |= R_FORWARD; 
 636:	40 9a       	sbi	0x08, 0	; 8
	
	// setup photoregister slit detection.
	PORTJ &= ~((1 << PJ1) | (1 << PJ0));
 638:	e5 e0       	ldi	r30, 0x05	; 5
 63a:	f1 e0       	ldi	r31, 0x01	; 1
 63c:	80 81       	ld	r24, Z
 63e:	8c 7f       	andi	r24, 0xFC	; 252
 640:	80 83       	st	Z, r24
	
	PCMSK1 |= (1 << PCINT9);
 642:	ec e6       	ldi	r30, 0x6C	; 108
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	80 81       	ld	r24, Z
 648:	82 60       	ori	r24, 0x02	; 2
 64a:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT10);
 64c:	80 81       	ld	r24, Z
 64e:	84 60       	ori	r24, 0x04	; 4
 650:	80 83       	st	Z, r24
	
	PCICR |= (1<<PCIE1);
 652:	e8 e6       	ldi	r30, 0x68	; 104
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	80 81       	ld	r24, Z
 658:	82 60       	ori	r24, 0x02	; 2
 65a:	80 83       	st	Z, r24
 65c:	08 95       	ret

0000065e <__vector_10>:
	sei();
}


// pin 15 reads the right wheel, functions as the master
ISR(PCINT1_vect) {
 65e:	1f 92       	push	r1
 660:	0f 92       	push	r0
 662:	0f b6       	in	r0, 0x3f	; 63
 664:	0f 92       	push	r0
 666:	11 24       	eor	r1, r1
 668:	0b b6       	in	r0, 0x3b	; 59
 66a:	0f 92       	push	r0
 66c:	2f 93       	push	r18
 66e:	3f 93       	push	r19
 670:	4f 93       	push	r20
 672:	6f 93       	push	r22
 674:	7f 93       	push	r23
 676:	8f 93       	push	r24
 678:	9f 93       	push	r25
 67a:	ef 93       	push	r30
 67c:	ff 93       	push	r31
	//cli();
	//PSprintf(0, "%d\n\r", leftCount);
	//PORTB ^= 0x80;
	//PORTF ^= (1 << PF2);
	
	int J = PINJ;
 67e:	e3 e0       	ldi	r30, 0x03	; 3
 680:	f1 e0       	ldi	r31, 0x01	; 1
 682:	40 81       	ld	r20, Z
	
	int change = J ^ oldJ;
	
	//PORTF = change;
	
	int RisON = (PINJ | (1<<PJ1));
 684:	20 81       	ld	r18, Z
	int LisON = (PINJ | (1<<PJ0));
 686:	80 81       	ld	r24, Z
	
	// If master
	if(change | (1 << PJ1)) {
		//	update interval time
		rightcount = rightcount + 1;
 688:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <rightcount>
 68c:	70 91 19 02 	lds	r23, 0x0219	; 0x800219 <rightcount+0x1>
 690:	6f 5f       	subi	r22, 0xFF	; 255
 692:	7f 4f       	sbci	r23, 0xFF	; 255
 694:	70 93 19 02 	sts	0x0219, r23	; 0x800219 <rightcount+0x1>
 698:	60 93 18 02 	sts	0x0218, r22	; 0x800218 <rightcount>
		// else if slave
	}
	if(change | (1 << PJ0)) {
		//	compare interval time to master and adjust duty cycle accordingly.
		leftCount = leftCount + 1;
 69c:	60 91 1a 02 	lds	r22, 0x021A	; 0x80021a <leftCount>
 6a0:	70 91 1b 02 	lds	r23, 0x021B	; 0x80021b <leftCount+0x1>
 6a4:	6f 5f       	subi	r22, 0xFF	; 255
 6a6:	7f 4f       	sbci	r23, 0xFF	; 255
 6a8:	70 93 1b 02 	sts	0x021B, r23	; 0x80021b <leftCount+0x1>
 6ac:	60 93 1a 02 	sts	0x021A, r22	; 0x80021a <leftCount>
	}
	
	RwasOn = RisON;
 6b0:	22 60       	ori	r18, 0x02	; 2
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	30 93 27 02 	sts	0x0227, r19	; 0x800227 <RwasOn+0x1>
 6b8:	20 93 26 02 	sts	0x0226, r18	; 0x800226 <RwasOn>
	LwasOn = LisON;
 6bc:	81 60       	ori	r24, 0x01	; 1
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <LwasOn+0x1>
 6c4:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <LwasOn>
	oldJ = J;
 6c8:	84 2f       	mov	r24, r20
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <oldJ+0x1>
 6d0:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <oldJ>
	//sei();
}
 6d4:	ff 91       	pop	r31
 6d6:	ef 91       	pop	r30
 6d8:	9f 91       	pop	r25
 6da:	8f 91       	pop	r24
 6dc:	7f 91       	pop	r23
 6de:	6f 91       	pop	r22
 6e0:	4f 91       	pop	r20
 6e2:	3f 91       	pop	r19
 6e4:	2f 91       	pop	r18
 6e6:	0f 90       	pop	r0
 6e8:	0b be       	out	0x3b, r0	; 59
 6ea:	0f 90       	pop	r0
 6ec:	0f be       	out	0x3f, r0	; 63
 6ee:	0f 90       	pop	r0
 6f0:	1f 90       	pop	r1
 6f2:	18 95       	reti

000006f4 <getMode>:
#include "acxserial.h"

volatile int mode;

int getMode() {
	return mode;
 6f4:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <mode>
 6f8:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <mode+0x1>
}
 6fc:	08 95       	ret

000006fe <setMode>:

void setMode(int newMode) {
	mode = newMode;
 6fe:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <mode+0x1>
 702:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <mode>
 706:	08 95       	ret

00000708 <init>:
}

void init() {
	//setTime();
	//PSerial_open(0, BAUD9600, SERIAL_8N1);
	mode = STRAIGHT;
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <mode+0x1>
 710:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <mode>

	initIRDet();
 714:	e6 dd       	rcall	.-1076   	; 0x2e2 <initIRDet>
	initWheels();
 716:	5a df       	rcall	.-332    	; 0x5cc <initWheels>
	initUS();
 718:	7e dd       	rcall	.-1284   	; 0x216 <initUS>
 71a:	78 94       	sei
	sei();
 71c:	08 95       	ret

0000071e <main>:
 71e:	f4 df       	rcall	.-24     	; 0x708 <init>

int main(void)
{
	init();
	
	x_init();
 720:	61 d1       	rcall	.+706    	; 0x9e4 <x_init>
 722:	88 ee       	ldi	r24, 0xE8	; 232
	x_delay(1000);
 724:	93 e0       	ldi	r25, 0x03	; 3
 726:	d5 d1       	rcall	.+938    	; 0xad2 <x_delay>
 728:	41 e0       	ldi	r20, 0x01	; 1
	

	x_new(2, wheelControl, 1);
 72a:	50 e0       	ldi	r21, 0x00	; 0
 72c:	61 e5       	ldi	r22, 0x51	; 81
 72e:	72 e0       	ldi	r23, 0x02	; 2
 730:	82 e0       	ldi	r24, 0x02	; 2
 732:	1b d1       	rcall	.+566    	; 0x96a <x_new>
 734:	41 e0       	ldi	r20, 0x01	; 1
	x_new(1, irControl, 1);
 736:	50 e0       	ldi	r21, 0x00	; 0
 738:	68 e7       	ldi	r22, 0x78	; 120
 73a:	71 e0       	ldi	r23, 0x01	; 1
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	15 d1       	rcall	.+554    	; 0x96a <x_new>
 740:	41 e0       	ldi	r20, 0x01	; 1
	x_new(3, USdetect, 1);
 742:	50 e0       	ldi	r21, 0x00	; 0
 744:	6c e1       	ldi	r22, 0x1C	; 28
 746:	71 e0       	ldi	r23, 0x01	; 1
 748:	83 e0       	ldi	r24, 0x03	; 3
 74a:	0f d1       	rcall	.+542    	; 0x96a <x_new>
	
	while (1)
	{
		//turn(90);
		//_delay_ms(2000); 
		x_yield();
 74c:	eb dc       	rcall	.-1578   	; 0x124 <x_yield>
 74e:	fe cf       	rjmp	.-4      	; 0x74c <main+0x2e>

00000750 <__cmpsf2>:
 750:	34 d0       	rcall	.+104    	; 0x7ba <__fp_cmp>
 752:	08 f4       	brcc	.+2      	; 0x756 <__cmpsf2+0x6>
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	08 95       	ret

00000758 <__fixsfsi>:
 758:	04 d0       	rcall	.+8      	; 0x762 <__fixunssfsi>
 75a:	68 94       	set
 75c:	b1 11       	cpse	r27, r1
 75e:	74 c0       	rjmp	.+232    	; 0x848 <__fp_szero>
 760:	08 95       	ret

00000762 <__fixunssfsi>:
 762:	57 d0       	rcall	.+174    	; 0x812 <__fp_splitA>
 764:	88 f0       	brcs	.+34     	; 0x788 <__fixunssfsi+0x26>
 766:	9f 57       	subi	r25, 0x7F	; 127
 768:	90 f0       	brcs	.+36     	; 0x78e <__fixunssfsi+0x2c>
 76a:	b9 2f       	mov	r27, r25
 76c:	99 27       	eor	r25, r25
 76e:	b7 51       	subi	r27, 0x17	; 23
 770:	a0 f0       	brcs	.+40     	; 0x79a <__fixunssfsi+0x38>
 772:	d1 f0       	breq	.+52     	; 0x7a8 <__fixunssfsi+0x46>
 774:	66 0f       	add	r22, r22
 776:	77 1f       	adc	r23, r23
 778:	88 1f       	adc	r24, r24
 77a:	99 1f       	adc	r25, r25
 77c:	1a f0       	brmi	.+6      	; 0x784 <__fixunssfsi+0x22>
 77e:	ba 95       	dec	r27
 780:	c9 f7       	brne	.-14     	; 0x774 <__fixunssfsi+0x12>
 782:	12 c0       	rjmp	.+36     	; 0x7a8 <__fixunssfsi+0x46>
 784:	b1 30       	cpi	r27, 0x01	; 1
 786:	81 f0       	breq	.+32     	; 0x7a8 <__fixunssfsi+0x46>
 788:	5e d0       	rcall	.+188    	; 0x846 <__fp_zero>
 78a:	b1 e0       	ldi	r27, 0x01	; 1
 78c:	08 95       	ret
 78e:	5b c0       	rjmp	.+182    	; 0x846 <__fp_zero>
 790:	67 2f       	mov	r22, r23
 792:	78 2f       	mov	r23, r24
 794:	88 27       	eor	r24, r24
 796:	b8 5f       	subi	r27, 0xF8	; 248
 798:	39 f0       	breq	.+14     	; 0x7a8 <__fixunssfsi+0x46>
 79a:	b9 3f       	cpi	r27, 0xF9	; 249
 79c:	cc f3       	brlt	.-14     	; 0x790 <__fixunssfsi+0x2e>
 79e:	86 95       	lsr	r24
 7a0:	77 95       	ror	r23
 7a2:	67 95       	ror	r22
 7a4:	b3 95       	inc	r27
 7a6:	d9 f7       	brne	.-10     	; 0x79e <__fixunssfsi+0x3c>
 7a8:	3e f4       	brtc	.+14     	; 0x7b8 <__fixunssfsi+0x56>
 7aa:	90 95       	com	r25
 7ac:	80 95       	com	r24
 7ae:	70 95       	com	r23
 7b0:	61 95       	neg	r22
 7b2:	7f 4f       	sbci	r23, 0xFF	; 255
 7b4:	8f 4f       	sbci	r24, 0xFF	; 255
 7b6:	9f 4f       	sbci	r25, 0xFF	; 255
 7b8:	08 95       	ret

000007ba <__fp_cmp>:
 7ba:	99 0f       	add	r25, r25
 7bc:	00 08       	sbc	r0, r0
 7be:	55 0f       	add	r21, r21
 7c0:	aa 0b       	sbc	r26, r26
 7c2:	e0 e8       	ldi	r30, 0x80	; 128
 7c4:	fe ef       	ldi	r31, 0xFE	; 254
 7c6:	16 16       	cp	r1, r22
 7c8:	17 06       	cpc	r1, r23
 7ca:	e8 07       	cpc	r30, r24
 7cc:	f9 07       	cpc	r31, r25
 7ce:	c0 f0       	brcs	.+48     	; 0x800 <__fp_cmp+0x46>
 7d0:	12 16       	cp	r1, r18
 7d2:	13 06       	cpc	r1, r19
 7d4:	e4 07       	cpc	r30, r20
 7d6:	f5 07       	cpc	r31, r21
 7d8:	98 f0       	brcs	.+38     	; 0x800 <__fp_cmp+0x46>
 7da:	62 1b       	sub	r22, r18
 7dc:	73 0b       	sbc	r23, r19
 7de:	84 0b       	sbc	r24, r20
 7e0:	95 0b       	sbc	r25, r21
 7e2:	39 f4       	brne	.+14     	; 0x7f2 <__fp_cmp+0x38>
 7e4:	0a 26       	eor	r0, r26
 7e6:	61 f0       	breq	.+24     	; 0x800 <__fp_cmp+0x46>
 7e8:	23 2b       	or	r18, r19
 7ea:	24 2b       	or	r18, r20
 7ec:	25 2b       	or	r18, r21
 7ee:	21 f4       	brne	.+8      	; 0x7f8 <__fp_cmp+0x3e>
 7f0:	08 95       	ret
 7f2:	0a 26       	eor	r0, r26
 7f4:	09 f4       	brne	.+2      	; 0x7f8 <__fp_cmp+0x3e>
 7f6:	a1 40       	sbci	r26, 0x01	; 1
 7f8:	a6 95       	lsr	r26
 7fa:	8f ef       	ldi	r24, 0xFF	; 255
 7fc:	81 1d       	adc	r24, r1
 7fe:	81 1d       	adc	r24, r1
 800:	08 95       	ret

00000802 <__fp_split3>:
 802:	57 fd       	sbrc	r21, 7
 804:	90 58       	subi	r25, 0x80	; 128
 806:	44 0f       	add	r20, r20
 808:	55 1f       	adc	r21, r21
 80a:	59 f0       	breq	.+22     	; 0x822 <__fp_splitA+0x10>
 80c:	5f 3f       	cpi	r21, 0xFF	; 255
 80e:	71 f0       	breq	.+28     	; 0x82c <__fp_splitA+0x1a>
 810:	47 95       	ror	r20

00000812 <__fp_splitA>:
 812:	88 0f       	add	r24, r24
 814:	97 fb       	bst	r25, 7
 816:	99 1f       	adc	r25, r25
 818:	61 f0       	breq	.+24     	; 0x832 <__fp_splitA+0x20>
 81a:	9f 3f       	cpi	r25, 0xFF	; 255
 81c:	79 f0       	breq	.+30     	; 0x83c <__fp_splitA+0x2a>
 81e:	87 95       	ror	r24
 820:	08 95       	ret
 822:	12 16       	cp	r1, r18
 824:	13 06       	cpc	r1, r19
 826:	14 06       	cpc	r1, r20
 828:	55 1f       	adc	r21, r21
 82a:	f2 cf       	rjmp	.-28     	; 0x810 <__fp_split3+0xe>
 82c:	46 95       	lsr	r20
 82e:	f1 df       	rcall	.-30     	; 0x812 <__fp_splitA>
 830:	08 c0       	rjmp	.+16     	; 0x842 <__fp_splitA+0x30>
 832:	16 16       	cp	r1, r22
 834:	17 06       	cpc	r1, r23
 836:	18 06       	cpc	r1, r24
 838:	99 1f       	adc	r25, r25
 83a:	f1 cf       	rjmp	.-30     	; 0x81e <__fp_splitA+0xc>
 83c:	86 95       	lsr	r24
 83e:	71 05       	cpc	r23, r1
 840:	61 05       	cpc	r22, r1
 842:	08 94       	sec
 844:	08 95       	ret

00000846 <__fp_zero>:
 846:	e8 94       	clt

00000848 <__fp_szero>:
 848:	bb 27       	eor	r27, r27
 84a:	66 27       	eor	r22, r22
 84c:	77 27       	eor	r23, r23
 84e:	cb 01       	movw	r24, r22
 850:	97 f9       	bld	r25, 7
 852:	08 95       	ret

00000854 <__mulsf3>:
 854:	0b d0       	rcall	.+22     	; 0x86c <__mulsf3x>
 856:	78 c0       	rjmp	.+240    	; 0x948 <__fp_round>
 858:	69 d0       	rcall	.+210    	; 0x92c <__fp_pscA>
 85a:	28 f0       	brcs	.+10     	; 0x866 <__mulsf3+0x12>
 85c:	6e d0       	rcall	.+220    	; 0x93a <__fp_pscB>
 85e:	18 f0       	brcs	.+6      	; 0x866 <__mulsf3+0x12>
 860:	95 23       	and	r25, r21
 862:	09 f0       	breq	.+2      	; 0x866 <__mulsf3+0x12>
 864:	5a c0       	rjmp	.+180    	; 0x91a <__fp_inf>
 866:	5f c0       	rjmp	.+190    	; 0x926 <__fp_nan>
 868:	11 24       	eor	r1, r1
 86a:	ee cf       	rjmp	.-36     	; 0x848 <__fp_szero>

0000086c <__mulsf3x>:
 86c:	ca df       	rcall	.-108    	; 0x802 <__fp_split3>
 86e:	a0 f3       	brcs	.-24     	; 0x858 <__mulsf3+0x4>

00000870 <__mulsf3_pse>:
 870:	95 9f       	mul	r25, r21
 872:	d1 f3       	breq	.-12     	; 0x868 <__mulsf3+0x14>
 874:	95 0f       	add	r25, r21
 876:	50 e0       	ldi	r21, 0x00	; 0
 878:	55 1f       	adc	r21, r21
 87a:	62 9f       	mul	r22, r18
 87c:	f0 01       	movw	r30, r0
 87e:	72 9f       	mul	r23, r18
 880:	bb 27       	eor	r27, r27
 882:	f0 0d       	add	r31, r0
 884:	b1 1d       	adc	r27, r1
 886:	63 9f       	mul	r22, r19
 888:	aa 27       	eor	r26, r26
 88a:	f0 0d       	add	r31, r0
 88c:	b1 1d       	adc	r27, r1
 88e:	aa 1f       	adc	r26, r26
 890:	64 9f       	mul	r22, r20
 892:	66 27       	eor	r22, r22
 894:	b0 0d       	add	r27, r0
 896:	a1 1d       	adc	r26, r1
 898:	66 1f       	adc	r22, r22
 89a:	82 9f       	mul	r24, r18
 89c:	22 27       	eor	r18, r18
 89e:	b0 0d       	add	r27, r0
 8a0:	a1 1d       	adc	r26, r1
 8a2:	62 1f       	adc	r22, r18
 8a4:	73 9f       	mul	r23, r19
 8a6:	b0 0d       	add	r27, r0
 8a8:	a1 1d       	adc	r26, r1
 8aa:	62 1f       	adc	r22, r18
 8ac:	83 9f       	mul	r24, r19
 8ae:	a0 0d       	add	r26, r0
 8b0:	61 1d       	adc	r22, r1
 8b2:	22 1f       	adc	r18, r18
 8b4:	74 9f       	mul	r23, r20
 8b6:	33 27       	eor	r19, r19
 8b8:	a0 0d       	add	r26, r0
 8ba:	61 1d       	adc	r22, r1
 8bc:	23 1f       	adc	r18, r19
 8be:	84 9f       	mul	r24, r20
 8c0:	60 0d       	add	r22, r0
 8c2:	21 1d       	adc	r18, r1
 8c4:	82 2f       	mov	r24, r18
 8c6:	76 2f       	mov	r23, r22
 8c8:	6a 2f       	mov	r22, r26
 8ca:	11 24       	eor	r1, r1
 8cc:	9f 57       	subi	r25, 0x7F	; 127
 8ce:	50 40       	sbci	r21, 0x00	; 0
 8d0:	8a f0       	brmi	.+34     	; 0x8f4 <__mulsf3_pse+0x84>
 8d2:	e1 f0       	breq	.+56     	; 0x90c <__mulsf3_pse+0x9c>
 8d4:	88 23       	and	r24, r24
 8d6:	4a f0       	brmi	.+18     	; 0x8ea <__mulsf3_pse+0x7a>
 8d8:	ee 0f       	add	r30, r30
 8da:	ff 1f       	adc	r31, r31
 8dc:	bb 1f       	adc	r27, r27
 8de:	66 1f       	adc	r22, r22
 8e0:	77 1f       	adc	r23, r23
 8e2:	88 1f       	adc	r24, r24
 8e4:	91 50       	subi	r25, 0x01	; 1
 8e6:	50 40       	sbci	r21, 0x00	; 0
 8e8:	a9 f7       	brne	.-22     	; 0x8d4 <__mulsf3_pse+0x64>
 8ea:	9e 3f       	cpi	r25, 0xFE	; 254
 8ec:	51 05       	cpc	r21, r1
 8ee:	70 f0       	brcs	.+28     	; 0x90c <__mulsf3_pse+0x9c>
 8f0:	14 c0       	rjmp	.+40     	; 0x91a <__fp_inf>
 8f2:	aa cf       	rjmp	.-172    	; 0x848 <__fp_szero>
 8f4:	5f 3f       	cpi	r21, 0xFF	; 255
 8f6:	ec f3       	brlt	.-6      	; 0x8f2 <__mulsf3_pse+0x82>
 8f8:	98 3e       	cpi	r25, 0xE8	; 232
 8fa:	dc f3       	brlt	.-10     	; 0x8f2 <__mulsf3_pse+0x82>
 8fc:	86 95       	lsr	r24
 8fe:	77 95       	ror	r23
 900:	67 95       	ror	r22
 902:	b7 95       	ror	r27
 904:	f7 95       	ror	r31
 906:	e7 95       	ror	r30
 908:	9f 5f       	subi	r25, 0xFF	; 255
 90a:	c1 f7       	brne	.-16     	; 0x8fc <__mulsf3_pse+0x8c>
 90c:	fe 2b       	or	r31, r30
 90e:	88 0f       	add	r24, r24
 910:	91 1d       	adc	r25, r1
 912:	96 95       	lsr	r25
 914:	87 95       	ror	r24
 916:	97 f9       	bld	r25, 7
 918:	08 95       	ret

0000091a <__fp_inf>:
 91a:	97 f9       	bld	r25, 7
 91c:	9f 67       	ori	r25, 0x7F	; 127
 91e:	80 e8       	ldi	r24, 0x80	; 128
 920:	70 e0       	ldi	r23, 0x00	; 0
 922:	60 e0       	ldi	r22, 0x00	; 0
 924:	08 95       	ret

00000926 <__fp_nan>:
 926:	9f ef       	ldi	r25, 0xFF	; 255
 928:	80 ec       	ldi	r24, 0xC0	; 192
 92a:	08 95       	ret

0000092c <__fp_pscA>:
 92c:	00 24       	eor	r0, r0
 92e:	0a 94       	dec	r0
 930:	16 16       	cp	r1, r22
 932:	17 06       	cpc	r1, r23
 934:	18 06       	cpc	r1, r24
 936:	09 06       	cpc	r0, r25
 938:	08 95       	ret

0000093a <__fp_pscB>:
 93a:	00 24       	eor	r0, r0
 93c:	0a 94       	dec	r0
 93e:	12 16       	cp	r1, r18
 940:	13 06       	cpc	r1, r19
 942:	14 06       	cpc	r1, r20
 944:	05 06       	cpc	r0, r21
 946:	08 95       	ret

00000948 <__fp_round>:
 948:	09 2e       	mov	r0, r25
 94a:	03 94       	inc	r0
 94c:	00 0c       	add	r0, r0
 94e:	11 f4       	brne	.+4      	; 0x954 <__fp_round+0xc>
 950:	88 23       	and	r24, r24
 952:	52 f0       	brmi	.+20     	; 0x968 <__fp_round+0x20>
 954:	bb 0f       	add	r27, r27
 956:	40 f4       	brcc	.+16     	; 0x968 <__fp_round+0x20>
 958:	bf 2b       	or	r27, r31
 95a:	11 f4       	brne	.+4      	; 0x960 <__fp_round+0x18>
 95c:	60 ff       	sbrs	r22, 0
 95e:	04 c0       	rjmp	.+8      	; 0x968 <__fp_round+0x20>
 960:	6f 5f       	subi	r22, 0xFF	; 255
 962:	7f 4f       	sbci	r23, 0xFF	; 255
 964:	8f 4f       	sbci	r24, 0xFF	; 255
 966:	9f 4f       	sbci	r25, 0xFF	; 255
 968:	08 95       	ret

0000096a <x_new>:
 96a:	cf 93       	push	r28
 96c:	df 93       	push	r29
 96e:	c8 2f       	mov	r28, r24
 970:	d4 2f       	mov	r29, r20
 972:	e8 2f       	mov	r30, r24
 974:	f0 e0       	ldi	r31, 0x00	; 0
 976:	ee 0f       	add	r30, r30
 978:	ff 1f       	adc	r31, r31
 97a:	ee 0f       	add	r30, r30
 97c:	ff 1f       	adc	r31, r31
 97e:	9f 01       	movw	r18, r30
 980:	22 5c       	subi	r18, 0xC2	; 194
 982:	3d 4f       	sbci	r19, 0xFD	; 253
 984:	f9 01       	movw	r30, r18
 986:	a2 81       	ldd	r26, Z+2	; 0x02
 988:	b3 81       	ldd	r27, Z+3	; 0x03
 98a:	6c 93       	st	X, r22
 98c:	cd 01       	movw	r24, r26
 98e:	01 97       	sbiw	r24, 0x01	; 1
 990:	fc 01       	movw	r30, r24
 992:	70 83       	st	Z, r23
 994:	01 97       	sbiw	r24, 0x01	; 1
 996:	fc 01       	movw	r30, r24
 998:	10 82       	st	Z, r1
 99a:	55 97       	sbiw	r26, 0x15	; 21
 99c:	f9 01       	movw	r30, r18
 99e:	b1 83       	std	Z+1, r27	; 0x01
 9a0:	a0 83       	st	Z, r26
 9a2:	8c 2f       	mov	r24, r28
 9a4:	2e dc       	rcall	.-1956   	; 0x202 <bit2mask8>
 9a6:	dd 23       	and	r29, r29
 9a8:	39 f0       	breq	.+14     	; 0x9b8 <x_new+0x4e>
 9aa:	80 95       	com	r24
 9ac:	90 91 6f 0a 	lds	r25, 0x0A6F	; 0x800a6f <x_disable_status>
 9b0:	89 23       	and	r24, r25
 9b2:	80 93 6f 0a 	sts	0x0A6F, r24	; 0x800a6f <x_disable_status>
 9b6:	05 c0       	rjmp	.+10     	; 0x9c2 <x_new+0x58>
 9b8:	90 91 6f 0a 	lds	r25, 0x0A6F	; 0x800a6f <x_disable_status>
 9bc:	89 2b       	or	r24, r25
 9be:	80 93 6f 0a 	sts	0x0A6F, r24	; 0x800a6f <x_disable_status>
 9c2:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <x_thread_id>
 9c6:	c8 13       	cpse	r28, r24
 9c8:	01 c0       	rjmp	.+2      	; 0x9cc <x_new+0x62>
 9ca:	dc db       	rcall	.-2120   	; 0x184 <x_schedule>
 9cc:	df 91       	pop	r29
 9ce:	cf 91       	pop	r28
 9d0:	08 95       	ret

000009d2 <init_System_Timer>:
 9d2:	82 e0       	ldi	r24, 0x02	; 2
 9d4:	84 bd       	out	0x24, r24	; 36
 9d6:	9a ef       	ldi	r25, 0xFA	; 250
 9d8:	97 bd       	out	0x27, r25	; 39
 9da:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
 9de:	83 e0       	ldi	r24, 0x03	; 3
 9e0:	85 bd       	out	0x25, r24	; 37
 9e2:	08 95       	ret

000009e4 <x_init>:
 9e4:	cf 93       	push	r28
 9e6:	df 93       	push	r29
 9e8:	f8 94       	cli
 9ea:	8e ef       	ldi	r24, 0xFE	; 254
 9ec:	80 93 6f 0a 	sts	0x0A6F, r24	; 0x800a6f <x_disable_status>
 9f0:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <x_suspend_status>
 9f4:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <x_delay_status>
 9f8:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <x_thread_id>
 9fc:	81 e0       	ldi	r24, 0x01	; 1
 9fe:	80 93 70 0a 	sts	0x0A70, r24	; 0x800a70 <x_thread_mask>
 a02:	ce e3       	ldi	r28, 0x3E	; 62
 a04:	d2 e0       	ldi	r29, 0x02	; 2
 a06:	8e e5       	ldi	r24, 0x5E	; 94
 a08:	93 e0       	ldi	r25, 0x03	; 3
 a0a:	99 83       	std	Y+1, r25	; 0x01
 a0c:	88 83       	st	Y, r24
 a0e:	9b 83       	std	Y+3, r25	; 0x03
 a10:	8a 83       	std	Y+2, r24	; 0x02
 a12:	8e e5       	ldi	r24, 0x5E	; 94
 a14:	94 e0       	ldi	r25, 0x04	; 4
 a16:	9d 83       	std	Y+5, r25	; 0x05
 a18:	8c 83       	std	Y+4, r24	; 0x04
 a1a:	9f 83       	std	Y+7, r25	; 0x07
 a1c:	8e 83       	std	Y+6, r24	; 0x06
 a1e:	8e e5       	ldi	r24, 0x5E	; 94
 a20:	95 e0       	ldi	r25, 0x05	; 5
 a22:	99 87       	std	Y+9, r25	; 0x09
 a24:	88 87       	std	Y+8, r24	; 0x08
 a26:	9b 87       	std	Y+11, r25	; 0x0b
 a28:	8a 87       	std	Y+10, r24	; 0x0a
 a2a:	8e e5       	ldi	r24, 0x5E	; 94
 a2c:	96 e0       	ldi	r25, 0x06	; 6
 a2e:	9d 87       	std	Y+13, r25	; 0x0d
 a30:	8c 87       	std	Y+12, r24	; 0x0c
 a32:	9f 87       	std	Y+15, r25	; 0x0f
 a34:	8e 87       	std	Y+14, r24	; 0x0e
 a36:	8e e5       	ldi	r24, 0x5E	; 94
 a38:	97 e0       	ldi	r25, 0x07	; 7
 a3a:	99 8b       	std	Y+17, r25	; 0x11
 a3c:	88 8b       	std	Y+16, r24	; 0x10
 a3e:	9b 8b       	std	Y+19, r25	; 0x13
 a40:	8a 8b       	std	Y+18, r24	; 0x12
 a42:	8e e5       	ldi	r24, 0x5E	; 94
 a44:	98 e0       	ldi	r25, 0x08	; 8
 a46:	9d 8b       	std	Y+21, r25	; 0x15
 a48:	8c 8b       	std	Y+20, r24	; 0x14
 a4a:	9f 8b       	std	Y+23, r25	; 0x17
 a4c:	8e 8b       	std	Y+22, r24	; 0x16
 a4e:	8e e5       	ldi	r24, 0x5E	; 94
 a50:	99 e0       	ldi	r25, 0x09	; 9
 a52:	99 8f       	std	Y+25, r25	; 0x19
 a54:	88 8f       	std	Y+24, r24	; 0x18
 a56:	9b 8f       	std	Y+27, r25	; 0x1b
 a58:	8a 8f       	std	Y+26, r24	; 0x1a
 a5a:	8e e5       	ldi	r24, 0x5E	; 94
 a5c:	9a e0       	ldi	r25, 0x0A	; 10
 a5e:	9d 8f       	std	Y+29, r25	; 0x1d
 a60:	8c 8f       	std	Y+28, r24	; 0x1c
 a62:	9f 8f       	std	Y+31, r25	; 0x1f
 a64:	8e 8f       	std	Y+30, r24	; 0x1e
 a66:	8a ea       	ldi	r24, 0xAA	; 170
 a68:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <x_thread_stacks>
 a6c:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <x_thread_stacks+0x100>
 a70:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <x_thread_stacks+0x200>
 a74:	80 93 5f 05 	sts	0x055F, r24	; 0x80055f <x_thread_stacks+0x300>
 a78:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <x_thread_stacks+0x400>
 a7c:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <x_thread_stacks+0x500>
 a80:	80 93 5f 08 	sts	0x085F, r24	; 0x80085f <x_thread_stacks+0x600>
 a84:	80 93 5f 09 	sts	0x095F, r24	; 0x80095f <x_thread_stacks+0x700>
 a88:	a4 df       	rcall	.-184    	; 0x9d2 <init_System_Timer>
 a8a:	ed b7       	in	r30, 0x3d	; 61
 a8c:	fe b7       	in	r31, 0x3e	; 62
 a8e:	a8 81       	ld	r26, Y
 a90:	b9 81       	ldd	r27, Y+1	; 0x01
 a92:	85 81       	ldd	r24, Z+5	; 0x05
 a94:	8c 93       	st	X, r24
 a96:	a8 81       	ld	r26, Y
 a98:	b9 81       	ldd	r27, Y+1	; 0x01
 a9a:	84 81       	ldd	r24, Z+4	; 0x04
 a9c:	11 97       	sbiw	r26, 0x01	; 1
 a9e:	8c 93       	st	X, r24
 aa0:	a8 81       	ld	r26, Y
 aa2:	b9 81       	ldd	r27, Y+1	; 0x01
 aa4:	83 81       	ldd	r24, Z+3	; 0x03
 aa6:	12 97       	sbiw	r26, 0x02	; 2
 aa8:	8c 93       	st	X, r24
 aaa:	a8 81       	ld	r26, Y
 aac:	b9 81       	ldd	r27, Y+1	; 0x01
 aae:	82 81       	ldd	r24, Z+2	; 0x02
 ab0:	13 97       	sbiw	r26, 0x03	; 3
 ab2:	8c 93       	st	X, r24
 ab4:	88 81       	ld	r24, Y
 ab6:	99 81       	ldd	r25, Y+1	; 0x01
 ab8:	21 81       	ldd	r18, Z+1	; 0x01
 aba:	fc 01       	movw	r30, r24
 abc:	34 97       	sbiw	r30, 0x04	; 4
 abe:	20 83       	st	Z, r18
 ac0:	88 81       	ld	r24, Y
 ac2:	99 81       	ldd	r25, Y+1	; 0x01
 ac4:	05 97       	sbiw	r24, 0x05	; 5
 ac6:	9e bf       	out	0x3e, r25	; 62
 ac8:	8d bf       	out	0x3d, r24	; 61
 aca:	78 94       	sei
 acc:	df 91       	pop	r29
 ace:	cf 91       	pop	r28
 ad0:	08 95       	ret

00000ad2 <x_delay>:
 ad2:	9c 01       	movw	r18, r24
 ad4:	9f b7       	in	r25, 0x3f	; 63
 ad6:	f8 94       	cli
 ad8:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <x_thread_id>
 adc:	f0 e0       	ldi	r31, 0x00	; 0
 ade:	ee 0f       	add	r30, r30
 ae0:	ff 1f       	adc	r31, r31
 ae2:	e1 5a       	subi	r30, 0xA1	; 161
 ae4:	f5 4f       	sbci	r31, 0xF5	; 245
 ae6:	31 83       	std	Z+1, r19	; 0x01
 ae8:	20 83       	st	Z, r18
 aea:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <x_delay_status>
 aee:	80 91 70 0a 	lds	r24, 0x0A70	; 0x800a70 <x_thread_mask>
 af2:	82 2b       	or	r24, r18
 af4:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <x_delay_status>
 af8:	9f bf       	out	0x3f, r25	; 63
 afa:	14 cb       	rjmp	.-2520   	; 0x124 <x_yield>
 afc:	08 95       	ret

00000afe <__vector_21>:
 afe:	1f 92       	push	r1
 b00:	0f 92       	push	r0
 b02:	0f b6       	in	r0, 0x3f	; 63
 b04:	0f 92       	push	r0
 b06:	11 24       	eor	r1, r1
 b08:	0b b6       	in	r0, 0x3b	; 59
 b0a:	0f 92       	push	r0
 b0c:	2f 93       	push	r18
 b0e:	3f 93       	push	r19
 b10:	4f 93       	push	r20
 b12:	5f 93       	push	r21
 b14:	8f 93       	push	r24
 b16:	9f 93       	push	r25
 b18:	af 93       	push	r26
 b1a:	bf 93       	push	r27
 b1c:	ef 93       	push	r30
 b1e:	ff 93       	push	r31
 b20:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <x_system_counter>
 b24:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <x_system_counter+0x1>
 b28:	a0 91 20 02 	lds	r26, 0x0220	; 0x800220 <x_system_counter+0x2>
 b2c:	b0 91 21 02 	lds	r27, 0x0221	; 0x800221 <x_system_counter+0x3>
 b30:	01 96       	adiw	r24, 0x01	; 1
 b32:	a1 1d       	adc	r26, r1
 b34:	b1 1d       	adc	r27, r1
 b36:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <x_system_counter>
 b3a:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <x_system_counter+0x1>
 b3e:	a0 93 20 02 	sts	0x0220, r26	; 0x800220 <x_system_counter+0x2>
 b42:	b0 93 21 02 	sts	0x0221, r27	; 0x800221 <x_system_counter+0x3>
 b46:	30 91 3d 02 	lds	r19, 0x023D	; 0x80023d <x_delay_status>
 b4a:	ef e5       	ldi	r30, 0x5F	; 95
 b4c:	fa e0       	ldi	r31, 0x0A	; 10
 b4e:	4f e6       	ldi	r20, 0x6F	; 111
 b50:	5a e0       	ldi	r21, 0x0A	; 10
 b52:	21 e0       	ldi	r18, 0x01	; 1
 b54:	80 81       	ld	r24, Z
 b56:	91 81       	ldd	r25, Z+1	; 0x01
 b58:	01 97       	sbiw	r24, 0x01	; 1
 b5a:	81 93       	st	Z+, r24
 b5c:	91 93       	st	Z+, r25
 b5e:	89 2b       	or	r24, r25
 b60:	19 f4       	brne	.+6      	; 0xb68 <__vector_21+0x6a>
 b62:	82 2f       	mov	r24, r18
 b64:	80 95       	com	r24
 b66:	38 23       	and	r19, r24
 b68:	22 0f       	add	r18, r18
 b6a:	e4 17       	cp	r30, r20
 b6c:	f5 07       	cpc	r31, r21
 b6e:	91 f7       	brne	.-28     	; 0xb54 <__vector_21+0x56>
 b70:	30 93 3d 02 	sts	0x023D, r19	; 0x80023d <x_delay_status>
 b74:	ff 91       	pop	r31
 b76:	ef 91       	pop	r30
 b78:	bf 91       	pop	r27
 b7a:	af 91       	pop	r26
 b7c:	9f 91       	pop	r25
 b7e:	8f 91       	pop	r24
 b80:	5f 91       	pop	r21
 b82:	4f 91       	pop	r20
 b84:	3f 91       	pop	r19
 b86:	2f 91       	pop	r18
 b88:	0f 90       	pop	r0
 b8a:	0b be       	out	0x3b, r0	; 59
 b8c:	0f 90       	pop	r0
 b8e:	0f be       	out	0x3f, r0	; 63
 b90:	0f 90       	pop	r0
 b92:	1f 90       	pop	r1
 b94:	18 95       	reti

00000b96 <x_stack_overflow>:
 b96:	ac 01       	movw	r20, r24
 b98:	27 9a       	sbi	0x04, 7	; 4
 b9a:	2f 98       	cbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b9c:	2f ef       	ldi	r18, 0xFF	; 255
 b9e:	61 ee       	ldi	r22, 0xE1	; 225
 ba0:	84 e0       	ldi	r24, 0x04	; 4
 ba2:	21 50       	subi	r18, 0x01	; 1
 ba4:	60 40       	sbci	r22, 0x00	; 0
 ba6:	80 40       	sbci	r24, 0x00	; 0
 ba8:	e1 f7       	brne	.-8      	; 0xba2 <x_stack_overflow+0xc>
 baa:	00 c0       	rjmp	.+0      	; 0xbac <x_stack_overflow+0x16>
 bac:	00 00       	nop
 bae:	55 23       	and	r21, r21
 bb0:	fc f0       	brlt	.+62     	; 0xbf0 <x_stack_overflow+0x5a>
 bb2:	20 e0       	ldi	r18, 0x00	; 0
 bb4:	30 e0       	ldi	r19, 0x00	; 0
 bb6:	95 b1       	in	r25, 0x05	; 5
 bb8:	90 58       	subi	r25, 0x80	; 128
 bba:	95 b9       	out	0x05, r25	; 5
 bbc:	9f ef       	ldi	r25, 0xFF	; 255
 bbe:	60 e7       	ldi	r22, 0x70	; 112
 bc0:	82 e0       	ldi	r24, 0x02	; 2
 bc2:	91 50       	subi	r25, 0x01	; 1
 bc4:	60 40       	sbci	r22, 0x00	; 0
 bc6:	80 40       	sbci	r24, 0x00	; 0
 bc8:	e1 f7       	brne	.-8      	; 0xbc2 <x_stack_overflow+0x2c>
 bca:	00 c0       	rjmp	.+0      	; 0xbcc <x_stack_overflow+0x36>
 bcc:	00 00       	nop
 bce:	95 b1       	in	r25, 0x05	; 5
 bd0:	90 58       	subi	r25, 0x80	; 128
 bd2:	95 b9       	out	0x05, r25	; 5
 bd4:	9f ef       	ldi	r25, 0xFF	; 255
 bd6:	69 e6       	ldi	r22, 0x69	; 105
 bd8:	88 e1       	ldi	r24, 0x18	; 24
 bda:	91 50       	subi	r25, 0x01	; 1
 bdc:	60 40       	sbci	r22, 0x00	; 0
 bde:	80 40       	sbci	r24, 0x00	; 0
 be0:	e1 f7       	brne	.-8      	; 0xbda <x_stack_overflow+0x44>
 be2:	00 c0       	rjmp	.+0      	; 0xbe4 <x_stack_overflow+0x4e>
 be4:	00 00       	nop
 be6:	2f 5f       	subi	r18, 0xFF	; 255
 be8:	3f 4f       	sbci	r19, 0xFF	; 255
 bea:	42 17       	cp	r20, r18
 bec:	53 07       	cpc	r21, r19
 bee:	1c f7       	brge	.-58     	; 0xbb6 <x_stack_overflow+0x20>
 bf0:	9f ef       	ldi	r25, 0xFF	; 255
 bf2:	23 e2       	ldi	r18, 0x23	; 35
 bf4:	64 ef       	ldi	r22, 0xF4	; 244
 bf6:	91 50       	subi	r25, 0x01	; 1
 bf8:	20 40       	sbci	r18, 0x00	; 0
 bfa:	60 40       	sbci	r22, 0x00	; 0
 bfc:	e1 f7       	brne	.-8      	; 0xbf6 <x_stack_overflow+0x60>
 bfe:	00 c0       	rjmp	.+0      	; 0xc00 <x_stack_overflow+0x6a>
 c00:	00 00       	nop
 c02:	d5 cf       	rjmp	.-86     	; 0xbae <x_stack_overflow+0x18>

00000c04 <__divmodhi4>:
 c04:	97 fb       	bst	r25, 7
 c06:	07 2e       	mov	r0, r23
 c08:	16 f4       	brtc	.+4      	; 0xc0e <__divmodhi4+0xa>
 c0a:	00 94       	com	r0
 c0c:	06 d0       	rcall	.+12     	; 0xc1a <__divmodhi4_neg1>
 c0e:	77 fd       	sbrc	r23, 7
 c10:	08 d0       	rcall	.+16     	; 0xc22 <__divmodhi4_neg2>
 c12:	0b d0       	rcall	.+22     	; 0xc2a <__udivmodhi4>
 c14:	07 fc       	sbrc	r0, 7
 c16:	05 d0       	rcall	.+10     	; 0xc22 <__divmodhi4_neg2>
 c18:	3e f4       	brtc	.+14     	; 0xc28 <__divmodhi4_exit>

00000c1a <__divmodhi4_neg1>:
 c1a:	90 95       	com	r25
 c1c:	81 95       	neg	r24
 c1e:	9f 4f       	sbci	r25, 0xFF	; 255
 c20:	08 95       	ret

00000c22 <__divmodhi4_neg2>:
 c22:	70 95       	com	r23
 c24:	61 95       	neg	r22
 c26:	7f 4f       	sbci	r23, 0xFF	; 255

00000c28 <__divmodhi4_exit>:
 c28:	08 95       	ret

00000c2a <__udivmodhi4>:
 c2a:	aa 1b       	sub	r26, r26
 c2c:	bb 1b       	sub	r27, r27
 c2e:	51 e1       	ldi	r21, 0x11	; 17
 c30:	07 c0       	rjmp	.+14     	; 0xc40 <__udivmodhi4_ep>

00000c32 <__udivmodhi4_loop>:
 c32:	aa 1f       	adc	r26, r26
 c34:	bb 1f       	adc	r27, r27
 c36:	a6 17       	cp	r26, r22
 c38:	b7 07       	cpc	r27, r23
 c3a:	10 f0       	brcs	.+4      	; 0xc40 <__udivmodhi4_ep>
 c3c:	a6 1b       	sub	r26, r22
 c3e:	b7 0b       	sbc	r27, r23

00000c40 <__udivmodhi4_ep>:
 c40:	88 1f       	adc	r24, r24
 c42:	99 1f       	adc	r25, r25
 c44:	5a 95       	dec	r21
 c46:	a9 f7       	brne	.-22     	; 0xc32 <__udivmodhi4_loop>
 c48:	80 95       	com	r24
 c4a:	90 95       	com	r25
 c4c:	bc 01       	movw	r22, r24
 c4e:	cd 01       	movw	r24, r26
 c50:	08 95       	ret

00000c52 <_exit>:
 c52:	f8 94       	cli

00000c54 <__stop_program>:
 c54:	ff cf       	rjmp	.-2      	; 0xc54 <__stop_program>
