
Rover-bot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  0000094c  000009e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000094c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800202  00800202  000009e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015ed  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f94  00000000  00000000  00002131  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b3d  00000000  00000000  000030c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  00003c04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ac  00000000  00000000  00003e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b0e  00000000  00000000  000045d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000050de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	2e c1       	rjmp	.+604    	; 0x286 <__vector_10>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	12 c1       	rjmp	.+548    	; 0x25a <__vector_13>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e4       	ldi	r30, 0x4C	; 76
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 32       	cpi	r26, 0x26	; 38
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	32 d2       	rcall	.+1124   	; 0x584 <main>
 120:	13 c4       	rjmp	.+2086   	; 0x948 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <PSerial_read>:
}

int PSerial_read(unsigned char port){
    int data = -1;

    switch (port) {
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	71 f0       	breq	.+28     	; 0x144 <PSerial_read+0x20>
 128:	28 f0       	brcs	.+10     	; 0x134 <PSerial_read+0x10>
 12a:	82 30       	cpi	r24, 0x02	; 2
 12c:	99 f0       	breq	.+38     	; 0x154 <PSerial_read+0x30>
 12e:	83 30       	cpi	r24, 0x03	; 3
 130:	c9 f0       	breq	.+50     	; 0x164 <PSerial_read+0x40>
 132:	20 c0       	rjmp	.+64     	; 0x174 <PSerial_read+0x50>
        case 0: 
           if (UCSR0A & (1<<RXC0))
 134:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 138:	88 23       	and	r24, r24
 13a:	fc f4       	brge	.+62     	; 0x17a <PSerial_read+0x56>
                data = UDR0;
 13c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	08 95       	ret
           break;
        case 1:
            if (UCSR1A & (1<<RXC1))
 144:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 148:	88 23       	and	r24, r24
 14a:	d4 f4       	brge	.+52     	; 0x180 <PSerial_read+0x5c>
                data = UDR1;
 14c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	08 95       	ret
            break;
        case 2:
            if (UCSR2A & (1<<RXC2))
 154:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
 158:	88 23       	and	r24, r24
 15a:	ac f4       	brge	.+42     	; 0x186 <PSerial_read+0x62>
                data = UDR2;
 15c:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	08 95       	ret
            break;
        case 3:
             if (UCSR3A & (1<<RXC3))
 164:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
 168:	88 23       	and	r24, r24
 16a:	84 f4       	brge	.+32     	; 0x18c <PSerial_read+0x68>
                data = UDR3;
 16c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	08 95       	ret
	if (speed == 250000l) return 3l;
	return 103l;
}

int PSerial_read(unsigned char port){
    int data = -1;
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	9f ef       	ldi	r25, 0xFF	; 255
 178:	08 95       	ret
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	9f ef       	ldi	r25, 0xFF	; 255
 17e:	08 95       	ret
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	9f ef       	ldi	r25, 0xFF	; 255
 184:	08 95       	ret
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	9f ef       	ldi	r25, 0xFF	; 255
 18a:	08 95       	ret
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	9f ef       	ldi	r25, 0xFF	; 255
            break;
        default :
            break;
    }
    return data;
}
 190:	08 95       	ret

00000192 <PSerial_open>:


#include "PSerial.h"

void PSerial_open(unsigned char port, long speed, int config){
    switch (port) {
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	91 f0       	breq	.+36     	; 0x1ba <PSerial_open+0x28>
 196:	28 f0       	brcs	.+10     	; 0x1a2 <PSerial_open+0x10>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	d9 f0       	breq	.+54     	; 0x1d2 <PSerial_open+0x40>
 19c:	83 30       	cpi	r24, 0x03	; 3
 19e:	29 f1       	breq	.+74     	; 0x1ea <PSerial_open+0x58>
 1a0:	2f c0       	rjmp	.+94     	; 0x200 <PSerial_open+0x6e>
        case 0: 
			UCSR0B |= 0x18;
 1a2:	e1 ec       	ldi	r30, 0xC1	; 193
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	90 81       	ld	r25, Z
 1a8:	98 61       	ori	r25, 0x18	; 24
 1aa:	90 83       	st	Z, r25
            UCSR0C = config;
 1ac:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
			UBRR0 = speed;
 1b0:	50 93 c5 00 	sts	0x00C5, r21	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 1b4:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
            break;
 1b8:	23 c0       	rjmp	.+70     	; 0x200 <PSerial_open+0x6e>
        case 1:
            UCSR1C = config;
 1ba:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
			UCSR1B |= 0x18;
 1be:	e9 ec       	ldi	r30, 0xC9	; 201
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	90 81       	ld	r25, Z
 1c4:	98 61       	ori	r25, 0x18	; 24
 1c6:	90 83       	st	Z, r25
            UBRR1 = speed;
 1c8:	50 93 cd 00 	sts	0x00CD, r21	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
 1cc:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
            break;
 1d0:	17 c0       	rjmp	.+46     	; 0x200 <PSerial_open+0x6e>
        case 2:
            UCSR2C = config;
 1d2:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
			UCSR2B |= 0x18;
 1d6:	e1 ed       	ldi	r30, 0xD1	; 209
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	90 81       	ld	r25, Z
 1dc:	98 61       	ori	r25, 0x18	; 24
 1de:	90 83       	st	Z, r25
            UBRR2 = speed;
 1e0:	50 93 d5 00 	sts	0x00D5, r21	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
 1e4:	40 93 d4 00 	sts	0x00D4, r20	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
            break;
 1e8:	0b c0       	rjmp	.+22     	; 0x200 <PSerial_open+0x6e>
        case 3:
            UCSR3C = config;
 1ea:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
			UCSR3B |= 0x18;
 1ee:	e1 e3       	ldi	r30, 0x31	; 49
 1f0:	f1 e0       	ldi	r31, 0x01	; 1
 1f2:	90 81       	ld	r25, Z
 1f4:	98 61       	ori	r25, 0x18	; 24
 1f6:	90 83       	st	Z, r25
            UBRR3 = speed;
 1f8:	50 93 35 01 	sts	0x0135, r21	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
 1fc:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
            break;
        default:
            break;
    }
	PSerial_read(port);
 200:	91 cf       	rjmp	.-222    	; 0x124 <PSerial_read>
 202:	08 95       	ret

00000204 <getTime>:
int timerInitialized(void) {
	return initialized;
}

unsigned long getTime(void) {
	return timeCounter;
 204:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <timeCounter>
 208:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <timeCounter+0x1>
 20c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <timeCounter+0x2>
 210:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <timeCounter+0x3>
}
 214:	08 95       	ret

00000216 <setTime>:

void setTime() {
	initialized = 1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 21e:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
	timeCounter = 0;
 222:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <timeCounter>
 226:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <timeCounter+0x1>
 22a:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <timeCounter+0x2>
 22e:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <timeCounter+0x3>
	TCCR2A |= (1 << COM2A1);
 232:	e0 eb       	ldi	r30, 0xB0	; 176
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	80 68       	ori	r24, 0x80	; 128
 23a:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS20) | (1 << CS22) | (1 << WGM22);
 23c:	e1 eb       	ldi	r30, 0xB1	; 177
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	8d 60       	ori	r24, 0x0D	; 13
 244:	80 83       	st	Z, r24
	TIMSK2 |= (1 << OCIE2A);
 246:	e0 e7       	ldi	r30, 0x70	; 112
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	82 60       	ori	r24, 0x02	; 2
 24e:	80 83       	st	Z, r24
	
	OCR2A = tickTime;
 250:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 254:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
 258:	08 95       	ret

0000025a <__vector_13>:
}

ISR(TIMER2_COMPA_vect, ISR_NAKED) {
	timeCounter++;
 25a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <timeCounter>
 25e:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <timeCounter+0x1>
 262:	a0 91 10 02 	lds	r26, 0x0210	; 0x800210 <timeCounter+0x2>
 266:	b0 91 11 02 	lds	r27, 0x0211	; 0x800211 <timeCounter+0x3>
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	a1 1d       	adc	r26, r1
 26e:	b1 1d       	adc	r27, r1
 270:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <timeCounter>
 274:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <timeCounter+0x1>
 278:	a0 93 10 02 	sts	0x0210, r26	; 0x800210 <timeCounter+0x2>
 27c:	b0 93 11 02 	sts	0x0211, r27	; 0x800211 <timeCounter+0x3>
	/*if (timeCounter % 1000 == 0)*/ PORTB ^= 0x80;
 280:	85 b1       	in	r24, 0x05	; 5
 282:	80 58       	subi	r24, 0x80	; 128
 284:	85 b9       	out	0x05, r24	; 5

00000286 <__vector_10>:
	} else if (wheelNumber == R_WHEEL && direction == FORWARD) {
		PORTC &= 0xFC;
		PORTC |=  R_FORWARD;
	} else if (wheelNumber == R_WHEEL && direction == BACKWARD) {
		PORTC &= 0xFC;
		PORTC |=  R_BACKWARD;
 286:	1f 92       	push	r1
 288:	0f 92       	push	r0
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	0f 92       	push	r0
 28e:	11 24       	eor	r1, r1
 290:	0b b6       	in	r0, 0x3b	; 59
 292:	0f 92       	push	r0
 294:	cf 92       	push	r12
 296:	df 92       	push	r13
 298:	ef 92       	push	r14
 29a:	ff 92       	push	r15
 29c:	0f 93       	push	r16
 29e:	1f 93       	push	r17
 2a0:	2f 93       	push	r18
 2a2:	3f 93       	push	r19
 2a4:	4f 93       	push	r20
 2a6:	5f 93       	push	r21
 2a8:	6f 93       	push	r22
 2aa:	7f 93       	push	r23
 2ac:	8f 93       	push	r24
 2ae:	9f 93       	push	r25
 2b0:	af 93       	push	r26
 2b2:	bf 93       	push	r27
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	ef 93       	push	r30
 2ba:	ff 93       	push	r31
 2bc:	e3 e0       	ldi	r30, 0x03	; 3
 2be:	f1 e0       	ldi	r31, 0x01	; 1
 2c0:	00 81       	ld	r16, Z
 2c2:	02 60       	ori	r16, 0x02	; 2
 2c4:	10 e0       	ldi	r17, 0x00	; 0
 2c6:	c0 81       	ld	r28, Z
 2c8:	c1 60       	ori	r28, 0x01	; 1
 2ca:	d0 e0       	ldi	r29, 0x00	; 0
 2cc:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <RwasOn>
 2d0:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <RwasOn+0x1>
 2d4:	89 2b       	or	r24, r25
 2d6:	99 f4       	brne	.+38     	; 0x2fe <__vector_10+0x78>
 2d8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <rightcount>
 2dc:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <rightcount+0x1>
 2e0:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <rightcount+0x2>
 2e4:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <rightcount+0x3>
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	a1 1d       	adc	r26, r1
 2ec:	b1 1d       	adc	r27, r1
 2ee:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <rightcount>
 2f2:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <rightcount+0x1>
 2f6:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <rightcount+0x2>
 2fa:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <rightcount+0x3>
 2fe:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <LwasOn>
 302:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <LwasOn+0x1>
 306:	89 2b       	or	r24, r25
 308:	09 f0       	breq	.+2      	; 0x30c <__vector_10+0x86>
 30a:	8c c0       	rjmp	.+280    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 30c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <leftCount>
 310:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <leftCount+0x1>
 314:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <leftCount+0x2>
 318:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <leftCount+0x3>
 31c:	01 96       	adiw	r24, 0x01	; 1
 31e:	a1 1d       	adc	r26, r1
 320:	b1 1d       	adc	r27, r1
 322:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <leftCount>
 326:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <leftCount+0x1>
 32a:	a0 93 0a 02 	sts	0x020A, r26	; 0x80020a <leftCount+0x2>
 32e:	b0 93 0b 02 	sts	0x020B, r27	; 0x80020b <leftCount+0x3>
 332:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <rightcount>
 336:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <rightcount+0x1>
 33a:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <rightcount+0x2>
 33e:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <rightcount+0x3>
 342:	84 17       	cp	r24, r20
 344:	95 07       	cpc	r25, r21
 346:	a6 07       	cpc	r26, r22
 348:	b7 07       	cpc	r27, r23
 34a:	a4 f5       	brge	.+104    	; 0x3b4 <__vector_10+0x12e>
 34c:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <l_ds>
 350:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <l_ds+0x1>
 354:	07 2e       	mov	r0, r23
 356:	00 0c       	add	r0, r0
 358:	88 0b       	sbc	r24, r24
 35a:	99 0b       	sbc	r25, r25
 35c:	e2 d1       	rcall	.+964    	; 0x722 <__floatsisf>
 35e:	2d ec       	ldi	r18, 0xCD	; 205
 360:	3c ec       	ldi	r19, 0xCC	; 204
 362:	4c ec       	ldi	r20, 0xCC	; 204
 364:	5d e3       	ldi	r21, 0x3D	; 61
 366:	42 d1       	rcall	.+644    	; 0x5ec <__addsf3>
 368:	a9 d1       	rcall	.+850    	; 0x6bc <__fixsfsi>
 36a:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <l_ds+0x1>
 36e:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <l_ds>
 372:	07 2e       	mov	r0, r23
 374:	00 0c       	add	r0, r0
 376:	88 0b       	sbc	r24, r24
 378:	99 0b       	sbc	r25, r25
 37a:	d3 d1       	rcall	.+934    	; 0x722 <__floatsisf>
 37c:	6b 01       	movw	r12, r22
 37e:	7c 01       	movw	r14, r24
 380:	20 e0       	ldi	r18, 0x00	; 0
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	a9 01       	movw	r20, r18
 386:	96 d1       	rcall	.+812    	; 0x6b4 <__cmpsf2>
 388:	81 11       	cpse	r24, r1
 38a:	05 c0       	rjmp	.+10     	; 0x396 <__vector_10+0x110>
 38c:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 390:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 394:	47 c0       	rjmp	.+142    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	48 ec       	ldi	r20, 0xC8	; 200
 39c:	53 e4       	ldi	r21, 0x43	; 67
 39e:	c7 01       	movw	r24, r14
 3a0:	b6 01       	movw	r22, r12
 3a2:	6f d2       	rcall	.+1246   	; 0x882 <__mulsf3>
 3a4:	8b d1       	rcall	.+790    	; 0x6bc <__fixsfsi>
 3a6:	60 57       	subi	r22, 0x70	; 112
 3a8:	7e 4f       	sbci	r23, 0xFE	; 254
 3aa:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 3ae:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 3b2:	38 c0       	rjmp	.+112    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3b4:	48 17       	cp	r20, r24
 3b6:	59 07       	cpc	r21, r25
 3b8:	6a 07       	cpc	r22, r26
 3ba:	7b 07       	cpc	r23, r27
 3bc:	9c f5       	brge	.+102    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3be:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <l_ds>
 3c2:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <l_ds+0x1>
 3c6:	07 2e       	mov	r0, r23
 3c8:	00 0c       	add	r0, r0
 3ca:	88 0b       	sbc	r24, r24
 3cc:	99 0b       	sbc	r25, r25
 3ce:	a9 d1       	rcall	.+850    	; 0x722 <__floatsisf>
 3d0:	2d ec       	ldi	r18, 0xCD	; 205
 3d2:	3c ec       	ldi	r19, 0xCC	; 204
 3d4:	4c ec       	ldi	r20, 0xCC	; 204
 3d6:	5d e3       	ldi	r21, 0x3D	; 61
 3d8:	08 d1       	rcall	.+528    	; 0x5ea <__subsf3>
 3da:	70 d1       	rcall	.+736    	; 0x6bc <__fixsfsi>
 3dc:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <l_ds+0x1>
 3e0:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <l_ds>
 3e4:	07 2e       	mov	r0, r23
 3e6:	00 0c       	add	r0, r0
 3e8:	88 0b       	sbc	r24, r24
 3ea:	99 0b       	sbc	r25, r25
 3ec:	9a d1       	rcall	.+820    	; 0x722 <__floatsisf>
 3ee:	6b 01       	movw	r12, r22
 3f0:	7c 01       	movw	r14, r24
 3f2:	20 e0       	ldi	r18, 0x00	; 0
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	a9 01       	movw	r20, r18
 3f8:	5d d1       	rcall	.+698    	; 0x6b4 <__cmpsf2>
 3fa:	81 11       	cpse	r24, r1
 3fc:	05 c0       	rjmp	.+10     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3fe:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 402:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 406:	0e c0       	rjmp	.+28     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 408:	20 e0       	ldi	r18, 0x00	; 0
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	48 ec       	ldi	r20, 0xC8	; 200
 40e:	53 e4       	ldi	r21, 0x43	; 67
 410:	c7 01       	movw	r24, r14
 412:	b6 01       	movw	r22, r12
 414:	36 d2       	rcall	.+1132   	; 0x882 <__mulsf3>
 416:	52 d1       	rcall	.+676    	; 0x6bc <__fixsfsi>
 418:	60 57       	subi	r22, 0x70	; 112
 41a:	7e 4f       	sbci	r23, 0xFE	; 254
 41c:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 420:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 424:	10 93 13 02 	sts	0x0213, r17	; 0x800213 <RwasOn+0x1>
 428:	00 93 12 02 	sts	0x0212, r16	; 0x800212 <RwasOn>
 42c:	d0 93 21 02 	sts	0x0221, r29	; 0x800221 <LwasOn+0x1>
 430:	c0 93 20 02 	sts	0x0220, r28	; 0x800220 <LwasOn>
 434:	ff 91       	pop	r31
 436:	ef 91       	pop	r30
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	bf 91       	pop	r27
 43e:	af 91       	pop	r26
 440:	9f 91       	pop	r25
 442:	8f 91       	pop	r24
 444:	7f 91       	pop	r23
 446:	6f 91       	pop	r22
 448:	5f 91       	pop	r21
 44a:	4f 91       	pop	r20
 44c:	3f 91       	pop	r19
 44e:	2f 91       	pop	r18
 450:	1f 91       	pop	r17
 452:	0f 91       	pop	r16
 454:	ff 90       	pop	r15
 456:	ef 90       	pop	r14
 458:	df 90       	pop	r13
 45a:	cf 90       	pop	r12
 45c:	0f 90       	pop	r0
 45e:	0b be       	out	0x3b, r0	; 59
 460:	0f 90       	pop	r0
 462:	0f be       	out	0x3f, r0	; 63
 464:	0f 90       	pop	r0
 466:	1f 90       	pop	r1
 468:	18 95       	reti

0000046a <initWheels>:
 46a:	87 b1       	in	r24, 0x07	; 7
 46c:	8f 60       	ori	r24, 0x0F	; 15
 46e:	87 b9       	out	0x07, r24	; 7
 470:	ea e0       	ldi	r30, 0x0A	; 10
 472:	f1 e0       	ldi	r31, 0x01	; 1
 474:	80 81       	ld	r24, Z
 476:	88 61       	ori	r24, 0x18	; 24
 478:	80 83       	st	Z, r24
 47a:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <timer>
 47e:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <timer+0x1>
 482:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <timer+0x2>
 486:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <timer+0x3>
 48a:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <timer+0x4>
 48e:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <timer+0x5>
 492:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <timer+0x6>
 496:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <timer+0x7>
 49a:	88 ee       	ldi	r24, 0xE8	; 232
 49c:	93 e0       	ldi	r25, 0x03	; 3
 49e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
 4a2:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 4a6:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 4aa:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 4ae:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 4b2:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 4b6:	e0 e2       	ldi	r30, 0x20	; 32
 4b8:	f1 e0       	ldi	r31, 0x01	; 1
 4ba:	80 81       	ld	r24, Z
 4bc:	80 6a       	ori	r24, 0xA0	; 160
 4be:	80 83       	st	Z, r24
 4c0:	e1 e2       	ldi	r30, 0x21	; 33
 4c2:	f1 e0       	ldi	r31, 0x01	; 1
 4c4:	80 81       	ld	r24, Z
 4c6:	82 61       	ori	r24, 0x12	; 18
 4c8:	80 83       	st	Z, r24
 4ca:	43 9a       	sbi	0x08, 3	; 8
 4cc:	40 9a       	sbi	0x08, 0	; 8
 4ce:	e5 e0       	ldi	r30, 0x05	; 5
 4d0:	f1 e0       	ldi	r31, 0x01	; 1
 4d2:	80 81       	ld	r24, Z
 4d4:	8c 7f       	andi	r24, 0xFC	; 252
 4d6:	80 83       	st	Z, r24
 4d8:	ec e6       	ldi	r30, 0x6C	; 108
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
 4de:	82 60       	ori	r24, 0x02	; 2
 4e0:	80 83       	st	Z, r24
 4e2:	80 81       	ld	r24, Z
 4e4:	84 60       	ori	r24, 0x04	; 4
 4e6:	80 83       	st	Z, r24
 4e8:	e8 e6       	ldi	r30, 0x68	; 104
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 81       	ld	r24, Z
 4ee:	82 60       	ori	r24, 0x02	; 2
 4f0:	80 83       	st	Z, r24
 4f2:	08 95       	ret

000004f4 <setDutyCycle>:
	}

}

// setDutyCycle accepts a dutycycle (number between 0.0 and 1.0) and the wheel (L_WHEEL or R_WHEEL)
void setDutyCycle(float dutycycle, int wheel) {
 4f4:	cf 92       	push	r12
 4f6:	df 92       	push	r13
 4f8:	ef 92       	push	r14
 4fa:	ff 92       	push	r15
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	6b 01       	movw	r12, r22
 502:	7c 01       	movw	r14, r24
 504:	ea 01       	movw	r28, r20
	
	if (dutycycle == 0) {
 506:	20 e0       	ldi	r18, 0x00	; 0
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	a9 01       	movw	r20, r18
 50c:	d3 d0       	rcall	.+422    	; 0x6b4 <__cmpsf2>
 50e:	81 11       	cpse	r24, r1
 510:	0f c0       	rjmp	.+30     	; 0x530 <setDutyCycle+0x3c>
		if (wheel == L_WHEEL) OCR5A = 0;
 512:	c1 30       	cpi	r28, 0x01	; 1
 514:	d1 05       	cpc	r29, r1
 516:	29 f4       	brne	.+10     	; 0x522 <setDutyCycle+0x2e>
 518:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 51c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 520:	1f c0       	rjmp	.+62     	; 0x560 <setDutyCycle+0x6c>
		else if (wheel == R_WHEEL) OCR5B = 0;
 522:	cd 2b       	or	r28, r29
 524:	e9 f4       	brne	.+58     	; 0x560 <setDutyCycle+0x6c>
 526:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 52a:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 52e:	18 c0       	rjmp	.+48     	; 0x560 <setDutyCycle+0x6c>
	} else {
		int ontime = ((int)(dutycycle * 400.0) + 400) ;
 530:	20 e0       	ldi	r18, 0x00	; 0
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	48 ec       	ldi	r20, 0xC8	; 200
 536:	53 e4       	ldi	r21, 0x43	; 67
 538:	c7 01       	movw	r24, r14
 53a:	b6 01       	movw	r22, r12
 53c:	a2 d1       	rcall	.+836    	; 0x882 <__mulsf3>
 53e:	be d0       	rcall	.+380    	; 0x6bc <__fixsfsi>
 540:	60 57       	subi	r22, 0x70	; 112
 542:	7e 4f       	sbci	r23, 0xFE	; 254
		
		if (wheel == L_WHEEL) OCR5A = ontime;
 544:	c1 30       	cpi	r28, 0x01	; 1
 546:	d1 05       	cpc	r29, r1
 548:	29 f4       	brne	.+10     	; 0x554 <setDutyCycle+0x60>
 54a:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 54e:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 552:	06 c0       	rjmp	.+12     	; 0x560 <setDutyCycle+0x6c>
		else if (wheel == R_WHEEL) OCR5B = ontime;
 554:	cd 2b       	or	r28, r29
 556:	21 f4       	brne	.+8      	; 0x560 <setDutyCycle+0x6c>
 558:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 55c:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
	}
}
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	ff 90       	pop	r15
 566:	ef 90       	pop	r14
 568:	df 90       	pop	r13
 56a:	cf 90       	pop	r12
 56c:	08 95       	ret

0000056e <init>:
#include "time.h"
#include "wheels.h"
#include "PSerial.h"

void init() {
	setTime();
 56e:	53 de       	rcall	.-858    	; 0x216 <setTime>
	PSerial_open(0, BAUD9600, SERIAL_8N1);
 570:	26 e0       	ldi	r18, 0x06	; 6
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	48 e6       	ldi	r20, 0x68	; 104
 576:	50 e0       	ldi	r21, 0x00	; 0
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	70 e0       	ldi	r23, 0x00	; 0
 57c:	80 e0       	ldi	r24, 0x00	; 0
	initWheels();
 57e:	09 de       	rcall	.-1006   	; 0x192 <PSerial_open>
 580:	74 cf       	rjmp	.-280    	; 0x46a <initWheels>
 582:	08 95       	ret

00000584 <main>:


int main(void)
{
//PORTB |= 0x80;
	PSerial_open(0, BAUD9600, SERIAL_8N1);
 584:	26 e0       	ldi	r18, 0x06	; 6
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	48 e6       	ldi	r20, 0x68	; 104
 58a:	50 e0       	ldi	r21, 0x00	; 0
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	ff dd       	rcall	.-1026   	; 0x192 <PSerial_open>
	DDRB = 0x80;
 594:	80 e8       	ldi	r24, 0x80	; 128
	init();
 596:	84 b9       	out	0x04, r24	; 4
 598:	ea df       	rcall	.-44     	; 0x56e <init>
	PORTJ &= ~(1 << PJ1);
 59a:	e5 e0       	ldi	r30, 0x05	; 5
 59c:	f1 e0       	ldi	r31, 0x01	; 1
 59e:	80 81       	ld	r24, Z
 5a0:	8d 7f       	andi	r24, 0xFD	; 253
 5a2:	80 83       	st	Z, r24
	sei();
 5a4:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5a6:	2f ef       	ldi	r18, 0xFF	; 255
 5a8:	83 ed       	ldi	r24, 0xD3	; 211
 5aa:	90 e3       	ldi	r25, 0x30	; 48
 5ac:	21 50       	subi	r18, 0x01	; 1
 5ae:	80 40       	sbci	r24, 0x00	; 0
 5b0:	90 40       	sbci	r25, 0x00	; 0
 5b2:	e1 f7       	brne	.-8      	; 0x5ac <main+0x28>
 5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <main+0x32>
 5b6:	00 00       	nop

/* Replace with your application code */
	_delay_ms(1000);
	//changeDirection(FORWARD, L_WHEEL);
	
	setDutyCycle(.6, L_WHEEL);
 5b8:	41 e0       	ldi	r20, 0x01	; 1
 5ba:	50 e0       	ldi	r21, 0x00	; 0
 5bc:	6a e9       	ldi	r22, 0x9A	; 154
 5be:	79 e9       	ldi	r23, 0x99	; 153
 5c0:	89 e1       	ldi	r24, 0x19	; 25
 5c2:	9f e3       	ldi	r25, 0x3F	; 63
 5c4:	97 df       	rcall	.-210    	; 0x4f4 <setDutyCycle>
	setDutyCycle(.6, R_WHEEL);
 5c6:	40 e0       	ldi	r20, 0x00	; 0
 5c8:	50 e0       	ldi	r21, 0x00	; 0
 5ca:	6a e9       	ldi	r22, 0x9A	; 154
 5cc:	79 e9       	ldi	r23, 0x99	; 153
 5ce:	89 e1       	ldi	r24, 0x19	; 25
 5d0:	9f e3       	ldi	r25, 0x3F	; 63
	

	
	while (1)
	{
		unsigned long t = getTime();
 5d2:	90 df       	rcall	.-224    	; 0x4f4 <setDutyCycle>
 5d4:	17 de       	rcall	.-978    	; 0x204 <getTime>
 5d6:	2f ef       	ldi	r18, 0xFF	; 255
 5d8:	81 ee       	ldi	r24, 0xE1	; 225
 5da:	94 e0       	ldi	r25, 0x04	; 4
 5dc:	21 50       	subi	r18, 0x01	; 1
 5de:	80 40       	sbci	r24, 0x00	; 0
 5e0:	90 40       	sbci	r25, 0x00	; 0
 5e2:	e1 f7       	brne	.-8      	; 0x5dc <main+0x58>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <main+0x62>
 5e6:	00 00       	nop
 5e8:	f5 cf       	rjmp	.-22     	; 0x5d4 <main+0x50>

000005ea <__subsf3>:
 5ea:	50 58       	subi	r21, 0x80	; 128

000005ec <__addsf3>:
 5ec:	bb 27       	eor	r27, r27
 5ee:	aa 27       	eor	r26, r26
 5f0:	0e d0       	rcall	.+28     	; 0x60e <__addsf3x>
 5f2:	0d c1       	rjmp	.+538    	; 0x80e <__fp_round>
 5f4:	fe d0       	rcall	.+508    	; 0x7f2 <__fp_pscA>
 5f6:	30 f0       	brcs	.+12     	; 0x604 <__addsf3+0x18>
 5f8:	03 d1       	rcall	.+518    	; 0x800 <__fp_pscB>
 5fa:	20 f0       	brcs	.+8      	; 0x604 <__addsf3+0x18>
 5fc:	31 f4       	brne	.+12     	; 0x60a <__addsf3+0x1e>
 5fe:	9f 3f       	cpi	r25, 0xFF	; 255
 600:	11 f4       	brne	.+4      	; 0x606 <__addsf3+0x1a>
 602:	1e f4       	brtc	.+6      	; 0x60a <__addsf3+0x1e>
 604:	f3 c0       	rjmp	.+486    	; 0x7ec <__fp_nan>
 606:	0e f4       	brtc	.+2      	; 0x60a <__addsf3+0x1e>
 608:	e0 95       	com	r30
 60a:	e7 fb       	bst	r30, 7
 60c:	e9 c0       	rjmp	.+466    	; 0x7e0 <__fp_inf>

0000060e <__addsf3x>:
 60e:	e9 2f       	mov	r30, r25
 610:	0f d1       	rcall	.+542    	; 0x830 <__fp_split3>
 612:	80 f3       	brcs	.-32     	; 0x5f4 <__addsf3+0x8>
 614:	ba 17       	cp	r27, r26
 616:	62 07       	cpc	r22, r18
 618:	73 07       	cpc	r23, r19
 61a:	84 07       	cpc	r24, r20
 61c:	95 07       	cpc	r25, r21
 61e:	18 f0       	brcs	.+6      	; 0x626 <__addsf3x+0x18>
 620:	71 f4       	brne	.+28     	; 0x63e <__addsf3x+0x30>
 622:	9e f5       	brtc	.+102    	; 0x68a <__addsf3x+0x7c>
 624:	27 c1       	rjmp	.+590    	; 0x874 <__fp_zero>
 626:	0e f4       	brtc	.+2      	; 0x62a <__addsf3x+0x1c>
 628:	e0 95       	com	r30
 62a:	0b 2e       	mov	r0, r27
 62c:	ba 2f       	mov	r27, r26
 62e:	a0 2d       	mov	r26, r0
 630:	0b 01       	movw	r0, r22
 632:	b9 01       	movw	r22, r18
 634:	90 01       	movw	r18, r0
 636:	0c 01       	movw	r0, r24
 638:	ca 01       	movw	r24, r20
 63a:	a0 01       	movw	r20, r0
 63c:	11 24       	eor	r1, r1
 63e:	ff 27       	eor	r31, r31
 640:	59 1b       	sub	r21, r25
 642:	99 f0       	breq	.+38     	; 0x66a <__addsf3x+0x5c>
 644:	59 3f       	cpi	r21, 0xF9	; 249
 646:	50 f4       	brcc	.+20     	; 0x65c <__addsf3x+0x4e>
 648:	50 3e       	cpi	r21, 0xE0	; 224
 64a:	68 f1       	brcs	.+90     	; 0x6a6 <__addsf3x+0x98>
 64c:	1a 16       	cp	r1, r26
 64e:	f0 40       	sbci	r31, 0x00	; 0
 650:	a2 2f       	mov	r26, r18
 652:	23 2f       	mov	r18, r19
 654:	34 2f       	mov	r19, r20
 656:	44 27       	eor	r20, r20
 658:	58 5f       	subi	r21, 0xF8	; 248
 65a:	f3 cf       	rjmp	.-26     	; 0x642 <__addsf3x+0x34>
 65c:	46 95       	lsr	r20
 65e:	37 95       	ror	r19
 660:	27 95       	ror	r18
 662:	a7 95       	ror	r26
 664:	f0 40       	sbci	r31, 0x00	; 0
 666:	53 95       	inc	r21
 668:	c9 f7       	brne	.-14     	; 0x65c <__addsf3x+0x4e>
 66a:	7e f4       	brtc	.+30     	; 0x68a <__addsf3x+0x7c>
 66c:	1f 16       	cp	r1, r31
 66e:	ba 0b       	sbc	r27, r26
 670:	62 0b       	sbc	r22, r18
 672:	73 0b       	sbc	r23, r19
 674:	84 0b       	sbc	r24, r20
 676:	ba f0       	brmi	.+46     	; 0x6a6 <__addsf3x+0x98>
 678:	91 50       	subi	r25, 0x01	; 1
 67a:	a1 f0       	breq	.+40     	; 0x6a4 <__addsf3x+0x96>
 67c:	ff 0f       	add	r31, r31
 67e:	bb 1f       	adc	r27, r27
 680:	66 1f       	adc	r22, r22
 682:	77 1f       	adc	r23, r23
 684:	88 1f       	adc	r24, r24
 686:	c2 f7       	brpl	.-16     	; 0x678 <__addsf3x+0x6a>
 688:	0e c0       	rjmp	.+28     	; 0x6a6 <__addsf3x+0x98>
 68a:	ba 0f       	add	r27, r26
 68c:	62 1f       	adc	r22, r18
 68e:	73 1f       	adc	r23, r19
 690:	84 1f       	adc	r24, r20
 692:	48 f4       	brcc	.+18     	; 0x6a6 <__addsf3x+0x98>
 694:	87 95       	ror	r24
 696:	77 95       	ror	r23
 698:	67 95       	ror	r22
 69a:	b7 95       	ror	r27
 69c:	f7 95       	ror	r31
 69e:	9e 3f       	cpi	r25, 0xFE	; 254
 6a0:	08 f0       	brcs	.+2      	; 0x6a4 <__addsf3x+0x96>
 6a2:	b3 cf       	rjmp	.-154    	; 0x60a <__addsf3+0x1e>
 6a4:	93 95       	inc	r25
 6a6:	88 0f       	add	r24, r24
 6a8:	08 f0       	brcs	.+2      	; 0x6ac <__addsf3x+0x9e>
 6aa:	99 27       	eor	r25, r25
 6ac:	ee 0f       	add	r30, r30
 6ae:	97 95       	ror	r25
 6b0:	87 95       	ror	r24
 6b2:	08 95       	ret

000006b4 <__cmpsf2>:
 6b4:	71 d0       	rcall	.+226    	; 0x798 <__fp_cmp>
 6b6:	08 f4       	brcc	.+2      	; 0x6ba <__cmpsf2+0x6>
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	08 95       	ret

000006bc <__fixsfsi>:
 6bc:	04 d0       	rcall	.+8      	; 0x6c6 <__fixunssfsi>
 6be:	68 94       	set
 6c0:	b1 11       	cpse	r27, r1
 6c2:	d9 c0       	rjmp	.+434    	; 0x876 <__fp_szero>
 6c4:	08 95       	ret

000006c6 <__fixunssfsi>:
 6c6:	bc d0       	rcall	.+376    	; 0x840 <__fp_splitA>
 6c8:	88 f0       	brcs	.+34     	; 0x6ec <__fixunssfsi+0x26>
 6ca:	9f 57       	subi	r25, 0x7F	; 127
 6cc:	90 f0       	brcs	.+36     	; 0x6f2 <__fixunssfsi+0x2c>
 6ce:	b9 2f       	mov	r27, r25
 6d0:	99 27       	eor	r25, r25
 6d2:	b7 51       	subi	r27, 0x17	; 23
 6d4:	a0 f0       	brcs	.+40     	; 0x6fe <__fixunssfsi+0x38>
 6d6:	d1 f0       	breq	.+52     	; 0x70c <__fixunssfsi+0x46>
 6d8:	66 0f       	add	r22, r22
 6da:	77 1f       	adc	r23, r23
 6dc:	88 1f       	adc	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	1a f0       	brmi	.+6      	; 0x6e8 <__fixunssfsi+0x22>
 6e2:	ba 95       	dec	r27
 6e4:	c9 f7       	brne	.-14     	; 0x6d8 <__fixunssfsi+0x12>
 6e6:	12 c0       	rjmp	.+36     	; 0x70c <__fixunssfsi+0x46>
 6e8:	b1 30       	cpi	r27, 0x01	; 1
 6ea:	81 f0       	breq	.+32     	; 0x70c <__fixunssfsi+0x46>
 6ec:	c3 d0       	rcall	.+390    	; 0x874 <__fp_zero>
 6ee:	b1 e0       	ldi	r27, 0x01	; 1
 6f0:	08 95       	ret
 6f2:	c0 c0       	rjmp	.+384    	; 0x874 <__fp_zero>
 6f4:	67 2f       	mov	r22, r23
 6f6:	78 2f       	mov	r23, r24
 6f8:	88 27       	eor	r24, r24
 6fa:	b8 5f       	subi	r27, 0xF8	; 248
 6fc:	39 f0       	breq	.+14     	; 0x70c <__fixunssfsi+0x46>
 6fe:	b9 3f       	cpi	r27, 0xF9	; 249
 700:	cc f3       	brlt	.-14     	; 0x6f4 <__fixunssfsi+0x2e>
 702:	86 95       	lsr	r24
 704:	77 95       	ror	r23
 706:	67 95       	ror	r22
 708:	b3 95       	inc	r27
 70a:	d9 f7       	brne	.-10     	; 0x702 <__fixunssfsi+0x3c>
 70c:	3e f4       	brtc	.+14     	; 0x71c <__fixunssfsi+0x56>
 70e:	90 95       	com	r25
 710:	80 95       	com	r24
 712:	70 95       	com	r23
 714:	61 95       	neg	r22
 716:	7f 4f       	sbci	r23, 0xFF	; 255
 718:	8f 4f       	sbci	r24, 0xFF	; 255
 71a:	9f 4f       	sbci	r25, 0xFF	; 255
 71c:	08 95       	ret

0000071e <__floatunsisf>:
 71e:	e8 94       	clt
 720:	09 c0       	rjmp	.+18     	; 0x734 <__floatsisf+0x12>

00000722 <__floatsisf>:
 722:	97 fb       	bst	r25, 7
 724:	3e f4       	brtc	.+14     	; 0x734 <__floatsisf+0x12>
 726:	90 95       	com	r25
 728:	80 95       	com	r24
 72a:	70 95       	com	r23
 72c:	61 95       	neg	r22
 72e:	7f 4f       	sbci	r23, 0xFF	; 255
 730:	8f 4f       	sbci	r24, 0xFF	; 255
 732:	9f 4f       	sbci	r25, 0xFF	; 255
 734:	99 23       	and	r25, r25
 736:	a9 f0       	breq	.+42     	; 0x762 <__floatsisf+0x40>
 738:	f9 2f       	mov	r31, r25
 73a:	96 e9       	ldi	r25, 0x96	; 150
 73c:	bb 27       	eor	r27, r27
 73e:	93 95       	inc	r25
 740:	f6 95       	lsr	r31
 742:	87 95       	ror	r24
 744:	77 95       	ror	r23
 746:	67 95       	ror	r22
 748:	b7 95       	ror	r27
 74a:	f1 11       	cpse	r31, r1
 74c:	f8 cf       	rjmp	.-16     	; 0x73e <__floatsisf+0x1c>
 74e:	fa f4       	brpl	.+62     	; 0x78e <__floatsisf+0x6c>
 750:	bb 0f       	add	r27, r27
 752:	11 f4       	brne	.+4      	; 0x758 <__floatsisf+0x36>
 754:	60 ff       	sbrs	r22, 0
 756:	1b c0       	rjmp	.+54     	; 0x78e <__floatsisf+0x6c>
 758:	6f 5f       	subi	r22, 0xFF	; 255
 75a:	7f 4f       	sbci	r23, 0xFF	; 255
 75c:	8f 4f       	sbci	r24, 0xFF	; 255
 75e:	9f 4f       	sbci	r25, 0xFF	; 255
 760:	16 c0       	rjmp	.+44     	; 0x78e <__floatsisf+0x6c>
 762:	88 23       	and	r24, r24
 764:	11 f0       	breq	.+4      	; 0x76a <__floatsisf+0x48>
 766:	96 e9       	ldi	r25, 0x96	; 150
 768:	11 c0       	rjmp	.+34     	; 0x78c <__floatsisf+0x6a>
 76a:	77 23       	and	r23, r23
 76c:	21 f0       	breq	.+8      	; 0x776 <__floatsisf+0x54>
 76e:	9e e8       	ldi	r25, 0x8E	; 142
 770:	87 2f       	mov	r24, r23
 772:	76 2f       	mov	r23, r22
 774:	05 c0       	rjmp	.+10     	; 0x780 <__floatsisf+0x5e>
 776:	66 23       	and	r22, r22
 778:	71 f0       	breq	.+28     	; 0x796 <__floatsisf+0x74>
 77a:	96 e8       	ldi	r25, 0x86	; 134
 77c:	86 2f       	mov	r24, r22
 77e:	70 e0       	ldi	r23, 0x00	; 0
 780:	60 e0       	ldi	r22, 0x00	; 0
 782:	2a f0       	brmi	.+10     	; 0x78e <__floatsisf+0x6c>
 784:	9a 95       	dec	r25
 786:	66 0f       	add	r22, r22
 788:	77 1f       	adc	r23, r23
 78a:	88 1f       	adc	r24, r24
 78c:	da f7       	brpl	.-10     	; 0x784 <__floatsisf+0x62>
 78e:	88 0f       	add	r24, r24
 790:	96 95       	lsr	r25
 792:	87 95       	ror	r24
 794:	97 f9       	bld	r25, 7
 796:	08 95       	ret

00000798 <__fp_cmp>:
 798:	99 0f       	add	r25, r25
 79a:	00 08       	sbc	r0, r0
 79c:	55 0f       	add	r21, r21
 79e:	aa 0b       	sbc	r26, r26
 7a0:	e0 e8       	ldi	r30, 0x80	; 128
 7a2:	fe ef       	ldi	r31, 0xFE	; 254
 7a4:	16 16       	cp	r1, r22
 7a6:	17 06       	cpc	r1, r23
 7a8:	e8 07       	cpc	r30, r24
 7aa:	f9 07       	cpc	r31, r25
 7ac:	c0 f0       	brcs	.+48     	; 0x7de <__fp_cmp+0x46>
 7ae:	12 16       	cp	r1, r18
 7b0:	13 06       	cpc	r1, r19
 7b2:	e4 07       	cpc	r30, r20
 7b4:	f5 07       	cpc	r31, r21
 7b6:	98 f0       	brcs	.+38     	; 0x7de <__fp_cmp+0x46>
 7b8:	62 1b       	sub	r22, r18
 7ba:	73 0b       	sbc	r23, r19
 7bc:	84 0b       	sbc	r24, r20
 7be:	95 0b       	sbc	r25, r21
 7c0:	39 f4       	brne	.+14     	; 0x7d0 <__fp_cmp+0x38>
 7c2:	0a 26       	eor	r0, r26
 7c4:	61 f0       	breq	.+24     	; 0x7de <__fp_cmp+0x46>
 7c6:	23 2b       	or	r18, r19
 7c8:	24 2b       	or	r18, r20
 7ca:	25 2b       	or	r18, r21
 7cc:	21 f4       	brne	.+8      	; 0x7d6 <__fp_cmp+0x3e>
 7ce:	08 95       	ret
 7d0:	0a 26       	eor	r0, r26
 7d2:	09 f4       	brne	.+2      	; 0x7d6 <__fp_cmp+0x3e>
 7d4:	a1 40       	sbci	r26, 0x01	; 1
 7d6:	a6 95       	lsr	r26
 7d8:	8f ef       	ldi	r24, 0xFF	; 255
 7da:	81 1d       	adc	r24, r1
 7dc:	81 1d       	adc	r24, r1
 7de:	08 95       	ret

000007e0 <__fp_inf>:
 7e0:	97 f9       	bld	r25, 7
 7e2:	9f 67       	ori	r25, 0x7F	; 127
 7e4:	80 e8       	ldi	r24, 0x80	; 128
 7e6:	70 e0       	ldi	r23, 0x00	; 0
 7e8:	60 e0       	ldi	r22, 0x00	; 0
 7ea:	08 95       	ret

000007ec <__fp_nan>:
 7ec:	9f ef       	ldi	r25, 0xFF	; 255
 7ee:	80 ec       	ldi	r24, 0xC0	; 192
 7f0:	08 95       	ret

000007f2 <__fp_pscA>:
 7f2:	00 24       	eor	r0, r0
 7f4:	0a 94       	dec	r0
 7f6:	16 16       	cp	r1, r22
 7f8:	17 06       	cpc	r1, r23
 7fa:	18 06       	cpc	r1, r24
 7fc:	09 06       	cpc	r0, r25
 7fe:	08 95       	ret

00000800 <__fp_pscB>:
 800:	00 24       	eor	r0, r0
 802:	0a 94       	dec	r0
 804:	12 16       	cp	r1, r18
 806:	13 06       	cpc	r1, r19
 808:	14 06       	cpc	r1, r20
 80a:	05 06       	cpc	r0, r21
 80c:	08 95       	ret

0000080e <__fp_round>:
 80e:	09 2e       	mov	r0, r25
 810:	03 94       	inc	r0
 812:	00 0c       	add	r0, r0
 814:	11 f4       	brne	.+4      	; 0x81a <__fp_round+0xc>
 816:	88 23       	and	r24, r24
 818:	52 f0       	brmi	.+20     	; 0x82e <__fp_round+0x20>
 81a:	bb 0f       	add	r27, r27
 81c:	40 f4       	brcc	.+16     	; 0x82e <__fp_round+0x20>
 81e:	bf 2b       	or	r27, r31
 820:	11 f4       	brne	.+4      	; 0x826 <__fp_round+0x18>
 822:	60 ff       	sbrs	r22, 0
 824:	04 c0       	rjmp	.+8      	; 0x82e <__fp_round+0x20>
 826:	6f 5f       	subi	r22, 0xFF	; 255
 828:	7f 4f       	sbci	r23, 0xFF	; 255
 82a:	8f 4f       	sbci	r24, 0xFF	; 255
 82c:	9f 4f       	sbci	r25, 0xFF	; 255
 82e:	08 95       	ret

00000830 <__fp_split3>:
 830:	57 fd       	sbrc	r21, 7
 832:	90 58       	subi	r25, 0x80	; 128
 834:	44 0f       	add	r20, r20
 836:	55 1f       	adc	r21, r21
 838:	59 f0       	breq	.+22     	; 0x850 <__fp_splitA+0x10>
 83a:	5f 3f       	cpi	r21, 0xFF	; 255
 83c:	71 f0       	breq	.+28     	; 0x85a <__fp_splitA+0x1a>
 83e:	47 95       	ror	r20

00000840 <__fp_splitA>:
 840:	88 0f       	add	r24, r24
 842:	97 fb       	bst	r25, 7
 844:	99 1f       	adc	r25, r25
 846:	61 f0       	breq	.+24     	; 0x860 <__fp_splitA+0x20>
 848:	9f 3f       	cpi	r25, 0xFF	; 255
 84a:	79 f0       	breq	.+30     	; 0x86a <__fp_splitA+0x2a>
 84c:	87 95       	ror	r24
 84e:	08 95       	ret
 850:	12 16       	cp	r1, r18
 852:	13 06       	cpc	r1, r19
 854:	14 06       	cpc	r1, r20
 856:	55 1f       	adc	r21, r21
 858:	f2 cf       	rjmp	.-28     	; 0x83e <__fp_split3+0xe>
 85a:	46 95       	lsr	r20
 85c:	f1 df       	rcall	.-30     	; 0x840 <__fp_splitA>
 85e:	08 c0       	rjmp	.+16     	; 0x870 <__fp_splitA+0x30>
 860:	16 16       	cp	r1, r22
 862:	17 06       	cpc	r1, r23
 864:	18 06       	cpc	r1, r24
 866:	99 1f       	adc	r25, r25
 868:	f1 cf       	rjmp	.-30     	; 0x84c <__fp_splitA+0xc>
 86a:	86 95       	lsr	r24
 86c:	71 05       	cpc	r23, r1
 86e:	61 05       	cpc	r22, r1
 870:	08 94       	sec
 872:	08 95       	ret

00000874 <__fp_zero>:
 874:	e8 94       	clt

00000876 <__fp_szero>:
 876:	bb 27       	eor	r27, r27
 878:	66 27       	eor	r22, r22
 87a:	77 27       	eor	r23, r23
 87c:	cb 01       	movw	r24, r22
 87e:	97 f9       	bld	r25, 7
 880:	08 95       	ret

00000882 <__mulsf3>:
 882:	0b d0       	rcall	.+22     	; 0x89a <__mulsf3x>
 884:	c4 cf       	rjmp	.-120    	; 0x80e <__fp_round>
 886:	b5 df       	rcall	.-150    	; 0x7f2 <__fp_pscA>
 888:	28 f0       	brcs	.+10     	; 0x894 <__mulsf3+0x12>
 88a:	ba df       	rcall	.-140    	; 0x800 <__fp_pscB>
 88c:	18 f0       	brcs	.+6      	; 0x894 <__mulsf3+0x12>
 88e:	95 23       	and	r25, r21
 890:	09 f0       	breq	.+2      	; 0x894 <__mulsf3+0x12>
 892:	a6 cf       	rjmp	.-180    	; 0x7e0 <__fp_inf>
 894:	ab cf       	rjmp	.-170    	; 0x7ec <__fp_nan>
 896:	11 24       	eor	r1, r1
 898:	ee cf       	rjmp	.-36     	; 0x876 <__fp_szero>

0000089a <__mulsf3x>:
 89a:	ca df       	rcall	.-108    	; 0x830 <__fp_split3>
 89c:	a0 f3       	brcs	.-24     	; 0x886 <__mulsf3+0x4>

0000089e <__mulsf3_pse>:
 89e:	95 9f       	mul	r25, r21
 8a0:	d1 f3       	breq	.-12     	; 0x896 <__mulsf3+0x14>
 8a2:	95 0f       	add	r25, r21
 8a4:	50 e0       	ldi	r21, 0x00	; 0
 8a6:	55 1f       	adc	r21, r21
 8a8:	62 9f       	mul	r22, r18
 8aa:	f0 01       	movw	r30, r0
 8ac:	72 9f       	mul	r23, r18
 8ae:	bb 27       	eor	r27, r27
 8b0:	f0 0d       	add	r31, r0
 8b2:	b1 1d       	adc	r27, r1
 8b4:	63 9f       	mul	r22, r19
 8b6:	aa 27       	eor	r26, r26
 8b8:	f0 0d       	add	r31, r0
 8ba:	b1 1d       	adc	r27, r1
 8bc:	aa 1f       	adc	r26, r26
 8be:	64 9f       	mul	r22, r20
 8c0:	66 27       	eor	r22, r22
 8c2:	b0 0d       	add	r27, r0
 8c4:	a1 1d       	adc	r26, r1
 8c6:	66 1f       	adc	r22, r22
 8c8:	82 9f       	mul	r24, r18
 8ca:	22 27       	eor	r18, r18
 8cc:	b0 0d       	add	r27, r0
 8ce:	a1 1d       	adc	r26, r1
 8d0:	62 1f       	adc	r22, r18
 8d2:	73 9f       	mul	r23, r19
 8d4:	b0 0d       	add	r27, r0
 8d6:	a1 1d       	adc	r26, r1
 8d8:	62 1f       	adc	r22, r18
 8da:	83 9f       	mul	r24, r19
 8dc:	a0 0d       	add	r26, r0
 8de:	61 1d       	adc	r22, r1
 8e0:	22 1f       	adc	r18, r18
 8e2:	74 9f       	mul	r23, r20
 8e4:	33 27       	eor	r19, r19
 8e6:	a0 0d       	add	r26, r0
 8e8:	61 1d       	adc	r22, r1
 8ea:	23 1f       	adc	r18, r19
 8ec:	84 9f       	mul	r24, r20
 8ee:	60 0d       	add	r22, r0
 8f0:	21 1d       	adc	r18, r1
 8f2:	82 2f       	mov	r24, r18
 8f4:	76 2f       	mov	r23, r22
 8f6:	6a 2f       	mov	r22, r26
 8f8:	11 24       	eor	r1, r1
 8fa:	9f 57       	subi	r25, 0x7F	; 127
 8fc:	50 40       	sbci	r21, 0x00	; 0
 8fe:	8a f0       	brmi	.+34     	; 0x922 <__mulsf3_pse+0x84>
 900:	e1 f0       	breq	.+56     	; 0x93a <__mulsf3_pse+0x9c>
 902:	88 23       	and	r24, r24
 904:	4a f0       	brmi	.+18     	; 0x918 <__mulsf3_pse+0x7a>
 906:	ee 0f       	add	r30, r30
 908:	ff 1f       	adc	r31, r31
 90a:	bb 1f       	adc	r27, r27
 90c:	66 1f       	adc	r22, r22
 90e:	77 1f       	adc	r23, r23
 910:	88 1f       	adc	r24, r24
 912:	91 50       	subi	r25, 0x01	; 1
 914:	50 40       	sbci	r21, 0x00	; 0
 916:	a9 f7       	brne	.-22     	; 0x902 <__mulsf3_pse+0x64>
 918:	9e 3f       	cpi	r25, 0xFE	; 254
 91a:	51 05       	cpc	r21, r1
 91c:	70 f0       	brcs	.+28     	; 0x93a <__mulsf3_pse+0x9c>
 91e:	60 cf       	rjmp	.-320    	; 0x7e0 <__fp_inf>
 920:	aa cf       	rjmp	.-172    	; 0x876 <__fp_szero>
 922:	5f 3f       	cpi	r21, 0xFF	; 255
 924:	ec f3       	brlt	.-6      	; 0x920 <__mulsf3_pse+0x82>
 926:	98 3e       	cpi	r25, 0xE8	; 232
 928:	dc f3       	brlt	.-10     	; 0x920 <__mulsf3_pse+0x82>
 92a:	86 95       	lsr	r24
 92c:	77 95       	ror	r23
 92e:	67 95       	ror	r22
 930:	b7 95       	ror	r27
 932:	f7 95       	ror	r31
 934:	e7 95       	ror	r30
 936:	9f 5f       	subi	r25, 0xFF	; 255
 938:	c1 f7       	brne	.-16     	; 0x92a <__mulsf3_pse+0x8c>
 93a:	fe 2b       	or	r31, r30
 93c:	88 0f       	add	r24, r24
 93e:	91 1d       	adc	r25, r1
 940:	96 95       	lsr	r25
 942:	87 95       	ror	r24
 944:	97 f9       	bld	r25, 7
 946:	08 95       	ret

00000948 <_exit>:
 948:	f8 94       	cli

0000094a <__stop_program>:
 94a:	ff cf       	rjmp	.-2      	; 0x94a <__stop_program>
