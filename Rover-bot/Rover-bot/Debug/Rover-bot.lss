
Rover-bot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000076e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800200  00800200  0000076e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000076e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001637  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f80  00000000  00000000  00001f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b4b  00000000  00000000  00002e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  000039dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c1  00000000  00000000  00003bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b2d  00000000  00000000  000043b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004ee6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	12 c1       	rjmp	.+548    	; 0x24e <__vector_10>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	e7 c0       	rjmp	.+462    	; 0x204 <__vector_13>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ef       	ldi	r30, 0xFA	; 250
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 31       	cpi	r26, 0x1E	; 30
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	a9 d1       	rcall	.+850    	; 0x472 <main>
 120:	ea c2       	rjmp	.+1492   	; 0x6f6 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <PSerial_read>:
}

int PSerial_read(unsigned char port){
    int data = -1;

    switch (port) {
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	71 f0       	breq	.+28     	; 0x144 <PSerial_read+0x20>
 128:	28 f0       	brcs	.+10     	; 0x134 <PSerial_read+0x10>
 12a:	82 30       	cpi	r24, 0x02	; 2
 12c:	99 f0       	breq	.+38     	; 0x154 <PSerial_read+0x30>
 12e:	83 30       	cpi	r24, 0x03	; 3
 130:	c9 f0       	breq	.+50     	; 0x164 <PSerial_read+0x40>
 132:	20 c0       	rjmp	.+64     	; 0x174 <PSerial_read+0x50>
        case 0: 
           if (UCSR0A & (1<<RXC0))
 134:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 138:	88 23       	and	r24, r24
 13a:	fc f4       	brge	.+62     	; 0x17a <PSerial_read+0x56>
                data = UDR0;
 13c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	08 95       	ret
           break;
        case 1:
            if (UCSR1A & (1<<RXC1))
 144:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 148:	88 23       	and	r24, r24
 14a:	d4 f4       	brge	.+52     	; 0x180 <PSerial_read+0x5c>
                data = UDR1;
 14c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	08 95       	ret
            break;
        case 2:
            if (UCSR2A & (1<<RXC2))
 154:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
 158:	88 23       	and	r24, r24
 15a:	ac f4       	brge	.+42     	; 0x186 <PSerial_read+0x62>
                data = UDR2;
 15c:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	08 95       	ret
            break;
        case 3:
             if (UCSR3A & (1<<RXC3))
 164:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
 168:	88 23       	and	r24, r24
 16a:	84 f4       	brge	.+32     	; 0x18c <PSerial_read+0x68>
                data = UDR3;
 16c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	08 95       	ret
	if (speed == 250000l) return 3l;
	return 103l;
}

int PSerial_read(unsigned char port){
    int data = -1;
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	9f ef       	ldi	r25, 0xFF	; 255
 178:	08 95       	ret
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	9f ef       	ldi	r25, 0xFF	; 255
 17e:	08 95       	ret
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	9f ef       	ldi	r25, 0xFF	; 255
 184:	08 95       	ret
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	9f ef       	ldi	r25, 0xFF	; 255
 18a:	08 95       	ret
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	9f ef       	ldi	r25, 0xFF	; 255
            break;
        default :
            break;
    }
    return data;
}
 190:	08 95       	ret

00000192 <PSerial_open>:


#include "PSerial.h"

void PSerial_open(unsigned char port, long speed, int config){
    switch (port) {
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	91 f0       	breq	.+36     	; 0x1ba <PSerial_open+0x28>
 196:	28 f0       	brcs	.+10     	; 0x1a2 <PSerial_open+0x10>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	d9 f0       	breq	.+54     	; 0x1d2 <PSerial_open+0x40>
 19c:	83 30       	cpi	r24, 0x03	; 3
 19e:	29 f1       	breq	.+74     	; 0x1ea <PSerial_open+0x58>
 1a0:	2f c0       	rjmp	.+94     	; 0x200 <PSerial_open+0x6e>
        case 0: 
			UCSR0B |= 0x18;
 1a2:	e1 ec       	ldi	r30, 0xC1	; 193
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	90 81       	ld	r25, Z
 1a8:	98 61       	ori	r25, 0x18	; 24
 1aa:	90 83       	st	Z, r25
            UCSR0C = config;
 1ac:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
			UBRR0 = speed;
 1b0:	50 93 c5 00 	sts	0x00C5, r21	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 1b4:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
            break;
 1b8:	23 c0       	rjmp	.+70     	; 0x200 <PSerial_open+0x6e>
        case 1:
            UCSR1C = config;
 1ba:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
			UCSR1B |= 0x18;
 1be:	e9 ec       	ldi	r30, 0xC9	; 201
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	90 81       	ld	r25, Z
 1c4:	98 61       	ori	r25, 0x18	; 24
 1c6:	90 83       	st	Z, r25
            UBRR1 = speed;
 1c8:	50 93 cd 00 	sts	0x00CD, r21	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
 1cc:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
            break;
 1d0:	17 c0       	rjmp	.+46     	; 0x200 <PSerial_open+0x6e>
        case 2:
            UCSR2C = config;
 1d2:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
			UCSR2B |= 0x18;
 1d6:	e1 ed       	ldi	r30, 0xD1	; 209
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	90 81       	ld	r25, Z
 1dc:	98 61       	ori	r25, 0x18	; 24
 1de:	90 83       	st	Z, r25
            UBRR2 = speed;
 1e0:	50 93 d5 00 	sts	0x00D5, r21	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
 1e4:	40 93 d4 00 	sts	0x00D4, r20	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
            break;
 1e8:	0b c0       	rjmp	.+22     	; 0x200 <PSerial_open+0x6e>
        case 3:
            UCSR3C = config;
 1ea:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
			UCSR3B |= 0x18;
 1ee:	e1 e3       	ldi	r30, 0x31	; 49
 1f0:	f1 e0       	ldi	r31, 0x01	; 1
 1f2:	90 81       	ld	r25, Z
 1f4:	98 61       	ori	r25, 0x18	; 24
 1f6:	90 83       	st	Z, r25
            UBRR3 = speed;
 1f8:	50 93 35 01 	sts	0x0135, r21	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
 1fc:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
            break;
        default:
            break;
    }
	PSerial_read(port);
 200:	91 cf       	rjmp	.-222    	; 0x124 <PSerial_read>
 202:	08 95       	ret

00000204 <__vector_13>:
	TIMSK2 |= (1 << OCIE2A);
	
	OCR2A = tickTime;
}

ISR(TIMER2_COMPA_vect) {
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	af 93       	push	r26
 214:	bf 93       	push	r27
	timeCounter++;
 216:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <timeCounter>
 21a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <timeCounter+0x1>
 21e:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <timeCounter+0x2>
 222:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <timeCounter+0x3>
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	a1 1d       	adc	r26, r1
 22a:	b1 1d       	adc	r27, r1
 22c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <timeCounter>
 230:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <timeCounter+0x1>
 234:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <timeCounter+0x2>
 238:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <timeCounter+0x3>
	/*if (timeCounter % 1000 == 0)*/ //PORTB ^= 0x80;
 23c:	bf 91       	pop	r27
 23e:	af 91       	pop	r26
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <__vector_10>:
	} else if (wheelNumber == R_WHEEL && direction == FORWARD) {
		PORTC &= 0xFC;
		PORTC |=  R_FORWARD;
	} else if (wheelNumber == R_WHEEL && direction == BACKWARD) {
		PORTC &= 0xFC;
		PORTC |=  R_BACKWARD;
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	0b b6       	in	r0, 0x3b	; 59
 25a:	0f 92       	push	r0
 25c:	2f 93       	push	r18
 25e:	3f 93       	push	r19
 260:	4f 93       	push	r20
 262:	5f 93       	push	r21
 264:	6f 93       	push	r22
 266:	7f 93       	push	r23
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
 26c:	ef 93       	push	r30
 26e:	ff 93       	push	r31
 270:	e3 e0       	ldi	r30, 0x03	; 3
 272:	f1 e0       	ldi	r31, 0x01	; 1
 274:	40 81       	ld	r20, Z
 276:	50 e0       	ldi	r21, 0x00	; 0
 278:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end>
 27c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_end+0x1>
 280:	84 27       	eor	r24, r20
 282:	95 27       	eor	r25, r21
 284:	81 bb       	out	0x11, r24	; 17
 286:	20 81       	ld	r18, Z
 288:	80 81       	ld	r24, Z
 28a:	31 b3       	in	r19, 0x11	; 17
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	93 27       	eor	r25, r19
 290:	91 bb       	out	0x11, r25	; 17
 292:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <rightcount>
 296:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <rightcount+0x1>
 29a:	6f 5f       	subi	r22, 0xFF	; 255
 29c:	7f 4f       	sbci	r23, 0xFF	; 255
 29e:	70 93 03 02 	sts	0x0203, r23	; 0x800203 <rightcount+0x1>
 2a2:	60 93 02 02 	sts	0x0202, r22	; 0x800202 <rightcount>
 2a6:	31 b3       	in	r19, 0x11	; 17
 2a8:	92 e0       	ldi	r25, 0x02	; 2
 2aa:	93 27       	eor	r25, r19
 2ac:	91 bb       	out	0x11, r25	; 17
 2ae:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <leftCount>
 2b2:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <leftCount+0x1>
 2b6:	6f 5f       	subi	r22, 0xFF	; 255
 2b8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ba:	70 93 05 02 	sts	0x0205, r23	; 0x800205 <leftCount+0x1>
 2be:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <leftCount>
 2c2:	22 60       	ori	r18, 0x02	; 2
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	30 93 0b 02 	sts	0x020B, r19	; 0x80020b <RwasOn+0x1>
 2ca:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <RwasOn>
 2ce:	81 60       	ori	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <LwasOn+0x1>
 2d6:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <LwasOn>
 2da:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <__data_end+0x1>
 2de:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <__data_end>
 2e2:	ff 91       	pop	r31
 2e4:	ef 91       	pop	r30
 2e6:	9f 91       	pop	r25
 2e8:	8f 91       	pop	r24
 2ea:	7f 91       	pop	r23
 2ec:	6f 91       	pop	r22
 2ee:	5f 91       	pop	r21
 2f0:	4f 91       	pop	r20
 2f2:	3f 91       	pop	r19
 2f4:	2f 91       	pop	r18
 2f6:	0f 90       	pop	r0
 2f8:	0b be       	out	0x3b, r0	; 59
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <go1foot>:
 304:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <leftCount+0x1>
 308:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <leftCount>
 30c:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <rightcount+0x1>
 310:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <rightcount>
 314:	88 ea       	ldi	r24, 0xA8	; 168
 316:	92 e0       	ldi	r25, 0x02	; 2
 318:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 31c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 320:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 324:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 328:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <leftCount>
 32c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <leftCount+0x1>
 330:	86 39       	cpi	r24, 0x96	; 150
 332:	91 05       	cpc	r25, r1
 334:	5c f4       	brge	.+22     	; 0x34c <go1foot+0x48>
 336:	24 e0       	ldi	r18, 0x04	; 4
 338:	81 b3       	in	r24, 0x11	; 17
 33a:	82 27       	eor	r24, r18
 33c:	81 bb       	out	0x11, r24	; 17
 33e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <leftCount>
 342:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <leftCount+0x1>
 346:	86 39       	cpi	r24, 0x96	; 150
 348:	91 05       	cpc	r25, r1
 34a:	b4 f3       	brlt	.-20     	; 0x338 <go1foot+0x34>
 34c:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 350:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 354:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 358:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 35c:	08 95       	ret

0000035e <initWheels>:
 35e:	87 b1       	in	r24, 0x07	; 7
 360:	8f 60       	ori	r24, 0x0F	; 15
 362:	87 b9       	out	0x07, r24	; 7
 364:	ea e0       	ldi	r30, 0x0A	; 10
 366:	f1 e0       	ldi	r31, 0x01	; 1
 368:	80 81       	ld	r24, Z
 36a:	88 61       	ori	r24, 0x18	; 24
 36c:	80 83       	st	Z, r24
 36e:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <timer>
 372:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <timer+0x1>
 376:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <timer+0x2>
 37a:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <timer+0x3>
 37e:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <timer+0x4>
 382:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <timer+0x5>
 386:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <timer+0x6>
 38a:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <timer+0x7>
 38e:	88 ee       	ldi	r24, 0xE8	; 232
 390:	93 e0       	ldi	r25, 0x03	; 3
 392:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
 396:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 39a:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 39e:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 3a2:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 3a6:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 3aa:	e0 e2       	ldi	r30, 0x20	; 32
 3ac:	f1 e0       	ldi	r31, 0x01	; 1
 3ae:	80 81       	ld	r24, Z
 3b0:	80 6a       	ori	r24, 0xA0	; 160
 3b2:	80 83       	st	Z, r24
 3b4:	e1 e2       	ldi	r30, 0x21	; 33
 3b6:	f1 e0       	ldi	r31, 0x01	; 1
 3b8:	80 81       	ld	r24, Z
 3ba:	82 61       	ori	r24, 0x12	; 18
 3bc:	80 83       	st	Z, r24
 3be:	43 9a       	sbi	0x08, 3	; 8
 3c0:	40 9a       	sbi	0x08, 0	; 8
 3c2:	e5 e0       	ldi	r30, 0x05	; 5
 3c4:	f1 e0       	ldi	r31, 0x01	; 1
 3c6:	80 81       	ld	r24, Z
 3c8:	8c 7f       	andi	r24, 0xFC	; 252
 3ca:	80 83       	st	Z, r24
 3cc:	ec e6       	ldi	r30, 0x6C	; 108
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	80 81       	ld	r24, Z
 3d2:	82 60       	ori	r24, 0x02	; 2
 3d4:	80 83       	st	Z, r24
 3d6:	80 81       	ld	r24, Z
 3d8:	84 60       	ori	r24, 0x04	; 4
 3da:	80 83       	st	Z, r24
 3dc:	e8 e6       	ldi	r30, 0x68	; 104
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	82 60       	ori	r24, 0x02	; 2
 3e4:	80 83       	st	Z, r24
 3e6:	08 95       	ret

000003e8 <setDutyCycle>:
	}

}

// setDutyCycle accepts a dutycycle (number between 0.0 and 1.0) and the wheel (L_WHEEL or R_WHEEL)
void setDutyCycle(float dutycycle, int wheel) {
 3e8:	cf 92       	push	r12
 3ea:	df 92       	push	r13
 3ec:	ef 92       	push	r14
 3ee:	ff 92       	push	r15
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	6b 01       	movw	r12, r22
 3f6:	7c 01       	movw	r14, r24
 3f8:	ea 01       	movw	r28, r20
	
	if (dutycycle == 0) {
 3fa:	20 e0       	ldi	r18, 0x00	; 0
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	a9 01       	movw	r20, r18
 400:	6d d0       	rcall	.+218    	; 0x4dc <__cmpsf2>
 402:	81 11       	cpse	r24, r1
 404:	0e c0       	rjmp	.+28     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		if (wheel == L_WHEEL) OCR5A = 0;
 406:	20 97       	sbiw	r28, 0x00	; 0
 408:	29 f4       	brne	.+10     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 40a:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 40e:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 412:	1e c0       	rjmp	.+60     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		else if (wheel == R_WHEEL) OCR5B = 0;
 414:	21 97       	sbiw	r28, 0x01	; 1
 416:	e1 f4       	brne	.+56     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 418:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 41c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 420:	17 c0       	rjmp	.+46     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
	} else {
		int ontime = ((int)(dutycycle * 400.0) + 400) ;
 422:	20 e0       	ldi	r18, 0x00	; 0
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	48 ec       	ldi	r20, 0xC8	; 200
 428:	53 e4       	ldi	r21, 0x43	; 67
 42a:	c7 01       	movw	r24, r14
 42c:	b6 01       	movw	r22, r12
 42e:	d8 d0       	rcall	.+432    	; 0x5e0 <__mulsf3>
 430:	59 d0       	rcall	.+178    	; 0x4e4 <__fixsfsi>
 432:	60 57       	subi	r22, 0x70	; 112
 434:	7e 4f       	sbci	r23, 0xFE	; 254
		
		if (wheel == L_WHEEL) OCR5A = ontime ;
 436:	20 97       	sbiw	r28, 0x00	; 0
 438:	29 f4       	brne	.+10     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 43a:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 43e:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 442:	06 c0       	rjmp	.+12     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		else if (wheel == R_WHEEL) OCR5B = ontime;
 444:	21 97       	sbiw	r28, 0x01	; 1
 446:	21 f4       	brne	.+8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 448:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 44c:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
	}
}
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	ff 90       	pop	r15
 456:	ef 90       	pop	r14
 458:	df 90       	pop	r13
 45a:	cf 90       	pop	r12
 45c:	08 95       	ret

0000045e <init>:
#include "wheels.h"
#include "PSerial.h"

void init() {
	//setTime();
	PSerial_open(0, BAUD9600, SERIAL_8N1);
 45e:	26 e0       	ldi	r18, 0x06	; 6
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	48 e6       	ldi	r20, 0x68	; 104
 464:	50 e0       	ldi	r21, 0x00	; 0
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	92 de       	rcall	.-732    	; 0x192 <PSerial_open>
	initWheels();
 46e:	77 cf       	rjmp	.-274    	; 0x35e <initWheels>
 470:	08 95       	ret

00000472 <main>:
 472:	26 e0       	ldi	r18, 0x06	; 6


int main(void)
{
//PORTB |= 0x80;
	PSerial_open(0, BAUD9600, SERIAL_8N1);
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	48 e6       	ldi	r20, 0x68	; 104
 478:	50 e0       	ldi	r21, 0x00	; 0
 47a:	60 e0       	ldi	r22, 0x00	; 0
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	88 de       	rcall	.-752    	; 0x192 <PSerial_open>
	DDRB = 0x80;
 482:	80 e8       	ldi	r24, 0x80	; 128
 484:	84 b9       	out	0x04, r24	; 4
	DDRF |= (1<<DDF0)|(1<<DDF1)|(DDF2);
 486:	80 b3       	in	r24, 0x10	; 16
 488:	83 60       	ori	r24, 0x03	; 3
	init();
 48a:	80 bb       	out	0x10, r24	; 16
 48c:	e8 df       	rcall	.-48     	; 0x45e <init>
	PORTJ &= ~(1 << PJ1);
 48e:	e5 e0       	ldi	r30, 0x05	; 5
 490:	f1 e0       	ldi	r31, 0x01	; 1
 492:	80 81       	ld	r24, Z
 494:	8d 7f       	andi	r24, 0xFD	; 253
 496:	80 83       	st	Z, r24
	sei();
 498:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 49a:	2f ef       	ldi	r18, 0xFF	; 255
 49c:	83 ed       	ldi	r24, 0xD3	; 211
 49e:	90 e3       	ldi	r25, 0x30	; 48
 4a0:	21 50       	subi	r18, 0x01	; 1
 4a2:	80 40       	sbci	r24, 0x00	; 0
 4a4:	90 40       	sbci	r25, 0x00	; 0
 4a6:	e1 f7       	brne	.-8      	; 0x4a0 <main+0x2e>
 4a8:	00 c0       	rjmp	.+0      	; 0x4aa <main+0x38>
 4aa:	00 00       	nop

/* Replace with your application code */
	_delay_ms(1000);
	//changeDirection(FORWARD, L_WHEEL);
	
	setDutyCycle(0, L_WHEEL);
 4ac:	40 e0       	ldi	r20, 0x00	; 0
 4ae:	50 e0       	ldi	r21, 0x00	; 0
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	70 e0       	ldi	r23, 0x00	; 0
 4b4:	cb 01       	movw	r24, r22
 4b6:	98 df       	rcall	.-208    	; 0x3e8 <setDutyCycle>
	setDutyCycle(0, R_WHEEL);
 4b8:	41 e0       	ldi	r20, 0x01	; 1
 4ba:	50 e0       	ldi	r21, 0x00	; 0
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	70 e0       	ldi	r23, 0x00	; 0
 4c0:	cb 01       	movw	r24, r22
 4c2:	92 df       	rcall	.-220    	; 0x3e8 <setDutyCycle>
 4c4:	2f ef       	ldi	r18, 0xFF	; 255
 4c6:	8b e7       	ldi	r24, 0x7B	; 123
 4c8:	92 e9       	ldi	r25, 0x92	; 146
 4ca:	21 50       	subi	r18, 0x01	; 1
 4cc:	80 40       	sbci	r24, 0x00	; 0
 4ce:	90 40       	sbci	r25, 0x00	; 0
 4d0:	e1 f7       	brne	.-8      	; 0x4ca <main+0x58>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <main+0x62>
	while (1)
	{
		//unsigned long t = getTime();
		//PSprintf(0, "Time: %X\n\r", t);
		_delay_ms(3000);
		go1foot();
 4d4:	00 00       	nop
 4d6:	16 df       	rcall	.-468    	; 0x304 <go1foot>
		PORTF |= (1<<PF2);
 4d8:	8a 9a       	sbi	0x11, 2	; 17
 4da:	f4 cf       	rjmp	.-24     	; 0x4c4 <main+0x52>

000004dc <__cmpsf2>:
 4dc:	34 d0       	rcall	.+104    	; 0x546 <__fp_cmp>
 4de:	08 f4       	brcc	.+2      	; 0x4e2 <__cmpsf2+0x6>
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	08 95       	ret

000004e4 <__fixsfsi>:
 4e4:	04 d0       	rcall	.+8      	; 0x4ee <__fixunssfsi>
 4e6:	68 94       	set
 4e8:	b1 11       	cpse	r27, r1
 4ea:	74 c0       	rjmp	.+232    	; 0x5d4 <__fp_szero>
 4ec:	08 95       	ret

000004ee <__fixunssfsi>:
 4ee:	57 d0       	rcall	.+174    	; 0x59e <__fp_splitA>
 4f0:	88 f0       	brcs	.+34     	; 0x514 <__fixunssfsi+0x26>
 4f2:	9f 57       	subi	r25, 0x7F	; 127
 4f4:	90 f0       	brcs	.+36     	; 0x51a <__fixunssfsi+0x2c>
 4f6:	b9 2f       	mov	r27, r25
 4f8:	99 27       	eor	r25, r25
 4fa:	b7 51       	subi	r27, 0x17	; 23
 4fc:	a0 f0       	brcs	.+40     	; 0x526 <__fixunssfsi+0x38>
 4fe:	d1 f0       	breq	.+52     	; 0x534 <__fixunssfsi+0x46>
 500:	66 0f       	add	r22, r22
 502:	77 1f       	adc	r23, r23
 504:	88 1f       	adc	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	1a f0       	brmi	.+6      	; 0x510 <__fixunssfsi+0x22>
 50a:	ba 95       	dec	r27
 50c:	c9 f7       	brne	.-14     	; 0x500 <__fixunssfsi+0x12>
 50e:	12 c0       	rjmp	.+36     	; 0x534 <__fixunssfsi+0x46>
 510:	b1 30       	cpi	r27, 0x01	; 1
 512:	81 f0       	breq	.+32     	; 0x534 <__fixunssfsi+0x46>
 514:	5e d0       	rcall	.+188    	; 0x5d2 <__fp_zero>
 516:	b1 e0       	ldi	r27, 0x01	; 1
 518:	08 95       	ret
 51a:	5b c0       	rjmp	.+182    	; 0x5d2 <__fp_zero>
 51c:	67 2f       	mov	r22, r23
 51e:	78 2f       	mov	r23, r24
 520:	88 27       	eor	r24, r24
 522:	b8 5f       	subi	r27, 0xF8	; 248
 524:	39 f0       	breq	.+14     	; 0x534 <__fixunssfsi+0x46>
 526:	b9 3f       	cpi	r27, 0xF9	; 249
 528:	cc f3       	brlt	.-14     	; 0x51c <__fixunssfsi+0x2e>
 52a:	86 95       	lsr	r24
 52c:	77 95       	ror	r23
 52e:	67 95       	ror	r22
 530:	b3 95       	inc	r27
 532:	d9 f7       	brne	.-10     	; 0x52a <__fixunssfsi+0x3c>
 534:	3e f4       	brtc	.+14     	; 0x544 <__fixunssfsi+0x56>
 536:	90 95       	com	r25
 538:	80 95       	com	r24
 53a:	70 95       	com	r23
 53c:	61 95       	neg	r22
 53e:	7f 4f       	sbci	r23, 0xFF	; 255
 540:	8f 4f       	sbci	r24, 0xFF	; 255
 542:	9f 4f       	sbci	r25, 0xFF	; 255
 544:	08 95       	ret

00000546 <__fp_cmp>:
 546:	99 0f       	add	r25, r25
 548:	00 08       	sbc	r0, r0
 54a:	55 0f       	add	r21, r21
 54c:	aa 0b       	sbc	r26, r26
 54e:	e0 e8       	ldi	r30, 0x80	; 128
 550:	fe ef       	ldi	r31, 0xFE	; 254
 552:	16 16       	cp	r1, r22
 554:	17 06       	cpc	r1, r23
 556:	e8 07       	cpc	r30, r24
 558:	f9 07       	cpc	r31, r25
 55a:	c0 f0       	brcs	.+48     	; 0x58c <__fp_cmp+0x46>
 55c:	12 16       	cp	r1, r18
 55e:	13 06       	cpc	r1, r19
 560:	e4 07       	cpc	r30, r20
 562:	f5 07       	cpc	r31, r21
 564:	98 f0       	brcs	.+38     	; 0x58c <__fp_cmp+0x46>
 566:	62 1b       	sub	r22, r18
 568:	73 0b       	sbc	r23, r19
 56a:	84 0b       	sbc	r24, r20
 56c:	95 0b       	sbc	r25, r21
 56e:	39 f4       	brne	.+14     	; 0x57e <__fp_cmp+0x38>
 570:	0a 26       	eor	r0, r26
 572:	61 f0       	breq	.+24     	; 0x58c <__fp_cmp+0x46>
 574:	23 2b       	or	r18, r19
 576:	24 2b       	or	r18, r20
 578:	25 2b       	or	r18, r21
 57a:	21 f4       	brne	.+8      	; 0x584 <__fp_cmp+0x3e>
 57c:	08 95       	ret
 57e:	0a 26       	eor	r0, r26
 580:	09 f4       	brne	.+2      	; 0x584 <__fp_cmp+0x3e>
 582:	a1 40       	sbci	r26, 0x01	; 1
 584:	a6 95       	lsr	r26
 586:	8f ef       	ldi	r24, 0xFF	; 255
 588:	81 1d       	adc	r24, r1
 58a:	81 1d       	adc	r24, r1
 58c:	08 95       	ret

0000058e <__fp_split3>:
 58e:	57 fd       	sbrc	r21, 7
 590:	90 58       	subi	r25, 0x80	; 128
 592:	44 0f       	add	r20, r20
 594:	55 1f       	adc	r21, r21
 596:	59 f0       	breq	.+22     	; 0x5ae <__fp_splitA+0x10>
 598:	5f 3f       	cpi	r21, 0xFF	; 255
 59a:	71 f0       	breq	.+28     	; 0x5b8 <__fp_splitA+0x1a>
 59c:	47 95       	ror	r20

0000059e <__fp_splitA>:
 59e:	88 0f       	add	r24, r24
 5a0:	97 fb       	bst	r25, 7
 5a2:	99 1f       	adc	r25, r25
 5a4:	61 f0       	breq	.+24     	; 0x5be <__fp_splitA+0x20>
 5a6:	9f 3f       	cpi	r25, 0xFF	; 255
 5a8:	79 f0       	breq	.+30     	; 0x5c8 <__fp_splitA+0x2a>
 5aa:	87 95       	ror	r24
 5ac:	08 95       	ret
 5ae:	12 16       	cp	r1, r18
 5b0:	13 06       	cpc	r1, r19
 5b2:	14 06       	cpc	r1, r20
 5b4:	55 1f       	adc	r21, r21
 5b6:	f2 cf       	rjmp	.-28     	; 0x59c <__fp_split3+0xe>
 5b8:	46 95       	lsr	r20
 5ba:	f1 df       	rcall	.-30     	; 0x59e <__fp_splitA>
 5bc:	08 c0       	rjmp	.+16     	; 0x5ce <__fp_splitA+0x30>
 5be:	16 16       	cp	r1, r22
 5c0:	17 06       	cpc	r1, r23
 5c2:	18 06       	cpc	r1, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	f1 cf       	rjmp	.-30     	; 0x5aa <__fp_splitA+0xc>
 5c8:	86 95       	lsr	r24
 5ca:	71 05       	cpc	r23, r1
 5cc:	61 05       	cpc	r22, r1
 5ce:	08 94       	sec
 5d0:	08 95       	ret

000005d2 <__fp_zero>:
 5d2:	e8 94       	clt

000005d4 <__fp_szero>:
 5d4:	bb 27       	eor	r27, r27
 5d6:	66 27       	eor	r22, r22
 5d8:	77 27       	eor	r23, r23
 5da:	cb 01       	movw	r24, r22
 5dc:	97 f9       	bld	r25, 7
 5de:	08 95       	ret

000005e0 <__mulsf3>:
 5e0:	0b d0       	rcall	.+22     	; 0x5f8 <__mulsf3x>
 5e2:	78 c0       	rjmp	.+240    	; 0x6d4 <__fp_round>
 5e4:	69 d0       	rcall	.+210    	; 0x6b8 <__fp_pscA>
 5e6:	28 f0       	brcs	.+10     	; 0x5f2 <__mulsf3+0x12>
 5e8:	6e d0       	rcall	.+220    	; 0x6c6 <__fp_pscB>
 5ea:	18 f0       	brcs	.+6      	; 0x5f2 <__mulsf3+0x12>
 5ec:	95 23       	and	r25, r21
 5ee:	09 f0       	breq	.+2      	; 0x5f2 <__mulsf3+0x12>
 5f0:	5a c0       	rjmp	.+180    	; 0x6a6 <__fp_inf>
 5f2:	5f c0       	rjmp	.+190    	; 0x6b2 <__fp_nan>
 5f4:	11 24       	eor	r1, r1
 5f6:	ee cf       	rjmp	.-36     	; 0x5d4 <__fp_szero>

000005f8 <__mulsf3x>:
 5f8:	ca df       	rcall	.-108    	; 0x58e <__fp_split3>
 5fa:	a0 f3       	brcs	.-24     	; 0x5e4 <__mulsf3+0x4>

000005fc <__mulsf3_pse>:
 5fc:	95 9f       	mul	r25, r21
 5fe:	d1 f3       	breq	.-12     	; 0x5f4 <__mulsf3+0x14>
 600:	95 0f       	add	r25, r21
 602:	50 e0       	ldi	r21, 0x00	; 0
 604:	55 1f       	adc	r21, r21
 606:	62 9f       	mul	r22, r18
 608:	f0 01       	movw	r30, r0
 60a:	72 9f       	mul	r23, r18
 60c:	bb 27       	eor	r27, r27
 60e:	f0 0d       	add	r31, r0
 610:	b1 1d       	adc	r27, r1
 612:	63 9f       	mul	r22, r19
 614:	aa 27       	eor	r26, r26
 616:	f0 0d       	add	r31, r0
 618:	b1 1d       	adc	r27, r1
 61a:	aa 1f       	adc	r26, r26
 61c:	64 9f       	mul	r22, r20
 61e:	66 27       	eor	r22, r22
 620:	b0 0d       	add	r27, r0
 622:	a1 1d       	adc	r26, r1
 624:	66 1f       	adc	r22, r22
 626:	82 9f       	mul	r24, r18
 628:	22 27       	eor	r18, r18
 62a:	b0 0d       	add	r27, r0
 62c:	a1 1d       	adc	r26, r1
 62e:	62 1f       	adc	r22, r18
 630:	73 9f       	mul	r23, r19
 632:	b0 0d       	add	r27, r0
 634:	a1 1d       	adc	r26, r1
 636:	62 1f       	adc	r22, r18
 638:	83 9f       	mul	r24, r19
 63a:	a0 0d       	add	r26, r0
 63c:	61 1d       	adc	r22, r1
 63e:	22 1f       	adc	r18, r18
 640:	74 9f       	mul	r23, r20
 642:	33 27       	eor	r19, r19
 644:	a0 0d       	add	r26, r0
 646:	61 1d       	adc	r22, r1
 648:	23 1f       	adc	r18, r19
 64a:	84 9f       	mul	r24, r20
 64c:	60 0d       	add	r22, r0
 64e:	21 1d       	adc	r18, r1
 650:	82 2f       	mov	r24, r18
 652:	76 2f       	mov	r23, r22
 654:	6a 2f       	mov	r22, r26
 656:	11 24       	eor	r1, r1
 658:	9f 57       	subi	r25, 0x7F	; 127
 65a:	50 40       	sbci	r21, 0x00	; 0
 65c:	8a f0       	brmi	.+34     	; 0x680 <__mulsf3_pse+0x84>
 65e:	e1 f0       	breq	.+56     	; 0x698 <__mulsf3_pse+0x9c>
 660:	88 23       	and	r24, r24
 662:	4a f0       	brmi	.+18     	; 0x676 <__mulsf3_pse+0x7a>
 664:	ee 0f       	add	r30, r30
 666:	ff 1f       	adc	r31, r31
 668:	bb 1f       	adc	r27, r27
 66a:	66 1f       	adc	r22, r22
 66c:	77 1f       	adc	r23, r23
 66e:	88 1f       	adc	r24, r24
 670:	91 50       	subi	r25, 0x01	; 1
 672:	50 40       	sbci	r21, 0x00	; 0
 674:	a9 f7       	brne	.-22     	; 0x660 <__mulsf3_pse+0x64>
 676:	9e 3f       	cpi	r25, 0xFE	; 254
 678:	51 05       	cpc	r21, r1
 67a:	70 f0       	brcs	.+28     	; 0x698 <__mulsf3_pse+0x9c>
 67c:	14 c0       	rjmp	.+40     	; 0x6a6 <__fp_inf>
 67e:	aa cf       	rjmp	.-172    	; 0x5d4 <__fp_szero>
 680:	5f 3f       	cpi	r21, 0xFF	; 255
 682:	ec f3       	brlt	.-6      	; 0x67e <__mulsf3_pse+0x82>
 684:	98 3e       	cpi	r25, 0xE8	; 232
 686:	dc f3       	brlt	.-10     	; 0x67e <__mulsf3_pse+0x82>
 688:	86 95       	lsr	r24
 68a:	77 95       	ror	r23
 68c:	67 95       	ror	r22
 68e:	b7 95       	ror	r27
 690:	f7 95       	ror	r31
 692:	e7 95       	ror	r30
 694:	9f 5f       	subi	r25, 0xFF	; 255
 696:	c1 f7       	brne	.-16     	; 0x688 <__mulsf3_pse+0x8c>
 698:	fe 2b       	or	r31, r30
 69a:	88 0f       	add	r24, r24
 69c:	91 1d       	adc	r25, r1
 69e:	96 95       	lsr	r25
 6a0:	87 95       	ror	r24
 6a2:	97 f9       	bld	r25, 7
 6a4:	08 95       	ret

000006a6 <__fp_inf>:
 6a6:	97 f9       	bld	r25, 7
 6a8:	9f 67       	ori	r25, 0x7F	; 127
 6aa:	80 e8       	ldi	r24, 0x80	; 128
 6ac:	70 e0       	ldi	r23, 0x00	; 0
 6ae:	60 e0       	ldi	r22, 0x00	; 0
 6b0:	08 95       	ret

000006b2 <__fp_nan>:
 6b2:	9f ef       	ldi	r25, 0xFF	; 255
 6b4:	80 ec       	ldi	r24, 0xC0	; 192
 6b6:	08 95       	ret

000006b8 <__fp_pscA>:
 6b8:	00 24       	eor	r0, r0
 6ba:	0a 94       	dec	r0
 6bc:	16 16       	cp	r1, r22
 6be:	17 06       	cpc	r1, r23
 6c0:	18 06       	cpc	r1, r24
 6c2:	09 06       	cpc	r0, r25
 6c4:	08 95       	ret

000006c6 <__fp_pscB>:
 6c6:	00 24       	eor	r0, r0
 6c8:	0a 94       	dec	r0
 6ca:	12 16       	cp	r1, r18
 6cc:	13 06       	cpc	r1, r19
 6ce:	14 06       	cpc	r1, r20
 6d0:	05 06       	cpc	r0, r21
 6d2:	08 95       	ret

000006d4 <__fp_round>:
 6d4:	09 2e       	mov	r0, r25
 6d6:	03 94       	inc	r0
 6d8:	00 0c       	add	r0, r0
 6da:	11 f4       	brne	.+4      	; 0x6e0 <__fp_round+0xc>
 6dc:	88 23       	and	r24, r24
 6de:	52 f0       	brmi	.+20     	; 0x6f4 <__fp_round+0x20>
 6e0:	bb 0f       	add	r27, r27
 6e2:	40 f4       	brcc	.+16     	; 0x6f4 <__fp_round+0x20>
 6e4:	bf 2b       	or	r27, r31
 6e6:	11 f4       	brne	.+4      	; 0x6ec <__fp_round+0x18>
 6e8:	60 ff       	sbrs	r22, 0
 6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <__fp_round+0x20>
 6ec:	6f 5f       	subi	r22, 0xFF	; 255
 6ee:	7f 4f       	sbci	r23, 0xFF	; 255
 6f0:	8f 4f       	sbci	r24, 0xFF	; 255
 6f2:	9f 4f       	sbci	r25, 0xFF	; 255
 6f4:	08 95       	ret

000006f6 <_exit>:
 6f6:	f8 94       	cli

000006f8 <__stop_program>:
 6f8:	ff cf       	rjmp	.-2      	; 0x6f8 <__stop_program>
