
Rover-bot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000582  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000582  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011cb  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d59  00000000  00000000  0000180f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000580  00000000  00000000  00002568  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00002ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000062e  00000000  00000000  00002b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ed  00000000  00000000  0000319e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000348b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e2       	ldi	r30, 0x2E	; 46
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 30       	cpi	r26, 0x00	; 0
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	84 d0       	rcall	.+264    	; 0x228 <main>
 120:	04 c2       	rjmp	.+1032   	; 0x52a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initWheels>:
int offtime = 10;
int r_ontime;
int l_ontime;

void initWheels() {
	DDRC |= 0x0F; 
 124:	87 b1       	in	r24, 0x07	; 7
 126:	8f 60       	ori	r24, 0x0F	; 15
 128:	87 b9       	out	0x07, r24	; 7
	DDRL |= 0x18;
 12a:	ea e0       	ldi	r30, 0x0A	; 10
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	80 81       	ld	r24, Z
 130:	88 61       	ori	r24, 0x18	; 24
 132:	80 83       	st	Z, r24
	int r_ontime = 0;

	int period = 1000; //total time

	// set up left timer
	ICR5 = period;
 134:	88 ee       	ldi	r24, 0xE8	; 232
 136:	93 e0       	ldi	r25, 0x03	; 3
 138:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
 13c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>

// setDutyCycle accepts a dutycycle (number between 0.0 and 1.0) and the wheel (L_WHEEL or R_WHEEL)
void setDutyCycle(float dutycycle, int wheel) {
	
	if (dutycycle == 0) {
		if (wheel == L_WHEEL) OCR5A = 0;
 140:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 144:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
		else if (wheel == R_WHEEL) OCR5B = 0;
 148:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 14c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
	// set up left timer
	ICR5 = period;
	setDutyCycle(0, L_WHEEL);
	setDutyCycle(0, R_WHEEL);

	TCCR5A = (1<<COM5A1) | (1<<COM5B1);
 150:	80 ea       	ldi	r24, 0xA0	; 160
 152:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
	TCCR5B |= (1 << CS51) | (1 <<WGM53);
 156:	e1 e2       	ldi	r30, 0x21	; 33
 158:	f1 e0       	ldi	r31, 0x01	; 1
 15a:	80 81       	ld	r24, Z
 15c:	82 61       	ori	r24, 0x12	; 18
 15e:	80 83       	st	Z, r24
	TIMSK5 = (1 << OCIE5A) | (1 << OCIE5B) | (1 << TOV5);
 160:	87 e0       	ldi	r24, 0x07	; 7
 162:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
	
	PORTC |= L_FORWARD;
 166:	43 9a       	sbi	0x08, 3	; 8
	PORTC |= R_FORWARD; 
 168:	41 9a       	sbi	0x08, 1	; 8
 16a:	08 95       	ret

0000016c <changeDirection>:
	
}

void changeDirection(int direction, int wheelNumber) {
	//_delay_ms(100);
	if (wheelNumber == L_WHEEL && direction == FORWARD) {
 16c:	61 30       	cpi	r22, 0x01	; 1
 16e:	71 05       	cpc	r23, r1
 170:	71 f4       	brne	.+28     	; 0x18e <changeDirection+0x22>
 172:	00 97       	sbiw	r24, 0x00	; 0
 174:	29 f4       	brne	.+10     	; 0x180 <changeDirection+0x14>
		PORTC &= 0xF3;
 176:	88 b1       	in	r24, 0x08	; 8
 178:	83 7f       	andi	r24, 0xF3	; 243
 17a:	88 b9       	out	0x08, r24	; 8
		PORTC |=  L_FORWARD;
 17c:	43 9a       	sbi	0x08, 3	; 8
 17e:	08 95       	ret
	} else if (wheelNumber == L_WHEEL && direction == BACKWARD) {
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	a1 f4       	brne	.+40     	; 0x1ac <changeDirection+0x40>
		PORTC &= 0xF3;
 184:	88 b1       	in	r24, 0x08	; 8
 186:	83 7f       	andi	r24, 0xF3	; 243
 188:	88 b9       	out	0x08, r24	; 8
		PORTC |=  L_BACKWARD;
 18a:	42 9a       	sbi	0x08, 2	; 8
 18c:	08 95       	ret
	} else if (wheelNumber == R_WHEEL && direction == FORWARD) {
 18e:	67 2b       	or	r22, r23
 190:	69 f4       	brne	.+26     	; 0x1ac <changeDirection+0x40>
 192:	00 97       	sbiw	r24, 0x00	; 0
 194:	29 f4       	brne	.+10     	; 0x1a0 <changeDirection+0x34>
		PORTC &= 0xFC;
 196:	88 b1       	in	r24, 0x08	; 8
 198:	8c 7f       	andi	r24, 0xFC	; 252
 19a:	88 b9       	out	0x08, r24	; 8
		PORTC |=  R_FORWARD;
 19c:	41 9a       	sbi	0x08, 1	; 8
 19e:	08 95       	ret
	} else if (wheelNumber == R_WHEEL && direction == BACKWARD) {
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	21 f4       	brne	.+8      	; 0x1ac <changeDirection+0x40>
		PORTC &= 0xFC;
 1a4:	88 b1       	in	r24, 0x08	; 8
 1a6:	8c 7f       	andi	r24, 0xFC	; 252
 1a8:	88 b9       	out	0x08, r24	; 8
		PORTC |=  R_BACKWARD;
 1aa:	40 9a       	sbi	0x08, 0	; 8
 1ac:	08 95       	ret

000001ae <setDutyCycle>:
	}

}

// setDutyCycle accepts a dutycycle (number between 0.0 and 1.0) and the wheel (L_WHEEL or R_WHEEL)
void setDutyCycle(float dutycycle, int wheel) {
 1ae:	cf 92       	push	r12
 1b0:	df 92       	push	r13
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	6b 01       	movw	r12, r22
 1bc:	7c 01       	movw	r14, r24
 1be:	ea 01       	movw	r28, r20
	
	if (dutycycle == 0) {
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	a9 01       	movw	r20, r18
 1c6:	a4 d0       	rcall	.+328    	; 0x310 <__cmpsf2>
 1c8:	81 11       	cpse	r24, r1
 1ca:	0f c0       	rjmp	.+30     	; 0x1ea <setDutyCycle+0x3c>
		if (wheel == L_WHEEL) OCR5A = 0;
 1cc:	c1 30       	cpi	r28, 0x01	; 1
 1ce:	d1 05       	cpc	r29, r1
 1d0:	29 f4       	brne	.+10     	; 0x1dc <setDutyCycle+0x2e>
 1d2:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 1d6:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 1da:	1f c0       	rjmp	.+62     	; 0x21a <setDutyCycle+0x6c>
		else if (wheel == R_WHEEL) OCR5B = 0;
 1dc:	cd 2b       	or	r28, r29
 1de:	e9 f4       	brne	.+58     	; 0x21a <setDutyCycle+0x6c>
 1e0:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 1e4:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 1e8:	18 c0       	rjmp	.+48     	; 0x21a <setDutyCycle+0x6c>
	} else {
		int ontime = ((int)(dutycycle * 250.0) + 500) ;
 1ea:	20 e0       	ldi	r18, 0x00	; 0
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	4a e7       	ldi	r20, 0x7A	; 122
 1f0:	53 e4       	ldi	r21, 0x43	; 67
 1f2:	c7 01       	movw	r24, r14
 1f4:	b6 01       	movw	r22, r12
 1f6:	0e d1       	rcall	.+540    	; 0x414 <__mulsf3>
 1f8:	8f d0       	rcall	.+286    	; 0x318 <__fixsfsi>
 1fa:	6c 50       	subi	r22, 0x0C	; 12
 1fc:	7e 4f       	sbci	r23, 0xFE	; 254
		
		if (wheel == L_WHEEL) OCR5A = ontime;
 1fe:	c1 30       	cpi	r28, 0x01	; 1
 200:	d1 05       	cpc	r29, r1
 202:	29 f4       	brne	.+10     	; 0x20e <setDutyCycle+0x60>
 204:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 208:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 20c:	06 c0       	rjmp	.+12     	; 0x21a <setDutyCycle+0x6c>
		else if (wheel == R_WHEEL) OCR5B = ontime;
 20e:	cd 2b       	or	r28, r29
 210:	21 f4       	brne	.+8      	; 0x21a <setDutyCycle+0x6c>
 212:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 216:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
	}
}
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	ff 90       	pop	r15
 220:	ef 90       	pop	r14
 222:	df 90       	pop	r13
 224:	cf 90       	pop	r12
 226:	08 95       	ret

00000228 <main>:


int main(void)
{
//PORTB |= 0x80;
initWheels();
 228:	7d df       	rcall	.-262    	; 0x124 <initWheels>
	while (1)
	{
		//changeDirection(FORWARD, R_WHEEL);
		//PORTL = 0x10;
		
		setDutyCycle(1, L_WHEEL);
 22a:	41 e0       	ldi	r20, 0x01	; 1
 22c:	50 e0       	ldi	r21, 0x00	; 0
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	80 e8       	ldi	r24, 0x80	; 128
 234:	9f e3       	ldi	r25, 0x3F	; 63
 236:	bb df       	rcall	.-138    	; 0x1ae <setDutyCycle>
		setDutyCycle(1, R_WHEEL);
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	80 e8       	ldi	r24, 0x80	; 128
 242:	9f e3       	ldi	r25, 0x3F	; 63
 244:	b4 df       	rcall	.-152    	; 0x1ae <setDutyCycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 246:	24 e5       	ldi	r18, 0x54	; 84
 248:	35 e8       	ldi	r19, 0x85	; 133
 24a:	85 e4       	ldi	r24, 0x45	; 69
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	21 50       	subi	r18, 0x01	; 1
 250:	30 40       	sbci	r19, 0x00	; 0
 252:	80 40       	sbci	r24, 0x00	; 0
 254:	90 40       	sbci	r25, 0x00	; 0
 256:	d9 f7       	brne	.-10     	; 0x24e <main+0x26>
 258:	00 c0       	rjmp	.+0      	; 0x25a <main+0x32>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <main+0x34>
 25c:	00 00       	nop
		_delay_ms(8000);
		
		setDutyCycle(0, L_WHEEL);
 25e:	41 e0       	ldi	r20, 0x01	; 1
 260:	50 e0       	ldi	r21, 0x00	; 0
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	cb 01       	movw	r24, r22
 268:	a2 df       	rcall	.-188    	; 0x1ae <setDutyCycle>
		setDutyCycle(0, R_WHEEL);
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	50 e0       	ldi	r21, 0x00	; 0
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	cb 01       	movw	r24, r22
 274:	9c df       	rcall	.-200    	; 0x1ae <setDutyCycle>
 276:	2f ef       	ldi	r18, 0xFF	; 255
 278:	3b e7       	ldi	r19, 0x7B	; 123
 27a:	82 e9       	ldi	r24, 0x92	; 146
 27c:	21 50       	subi	r18, 0x01	; 1
 27e:	30 40       	sbci	r19, 0x00	; 0
 280:	80 40       	sbci	r24, 0x00	; 0
 282:	e1 f7       	brne	.-8      	; 0x27c <main+0x54>
 284:	00 c0       	rjmp	.+0      	; 0x286 <main+0x5e>
		_delay_ms(3000);
		
		changeDirection(BACKWARD, R_WHEEL);
 286:	00 00       	nop
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
		changeDirection(BACKWARD, L_WHEEL);
 290:	6d df       	rcall	.-294    	; 0x16c <changeDirection>
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	70 e0       	ldi	r23, 0x00	; 0
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
		
		setDutyCycle(1, L_WHEEL);
 29a:	68 df       	rcall	.-304    	; 0x16c <changeDirection>
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	50 e0       	ldi	r21, 0x00	; 0
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	70 e0       	ldi	r23, 0x00	; 0
 2a4:	80 e8       	ldi	r24, 0x80	; 128
 2a6:	9f e3       	ldi	r25, 0x3F	; 63
		setDutyCycle(1, R_WHEEL);
 2a8:	82 df       	rcall	.-252    	; 0x1ae <setDutyCycle>
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	50 e0       	ldi	r21, 0x00	; 0
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	80 e8       	ldi	r24, 0x80	; 128
 2b4:	9f e3       	ldi	r25, 0x3F	; 63
 2b6:	7b df       	rcall	.-266    	; 0x1ae <setDutyCycle>
 2b8:	94 e5       	ldi	r25, 0x54	; 84
 2ba:	25 e8       	ldi	r18, 0x85	; 133
 2bc:	35 e4       	ldi	r19, 0x45	; 69
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	91 50       	subi	r25, 0x01	; 1
 2c2:	20 40       	sbci	r18, 0x00	; 0
 2c4:	30 40       	sbci	r19, 0x00	; 0
 2c6:	80 40       	sbci	r24, 0x00	; 0
 2c8:	d9 f7       	brne	.-10     	; 0x2c0 <main+0x98>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <main+0xa4>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <main+0xa6>
		_delay_ms(8000);
		
		setDutyCycle(0, L_WHEEL);
 2ce:	00 00       	nop
 2d0:	41 e0       	ldi	r20, 0x01	; 1
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	cb 01       	movw	r24, r22
		setDutyCycle(0, R_WHEEL);
 2da:	69 df       	rcall	.-302    	; 0x1ae <setDutyCycle>
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	cb 01       	movw	r24, r22
 2e6:	63 df       	rcall	.-314    	; 0x1ae <setDutyCycle>
 2e8:	9f ef       	ldi	r25, 0xFF	; 255
 2ea:	2b e7       	ldi	r18, 0x7B	; 123
 2ec:	32 e9       	ldi	r19, 0x92	; 146
 2ee:	91 50       	subi	r25, 0x01	; 1
 2f0:	20 40       	sbci	r18, 0x00	; 0
 2f2:	30 40       	sbci	r19, 0x00	; 0
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <main+0xc6>
		_delay_ms(3000);
		
		changeDirection(FORWARD, R_WHEEL);
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <main+0xd0>
 2f8:	00 00       	nop
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
		changeDirection(FORWARD, L_WHEEL);
 302:	34 df       	rcall	.-408    	; 0x16c <changeDirection>
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	2f df       	rcall	.-418    	; 0x16c <changeDirection>
 30e:	8d cf       	rjmp	.-230    	; 0x22a <main+0x2>

00000310 <__cmpsf2>:
 310:	34 d0       	rcall	.+104    	; 0x37a <__fp_cmp>
 312:	08 f4       	brcc	.+2      	; 0x316 <__cmpsf2+0x6>
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	08 95       	ret

00000318 <__fixsfsi>:
 318:	04 d0       	rcall	.+8      	; 0x322 <__fixunssfsi>
 31a:	68 94       	set
 31c:	b1 11       	cpse	r27, r1
 31e:	74 c0       	rjmp	.+232    	; 0x408 <__fp_szero>
 320:	08 95       	ret

00000322 <__fixunssfsi>:
 322:	57 d0       	rcall	.+174    	; 0x3d2 <__fp_splitA>
 324:	88 f0       	brcs	.+34     	; 0x348 <__fixunssfsi+0x26>
 326:	9f 57       	subi	r25, 0x7F	; 127
 328:	90 f0       	brcs	.+36     	; 0x34e <__fixunssfsi+0x2c>
 32a:	b9 2f       	mov	r27, r25
 32c:	99 27       	eor	r25, r25
 32e:	b7 51       	subi	r27, 0x17	; 23
 330:	a0 f0       	brcs	.+40     	; 0x35a <__fixunssfsi+0x38>
 332:	d1 f0       	breq	.+52     	; 0x368 <__fixunssfsi+0x46>
 334:	66 0f       	add	r22, r22
 336:	77 1f       	adc	r23, r23
 338:	88 1f       	adc	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	1a f0       	brmi	.+6      	; 0x344 <__fixunssfsi+0x22>
 33e:	ba 95       	dec	r27
 340:	c9 f7       	brne	.-14     	; 0x334 <__fixunssfsi+0x12>
 342:	12 c0       	rjmp	.+36     	; 0x368 <__fixunssfsi+0x46>
 344:	b1 30       	cpi	r27, 0x01	; 1
 346:	81 f0       	breq	.+32     	; 0x368 <__fixunssfsi+0x46>
 348:	5e d0       	rcall	.+188    	; 0x406 <__fp_zero>
 34a:	b1 e0       	ldi	r27, 0x01	; 1
 34c:	08 95       	ret
 34e:	5b c0       	rjmp	.+182    	; 0x406 <__fp_zero>
 350:	67 2f       	mov	r22, r23
 352:	78 2f       	mov	r23, r24
 354:	88 27       	eor	r24, r24
 356:	b8 5f       	subi	r27, 0xF8	; 248
 358:	39 f0       	breq	.+14     	; 0x368 <__fixunssfsi+0x46>
 35a:	b9 3f       	cpi	r27, 0xF9	; 249
 35c:	cc f3       	brlt	.-14     	; 0x350 <__fixunssfsi+0x2e>
 35e:	86 95       	lsr	r24
 360:	77 95       	ror	r23
 362:	67 95       	ror	r22
 364:	b3 95       	inc	r27
 366:	d9 f7       	brne	.-10     	; 0x35e <__fixunssfsi+0x3c>
 368:	3e f4       	brtc	.+14     	; 0x378 <__fixunssfsi+0x56>
 36a:	90 95       	com	r25
 36c:	80 95       	com	r24
 36e:	70 95       	com	r23
 370:	61 95       	neg	r22
 372:	7f 4f       	sbci	r23, 0xFF	; 255
 374:	8f 4f       	sbci	r24, 0xFF	; 255
 376:	9f 4f       	sbci	r25, 0xFF	; 255
 378:	08 95       	ret

0000037a <__fp_cmp>:
 37a:	99 0f       	add	r25, r25
 37c:	00 08       	sbc	r0, r0
 37e:	55 0f       	add	r21, r21
 380:	aa 0b       	sbc	r26, r26
 382:	e0 e8       	ldi	r30, 0x80	; 128
 384:	fe ef       	ldi	r31, 0xFE	; 254
 386:	16 16       	cp	r1, r22
 388:	17 06       	cpc	r1, r23
 38a:	e8 07       	cpc	r30, r24
 38c:	f9 07       	cpc	r31, r25
 38e:	c0 f0       	brcs	.+48     	; 0x3c0 <__fp_cmp+0x46>
 390:	12 16       	cp	r1, r18
 392:	13 06       	cpc	r1, r19
 394:	e4 07       	cpc	r30, r20
 396:	f5 07       	cpc	r31, r21
 398:	98 f0       	brcs	.+38     	; 0x3c0 <__fp_cmp+0x46>
 39a:	62 1b       	sub	r22, r18
 39c:	73 0b       	sbc	r23, r19
 39e:	84 0b       	sbc	r24, r20
 3a0:	95 0b       	sbc	r25, r21
 3a2:	39 f4       	brne	.+14     	; 0x3b2 <__fp_cmp+0x38>
 3a4:	0a 26       	eor	r0, r26
 3a6:	61 f0       	breq	.+24     	; 0x3c0 <__fp_cmp+0x46>
 3a8:	23 2b       	or	r18, r19
 3aa:	24 2b       	or	r18, r20
 3ac:	25 2b       	or	r18, r21
 3ae:	21 f4       	brne	.+8      	; 0x3b8 <__fp_cmp+0x3e>
 3b0:	08 95       	ret
 3b2:	0a 26       	eor	r0, r26
 3b4:	09 f4       	brne	.+2      	; 0x3b8 <__fp_cmp+0x3e>
 3b6:	a1 40       	sbci	r26, 0x01	; 1
 3b8:	a6 95       	lsr	r26
 3ba:	8f ef       	ldi	r24, 0xFF	; 255
 3bc:	81 1d       	adc	r24, r1
 3be:	81 1d       	adc	r24, r1
 3c0:	08 95       	ret

000003c2 <__fp_split3>:
 3c2:	57 fd       	sbrc	r21, 7
 3c4:	90 58       	subi	r25, 0x80	; 128
 3c6:	44 0f       	add	r20, r20
 3c8:	55 1f       	adc	r21, r21
 3ca:	59 f0       	breq	.+22     	; 0x3e2 <__fp_splitA+0x10>
 3cc:	5f 3f       	cpi	r21, 0xFF	; 255
 3ce:	71 f0       	breq	.+28     	; 0x3ec <__fp_splitA+0x1a>
 3d0:	47 95       	ror	r20

000003d2 <__fp_splitA>:
 3d2:	88 0f       	add	r24, r24
 3d4:	97 fb       	bst	r25, 7
 3d6:	99 1f       	adc	r25, r25
 3d8:	61 f0       	breq	.+24     	; 0x3f2 <__fp_splitA+0x20>
 3da:	9f 3f       	cpi	r25, 0xFF	; 255
 3dc:	79 f0       	breq	.+30     	; 0x3fc <__fp_splitA+0x2a>
 3de:	87 95       	ror	r24
 3e0:	08 95       	ret
 3e2:	12 16       	cp	r1, r18
 3e4:	13 06       	cpc	r1, r19
 3e6:	14 06       	cpc	r1, r20
 3e8:	55 1f       	adc	r21, r21
 3ea:	f2 cf       	rjmp	.-28     	; 0x3d0 <__fp_split3+0xe>
 3ec:	46 95       	lsr	r20
 3ee:	f1 df       	rcall	.-30     	; 0x3d2 <__fp_splitA>
 3f0:	08 c0       	rjmp	.+16     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f2:	16 16       	cp	r1, r22
 3f4:	17 06       	cpc	r1, r23
 3f6:	18 06       	cpc	r1, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	f1 cf       	rjmp	.-30     	; 0x3de <__fp_splitA+0xc>
 3fc:	86 95       	lsr	r24
 3fe:	71 05       	cpc	r23, r1
 400:	61 05       	cpc	r22, r1
 402:	08 94       	sec
 404:	08 95       	ret

00000406 <__fp_zero>:
 406:	e8 94       	clt

00000408 <__fp_szero>:
 408:	bb 27       	eor	r27, r27
 40a:	66 27       	eor	r22, r22
 40c:	77 27       	eor	r23, r23
 40e:	cb 01       	movw	r24, r22
 410:	97 f9       	bld	r25, 7
 412:	08 95       	ret

00000414 <__mulsf3>:
 414:	0b d0       	rcall	.+22     	; 0x42c <__mulsf3x>
 416:	78 c0       	rjmp	.+240    	; 0x508 <__fp_round>
 418:	69 d0       	rcall	.+210    	; 0x4ec <__fp_pscA>
 41a:	28 f0       	brcs	.+10     	; 0x426 <__mulsf3+0x12>
 41c:	6e d0       	rcall	.+220    	; 0x4fa <__fp_pscB>
 41e:	18 f0       	brcs	.+6      	; 0x426 <__mulsf3+0x12>
 420:	95 23       	and	r25, r21
 422:	09 f0       	breq	.+2      	; 0x426 <__mulsf3+0x12>
 424:	5a c0       	rjmp	.+180    	; 0x4da <__fp_inf>
 426:	5f c0       	rjmp	.+190    	; 0x4e6 <__fp_nan>
 428:	11 24       	eor	r1, r1
 42a:	ee cf       	rjmp	.-36     	; 0x408 <__fp_szero>

0000042c <__mulsf3x>:
 42c:	ca df       	rcall	.-108    	; 0x3c2 <__fp_split3>
 42e:	a0 f3       	brcs	.-24     	; 0x418 <__mulsf3+0x4>

00000430 <__mulsf3_pse>:
 430:	95 9f       	mul	r25, r21
 432:	d1 f3       	breq	.-12     	; 0x428 <__mulsf3+0x14>
 434:	95 0f       	add	r25, r21
 436:	50 e0       	ldi	r21, 0x00	; 0
 438:	55 1f       	adc	r21, r21
 43a:	62 9f       	mul	r22, r18
 43c:	f0 01       	movw	r30, r0
 43e:	72 9f       	mul	r23, r18
 440:	bb 27       	eor	r27, r27
 442:	f0 0d       	add	r31, r0
 444:	b1 1d       	adc	r27, r1
 446:	63 9f       	mul	r22, r19
 448:	aa 27       	eor	r26, r26
 44a:	f0 0d       	add	r31, r0
 44c:	b1 1d       	adc	r27, r1
 44e:	aa 1f       	adc	r26, r26
 450:	64 9f       	mul	r22, r20
 452:	66 27       	eor	r22, r22
 454:	b0 0d       	add	r27, r0
 456:	a1 1d       	adc	r26, r1
 458:	66 1f       	adc	r22, r22
 45a:	82 9f       	mul	r24, r18
 45c:	22 27       	eor	r18, r18
 45e:	b0 0d       	add	r27, r0
 460:	a1 1d       	adc	r26, r1
 462:	62 1f       	adc	r22, r18
 464:	73 9f       	mul	r23, r19
 466:	b0 0d       	add	r27, r0
 468:	a1 1d       	adc	r26, r1
 46a:	62 1f       	adc	r22, r18
 46c:	83 9f       	mul	r24, r19
 46e:	a0 0d       	add	r26, r0
 470:	61 1d       	adc	r22, r1
 472:	22 1f       	adc	r18, r18
 474:	74 9f       	mul	r23, r20
 476:	33 27       	eor	r19, r19
 478:	a0 0d       	add	r26, r0
 47a:	61 1d       	adc	r22, r1
 47c:	23 1f       	adc	r18, r19
 47e:	84 9f       	mul	r24, r20
 480:	60 0d       	add	r22, r0
 482:	21 1d       	adc	r18, r1
 484:	82 2f       	mov	r24, r18
 486:	76 2f       	mov	r23, r22
 488:	6a 2f       	mov	r22, r26
 48a:	11 24       	eor	r1, r1
 48c:	9f 57       	subi	r25, 0x7F	; 127
 48e:	50 40       	sbci	r21, 0x00	; 0
 490:	8a f0       	brmi	.+34     	; 0x4b4 <__mulsf3_pse+0x84>
 492:	e1 f0       	breq	.+56     	; 0x4cc <__mulsf3_pse+0x9c>
 494:	88 23       	and	r24, r24
 496:	4a f0       	brmi	.+18     	; 0x4aa <__mulsf3_pse+0x7a>
 498:	ee 0f       	add	r30, r30
 49a:	ff 1f       	adc	r31, r31
 49c:	bb 1f       	adc	r27, r27
 49e:	66 1f       	adc	r22, r22
 4a0:	77 1f       	adc	r23, r23
 4a2:	88 1f       	adc	r24, r24
 4a4:	91 50       	subi	r25, 0x01	; 1
 4a6:	50 40       	sbci	r21, 0x00	; 0
 4a8:	a9 f7       	brne	.-22     	; 0x494 <__mulsf3_pse+0x64>
 4aa:	9e 3f       	cpi	r25, 0xFE	; 254
 4ac:	51 05       	cpc	r21, r1
 4ae:	70 f0       	brcs	.+28     	; 0x4cc <__mulsf3_pse+0x9c>
 4b0:	14 c0       	rjmp	.+40     	; 0x4da <__fp_inf>
 4b2:	aa cf       	rjmp	.-172    	; 0x408 <__fp_szero>
 4b4:	5f 3f       	cpi	r21, 0xFF	; 255
 4b6:	ec f3       	brlt	.-6      	; 0x4b2 <__mulsf3_pse+0x82>
 4b8:	98 3e       	cpi	r25, 0xE8	; 232
 4ba:	dc f3       	brlt	.-10     	; 0x4b2 <__mulsf3_pse+0x82>
 4bc:	86 95       	lsr	r24
 4be:	77 95       	ror	r23
 4c0:	67 95       	ror	r22
 4c2:	b7 95       	ror	r27
 4c4:	f7 95       	ror	r31
 4c6:	e7 95       	ror	r30
 4c8:	9f 5f       	subi	r25, 0xFF	; 255
 4ca:	c1 f7       	brne	.-16     	; 0x4bc <__mulsf3_pse+0x8c>
 4cc:	fe 2b       	or	r31, r30
 4ce:	88 0f       	add	r24, r24
 4d0:	91 1d       	adc	r25, r1
 4d2:	96 95       	lsr	r25
 4d4:	87 95       	ror	r24
 4d6:	97 f9       	bld	r25, 7
 4d8:	08 95       	ret

000004da <__fp_inf>:
 4da:	97 f9       	bld	r25, 7
 4dc:	9f 67       	ori	r25, 0x7F	; 127
 4de:	80 e8       	ldi	r24, 0x80	; 128
 4e0:	70 e0       	ldi	r23, 0x00	; 0
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	08 95       	ret

000004e6 <__fp_nan>:
 4e6:	9f ef       	ldi	r25, 0xFF	; 255
 4e8:	80 ec       	ldi	r24, 0xC0	; 192
 4ea:	08 95       	ret

000004ec <__fp_pscA>:
 4ec:	00 24       	eor	r0, r0
 4ee:	0a 94       	dec	r0
 4f0:	16 16       	cp	r1, r22
 4f2:	17 06       	cpc	r1, r23
 4f4:	18 06       	cpc	r1, r24
 4f6:	09 06       	cpc	r0, r25
 4f8:	08 95       	ret

000004fa <__fp_pscB>:
 4fa:	00 24       	eor	r0, r0
 4fc:	0a 94       	dec	r0
 4fe:	12 16       	cp	r1, r18
 500:	13 06       	cpc	r1, r19
 502:	14 06       	cpc	r1, r20
 504:	05 06       	cpc	r0, r21
 506:	08 95       	ret

00000508 <__fp_round>:
 508:	09 2e       	mov	r0, r25
 50a:	03 94       	inc	r0
 50c:	00 0c       	add	r0, r0
 50e:	11 f4       	brne	.+4      	; 0x514 <__fp_round+0xc>
 510:	88 23       	and	r24, r24
 512:	52 f0       	brmi	.+20     	; 0x528 <__fp_round+0x20>
 514:	bb 0f       	add	r27, r27
 516:	40 f4       	brcc	.+16     	; 0x528 <__fp_round+0x20>
 518:	bf 2b       	or	r27, r31
 51a:	11 f4       	brne	.+4      	; 0x520 <__fp_round+0x18>
 51c:	60 ff       	sbrs	r22, 0
 51e:	04 c0       	rjmp	.+8      	; 0x528 <__fp_round+0x20>
 520:	6f 5f       	subi	r22, 0xFF	; 255
 522:	7f 4f       	sbci	r23, 0xFF	; 255
 524:	8f 4f       	sbci	r24, 0xFF	; 255
 526:	9f 4f       	sbci	r25, 0xFF	; 255
 528:	08 95       	ret

0000052a <_exit>:
 52a:	f8 94       	cli

0000052c <__stop_program>:
 52c:	ff cf       	rjmp	.-2      	; 0x52c <__stop_program>
