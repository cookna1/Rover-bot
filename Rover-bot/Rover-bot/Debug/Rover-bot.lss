
Rover-bot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  00000b3c  00000bd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000857  00800210  00800210  00000be0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000c50  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e50  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001185  00000000  00000000  00002c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001038  00000000  00000000  00003dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b0  00000000  00000000  00004df8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000972  00000000  00000000  000051a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b8a  00000000  00000000  00005b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000066a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	a9 c2       	rjmp	.+1362   	; 0x57c <__vector_10>
  2a:	00 00       	nop
  2c:	05 c1       	rjmp	.+522    	; 0x238 <__vector_11>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	47 c1       	rjmp	.+654    	; 0x2c4 <__vector_13>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	c7 c4       	rjmp	.+2446   	; 0x9e4 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e3       	ldi	r30, 0x3C	; 60
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 31       	cpi	r26, 0x10	; 16
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	2a e0       	ldi	r18, 0x0A	; 10
 110:	a0 e1       	ldi	r26, 0x10	; 16
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a7 36       	cpi	r26, 0x67	; 103
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	84 d2       	rcall	.+1288   	; 0x628 <main>
 120:	0b c5       	rjmp	.+2582   	; 0xb38 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <x_yield>:
 124:	2f 92       	push	r2
 126:	3f 92       	push	r3
 128:	4f 92       	push	r4
 12a:	5f 92       	push	r5
 12c:	6f 92       	push	r6
 12e:	7f 92       	push	r7
 130:	8f 92       	push	r8
 132:	9f 92       	push	r9
 134:	af 92       	push	r10
 136:	bf 92       	push	r11
 138:	cf 92       	push	r12
 13a:	df 92       	push	r13
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <x_thread_id>
 14c:	30 91 66 0a 	lds	r19, 0x0A66	; 0x800a66 <x_thread_mask>
 150:	f8 94       	cli
 152:	ed b6       	in	r14, 0x3d	; 61
 154:	fe b6       	in	r15, 0x3e	; 62
 156:	78 94       	sei
 158:	e4 e3       	ldi	r30, 0x34	; 52
 15a:	f2 e0       	ldi	r31, 0x02	; 2
 15c:	22 0f       	add	r18, r18
 15e:	c0 e0       	ldi	r28, 0x00	; 0
 160:	d2 e0       	ldi	r29, 0x02	; 2
 162:	c2 0f       	add	r28, r18
 164:	d1 1d       	adc	r29, r1
 166:	19 91       	ld	r17, Y+
 168:	d8 81       	ld	r29, Y
 16a:	c1 2f       	mov	r28, r17
 16c:	18 81       	ld	r17, Y
 16e:	1a 3a       	cpi	r17, 0xAA	; 170
 170:	21 f0       	breq	.+8      	; 0x17a <x_yield+0x56>
 172:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <x_thread_id>
 176:	91 2d       	mov	r25, r1
 178:	81 c4       	rjmp	.+2306   	; 0xa7c <x_stack_overflow>
 17a:	22 0f       	add	r18, r18
 17c:	e2 0f       	add	r30, r18
 17e:	f1 1d       	adc	r31, r1
 180:	e1 92       	st	Z+, r14
 182:	f0 82       	st	Z, r15

00000184 <x_schedule>:
 184:	20 91 65 0a 	lds	r18, 0x0A65	; 0x800a65 <x_disable_status>
 188:	30 91 33 02 	lds	r19, 0x0233	; 0x800233 <x_delay_status>
 18c:	40 91 54 02 	lds	r20, 0x0254	; 0x800254 <x_suspend_status>
 190:	23 2b       	or	r18, r19
 192:	24 2b       	or	r18, r20
 194:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <x_thread_id>
 198:	40 91 66 0a 	lds	r20, 0x0A66	; 0x800a66 <x_thread_mask>
 19c:	68 e0       	ldi	r22, 0x08	; 8
 19e:	88 94       	clc
 1a0:	33 95       	inc	r19
 1a2:	37 70       	andi	r19, 0x07	; 7
 1a4:	44 1f       	adc	r20, r20
 1a6:	41 1d       	adc	r20, r1
 1a8:	74 2f       	mov	r23, r20
 1aa:	42 23       	and	r20, r18
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <restore>
 1ae:	6a 95       	dec	r22
 1b0:	b9 f7       	brne	.-18     	; 0x1a0 <x_schedule+0x1c>
 1b2:	e8 cf       	rjmp	.-48     	; 0x184 <x_schedule>

000001b4 <restore>:
 1b4:	30 93 32 02 	sts	0x0232, r19	; 0x800232 <x_thread_id>
 1b8:	70 93 66 0a 	sts	0x0A66, r23	; 0x800a66 <x_thread_mask>
 1bc:	e4 e3       	ldi	r30, 0x34	; 52
 1be:	f2 e0       	ldi	r31, 0x02	; 2
 1c0:	33 0f       	add	r19, r19
 1c2:	33 0f       	add	r19, r19
 1c4:	e3 0f       	add	r30, r19
 1c6:	f1 1d       	adc	r31, r1
 1c8:	21 91       	ld	r18, Z+
 1ca:	30 81       	ld	r19, Z
 1cc:	f8 94       	cli
 1ce:	2d bf       	out	0x3d, r18	; 61
 1d0:	3e bf       	out	0x3e, r19	; 62
 1d2:	78 94       	sei
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	ff 90       	pop	r15
 1de:	ef 90       	pop	r14
 1e0:	df 90       	pop	r13
 1e2:	cf 90       	pop	r12
 1e4:	bf 90       	pop	r11
 1e6:	af 90       	pop	r10
 1e8:	9f 90       	pop	r9
 1ea:	8f 90       	pop	r8
 1ec:	7f 90       	pop	r7
 1ee:	6f 90       	pop	r6
 1f0:	5f 90       	pop	r5
 1f2:	85 2d       	mov	r24, r5
 1f4:	4f 90       	pop	r4
 1f6:	94 2d       	mov	r25, r4
 1f8:	3f 90       	pop	r3
 1fa:	63 2d       	mov	r22, r3
 1fc:	2f 90       	pop	r2
 1fe:	72 2d       	mov	r23, r2
 200:	08 95       	ret

00000202 <bit2mask8>:
 202:	ee e0       	ldi	r30, 0x0E	; 14
 204:	f2 e0       	ldi	r31, 0x02	; 2
 206:	e8 0f       	add	r30, r24
 208:	f1 1d       	adc	r31, r1
 20a:	84 91       	lpm	r24, Z
 20c:	08 95       	ret

0000020e <bitmask8_table>:
 20e:	01 02       	muls	r16, r17
 210:	04 08       	sbc	r0, r4
 212:	10 20       	and	r1, r0
 214:	40 80       	ld	r4, Z

00000216 <initIRDet>:

void irControl() {
	
}

void disableIRDet() {
 216:	e7 e0       	ldi	r30, 0x07	; 7
 218:	f1 e0       	ldi	r31, 0x01	; 1
 21a:	80 81       	ld	r24, Z
 21c:	8c 7f       	andi	r24, 0xFC	; 252
 21e:	80 83       	st	Z, r24
 220:	80 b3       	in	r24, 0x10	; 16
 222:	83 60       	ori	r24, 0x03	; 3
 224:	80 bb       	out	0x10, r24	; 16
 226:	84 e0       	ldi	r24, 0x04	; 4
 228:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x700068>
 22c:	83 e0       	ldi	r24, 0x03	; 3
 22e:	80 bb       	out	0x10, r24	; 16
 230:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x70006d>
 234:	08 95       	ret

00000236 <irControl>:
 236:	08 95       	ret

00000238 <__vector_11>:
	
}

ISR(PCINT2_vect) {
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	0b b6       	in	r0, 0x3b	; 59
 244:	0f 92       	push	r0
 246:	2f 93       	push	r18
 248:	3f 93       	push	r19
 24a:	4f 93       	push	r20
 24c:	5f 93       	push	r21
 24e:	6f 93       	push	r22
 250:	7f 93       	push	r23
 252:	8f 93       	push	r24
 254:	9f 93       	push	r25
 256:	af 93       	push	r26
 258:	bf 93       	push	r27
 25a:	ef 93       	push	r30
 25c:	ff 93       	push	r31
	
	if(PINK & (1 << PK0) && !(PINK & (1 << PK1))){ //LEFT SENSOR
 25e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 262:	80 ff       	sbrs	r24, 0
 264:	08 c0       	rjmp	.+16     	; 0x276 <__vector_11+0x3e>
 266:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 26a:	81 fd       	sbrc	r24, 1
 26c:	04 c0       	rjmp	.+8      	; 0x276 <__vector_11+0x3e>
		//PORTF |= (1 << PF0);  //TODO This part should change based on what needs to be done if left sensor get high
		//_delay_ms(100);
		//PORTF &= 1;
		turn(-5);
 26e:	8b ef       	ldi	r24, 0xFB	; 251
 270:	9f ef       	ldi	r25, 0xFF	; 255
 272:	08 d1       	rcall	.+528    	; 0x484 <turn>
 274:	14 c0       	rjmp	.+40     	; 0x29e <__vector_11+0x66>
	}
	else if(PINK & (1 << PK1) && !(PINK & (1 << PK0))) { //RIGHT SENSOR
 276:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 27a:	81 ff       	sbrs	r24, 1
 27c:	08 c0       	rjmp	.+16     	; 0x28e <__vector_11+0x56>
 27e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 282:	80 fd       	sbrc	r24, 0
 284:	04 c0       	rjmp	.+8      	; 0x28e <__vector_11+0x56>
		//PORTF |= (1 << PF1); //TODO This part should change based on what needs to be done if right sensor get high
		//_delay_ms(100);
		//PORTF &= 2;
		turn(5);
 286:	85 e0       	ldi	r24, 0x05	; 5
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	fc d0       	rcall	.+504    	; 0x484 <turn>
 28c:	08 c0       	rjmp	.+16     	; 0x29e <__vector_11+0x66>
	} else if (PINK & (1 << PK0) && (PINK & (1 << PK1))) {// both sensors
 28e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 292:	80 ff       	sbrs	r24, 0
 294:	04 c0       	rjmp	.+8      	; 0x29e <__vector_11+0x66>
 296:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
		stop();
 29a:	81 fd       	sbrc	r24, 1
 29c:	b2 d0       	rcall	.+356    	; 0x402 <stop>
	}
 29e:	ff 91       	pop	r31
 2a0:	ef 91       	pop	r30
 2a2:	bf 91       	pop	r27
 2a4:	af 91       	pop	r26
 2a6:	9f 91       	pop	r25
 2a8:	8f 91       	pop	r24
 2aa:	7f 91       	pop	r23
 2ac:	6f 91       	pop	r22
 2ae:	5f 91       	pop	r21
 2b0:	4f 91       	pop	r20
 2b2:	3f 91       	pop	r19
 2b4:	2f 91       	pop	r18
 2b6:	0f 90       	pop	r0
 2b8:	0b be       	out	0x3b, r0	; 59
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

000002c4 <__vector_13>:
	TIMSK2 |= (1 << OCIE2A);
	
	OCR2A = tickTime;
}

ISR(TIMER2_COMPA_vect) {
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	8f 93       	push	r24
 2d0:	9f 93       	push	r25
 2d2:	af 93       	push	r26
 2d4:	bf 93       	push	r27
	timeCounter++;
 2d6:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <timeCounter>
 2da:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <timeCounter+0x1>
 2de:	a0 91 1c 02 	lds	r26, 0x021C	; 0x80021c <timeCounter+0x2>
 2e2:	b0 91 1d 02 	lds	r27, 0x021D	; 0x80021d <timeCounter+0x3>
 2e6:	01 96       	adiw	r24, 0x01	; 1
 2e8:	a1 1d       	adc	r26, r1
 2ea:	b1 1d       	adc	r27, r1
 2ec:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <timeCounter>
 2f0:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <timeCounter+0x1>
 2f4:	a0 93 1c 02 	sts	0x021C, r26	; 0x80021c <timeCounter+0x2>
 2f8:	b0 93 1d 02 	sts	0x021D, r27	; 0x80021d <timeCounter+0x3>
	/*if (timeCounter % 1000 == 0)*/ //PORTB ^= 0x80;
 2fc:	bf 91       	pop	r27
 2fe:	af 91       	pop	r26
 300:	9f 91       	pop	r25
 302:	8f 91       	pop	r24
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <changeDirection>:
	straight(0.7);
	float inches = 0;
	while(leftCount < 150) {
		 PORTF ^= (1<<PF2);
	}
	straight(0);
 30e:	61 15       	cp	r22, r1
 310:	71 05       	cpc	r23, r1
 312:	71 f4       	brne	.+28     	; 0x330 <changeDirection+0x22>
 314:	00 97       	sbiw	r24, 0x00	; 0
 316:	29 f4       	brne	.+10     	; 0x322 <changeDirection+0x14>
 318:	88 b1       	in	r24, 0x08	; 8
 31a:	83 7f       	andi	r24, 0xF3	; 243
 31c:	88 b9       	out	0x08, r24	; 8
 31e:	43 9a       	sbi	0x08, 3	; 8
 320:	08 95       	ret
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	a9 f4       	brne	.+42     	; 0x350 <changeDirection+0x42>
 326:	88 b1       	in	r24, 0x08	; 8
 328:	83 7f       	andi	r24, 0xF3	; 243
 32a:	88 b9       	out	0x08, r24	; 8
 32c:	42 9a       	sbi	0x08, 2	; 8
 32e:	08 95       	ret
 330:	61 30       	cpi	r22, 0x01	; 1
 332:	71 05       	cpc	r23, r1
 334:	69 f4       	brne	.+26     	; 0x350 <changeDirection+0x42>
 336:	00 97       	sbiw	r24, 0x00	; 0
 338:	29 f4       	brne	.+10     	; 0x344 <changeDirection+0x36>
 33a:	88 b1       	in	r24, 0x08	; 8
 33c:	8c 7f       	andi	r24, 0xFC	; 252
 33e:	88 b9       	out	0x08, r24	; 8
 340:	40 9a       	sbi	0x08, 0	; 8
 342:	08 95       	ret
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	21 f4       	brne	.+8      	; 0x350 <changeDirection+0x42>
 348:	88 b1       	in	r24, 0x08	; 8
 34a:	8c 7f       	andi	r24, 0xFC	; 252
 34c:	88 b9       	out	0x08, r24	; 8
 34e:	41 9a       	sbi	0x08, 1	; 8
 350:	08 95       	ret

00000352 <setDutyCycle>:
 352:	cf 92       	push	r12
 354:	df 92       	push	r13
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	6b 01       	movw	r12, r22
 360:	7c 01       	movw	r14, r24
 362:	ea 01       	movw	r28, r20
 364:	f8 94       	cli
 366:	20 e0       	ldi	r18, 0x00	; 0
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	a9 01       	movw	r20, r18
 36c:	7a d1       	rcall	.+756    	; 0x662 <__cmpsf2>
 36e:	81 11       	cpse	r24, r1
 370:	0e c0       	rjmp	.+28     	; 0x38e <setDutyCycle+0x3c>
 372:	20 97       	sbiw	r28, 0x00	; 0
 374:	29 f4       	brne	.+10     	; 0x380 <setDutyCycle+0x2e>
 376:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 37a:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 37e:	20 c0       	rjmp	.+64     	; 0x3c0 <setDutyCycle+0x6e>
 380:	21 97       	sbiw	r28, 0x01	; 1
 382:	f1 f4       	brne	.+60     	; 0x3c0 <setDutyCycle+0x6e>
 384:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 388:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 38c:	19 c0       	rjmp	.+50     	; 0x3c0 <setDutyCycle+0x6e>
 38e:	20 e0       	ldi	r18, 0x00	; 0
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	48 ec       	ldi	r20, 0xC8	; 200
 394:	53 e4       	ldi	r21, 0x43	; 67
 396:	c7 01       	movw	r24, r14
 398:	b6 01       	movw	r22, r12
 39a:	e5 d1       	rcall	.+970    	; 0x766 <__mulsf3>
 39c:	66 d1       	rcall	.+716    	; 0x66a <__fixsfsi>
 39e:	20 97       	sbiw	r28, 0x00	; 0
 3a0:	39 f4       	brne	.+14     	; 0x3b0 <setDutyCycle+0x5e>
 3a2:	60 57       	subi	r22, 0x70	; 112
 3a4:	7e 4f       	sbci	r23, 0xFE	; 254
 3a6:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 3aa:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 3ae:	08 c0       	rjmp	.+16     	; 0x3c0 <setDutyCycle+0x6e>
 3b0:	21 97       	sbiw	r28, 0x01	; 1
 3b2:	31 f4       	brne	.+12     	; 0x3c0 <setDutyCycle+0x6e>
 3b4:	67 55       	subi	r22, 0x57	; 87
 3b6:	7e 4f       	sbci	r23, 0xFE	; 254
 3b8:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 3bc:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 3c0:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
 3c4:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
 3c8:	78 94       	sei
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	ff 90       	pop	r15
 3d0:	ef 90       	pop	r14
 3d2:	df 90       	pop	r13
 3d4:	cf 90       	pop	r12
 3d6:	08 95       	ret

000003d8 <straight>:
 3d8:	cf 92       	push	r12
 3da:	df 92       	push	r13
 3dc:	ef 92       	push	r14
 3de:	ff 92       	push	r15
 3e0:	6b 01       	movw	r12, r22
 3e2:	7c 01       	movw	r14, r24
 3e4:	f8 94       	cli
 3e6:	40 e0       	ldi	r20, 0x00	; 0
 3e8:	50 e0       	ldi	r21, 0x00	; 0
 3ea:	b3 df       	rcall	.-154    	; 0x352 <setDutyCycle>
 3ec:	41 e0       	ldi	r20, 0x01	; 1
 3ee:	50 e0       	ldi	r21, 0x00	; 0
 3f0:	c7 01       	movw	r24, r14
 3f2:	b6 01       	movw	r22, r12
 3f4:	ae df       	rcall	.-164    	; 0x352 <setDutyCycle>
 3f6:	78 94       	sei
 3f8:	ff 90       	pop	r15
 3fa:	ef 90       	pop	r14
 3fc:	df 90       	pop	r13
 3fe:	cf 90       	pop	r12
 400:	08 95       	ret

00000402 <stop>:
	setDutyCycle(ds, R_WHEEL);
	sei();
}

void stop() {
	changeDirection(FORWARD, L_WHEEL);
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	81 df       	rcall	.-254    	; 0x30e <changeDirection>
	changeDirection(FORWARD, R_WHEEL);
 40c:	61 e0       	ldi	r22, 0x01	; 1
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	7c df       	rcall	.-264    	; 0x30e <changeDirection>
	straight(0);
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	70 e0       	ldi	r23, 0x00	; 0
 41a:	cb 01       	movw	r24, r22
 41c:	dd cf       	rjmp	.-70     	; 0x3d8 <straight>
 41e:	08 95       	ret

00000420 <setTurnLeft>:
}

void setTurnLeft() {
	
	changeDirection(FORWARD, L_WHEEL);
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	72 df       	rcall	.-284    	; 0x30e <changeDirection>
	changeDirection(BACKWARD, R_WHEEL);
 42a:	61 e0       	ldi	r22, 0x01	; 1
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	6d df       	rcall	.-294    	; 0x30e <changeDirection>
	setDutyCycle(0.7, L_WHEEL);
 434:	40 e0       	ldi	r20, 0x00	; 0
 436:	50 e0       	ldi	r21, 0x00	; 0
 438:	63 e3       	ldi	r22, 0x33	; 51
 43a:	73 e3       	ldi	r23, 0x33	; 51
 43c:	83 e3       	ldi	r24, 0x33	; 51
 43e:	9f e3       	ldi	r25, 0x3F	; 63
 440:	88 df       	rcall	.-240    	; 0x352 <setDutyCycle>
	setDutyCycle(0.7, R_WHEEL);
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	63 e3       	ldi	r22, 0x33	; 51
 448:	73 e3       	ldi	r23, 0x33	; 51
 44a:	83 e3       	ldi	r24, 0x33	; 51
 44c:	9f e3       	ldi	r25, 0x3F	; 63
 44e:	81 cf       	rjmp	.-254    	; 0x352 <setDutyCycle>
 450:	08 95       	ret

00000452 <setTurnRight>:
}


void setTurnRight() {
	
	changeDirection(BACKWARD, L_WHEEL);
 452:	60 e0       	ldi	r22, 0x00	; 0
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	59 df       	rcall	.-334    	; 0x30e <changeDirection>
	changeDirection(FORWARD, R_WHEEL);
 45c:	61 e0       	ldi	r22, 0x01	; 1
 45e:	70 e0       	ldi	r23, 0x00	; 0
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	54 df       	rcall	.-344    	; 0x30e <changeDirection>
	setDutyCycle(0.7, L_WHEEL);
 466:	40 e0       	ldi	r20, 0x00	; 0
 468:	50 e0       	ldi	r21, 0x00	; 0
 46a:	63 e3       	ldi	r22, 0x33	; 51
 46c:	73 e3       	ldi	r23, 0x33	; 51
 46e:	83 e3       	ldi	r24, 0x33	; 51
 470:	9f e3       	ldi	r25, 0x3F	; 63
 472:	6f df       	rcall	.-290    	; 0x352 <setDutyCycle>
	setDutyCycle(0.7, R_WHEEL);
 474:	41 e0       	ldi	r20, 0x01	; 1
 476:	50 e0       	ldi	r21, 0x00	; 0
 478:	63 e3       	ldi	r22, 0x33	; 51
 47a:	73 e3       	ldi	r23, 0x33	; 51
 47c:	83 e3       	ldi	r24, 0x33	; 51
 47e:	9f e3       	ldi	r25, 0x3F	; 63
 480:	68 cf       	rjmp	.-304    	; 0x352 <setDutyCycle>
 482:	08 95       	ret

00000484 <turn>:
}

void turn(int d) {
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	ec 01       	movw	r28, r24
	stop();
 48a:	bb df       	rcall	.-138    	; 0x402 <stop>
	//_delay_ms(100);
	cli();
 48c:	f8 94       	cli
	
	if (d > 0) setTurnLeft();
 48e:	1c 16       	cp	r1, r28
 490:	1d 06       	cpc	r1, r29
 492:	14 f4       	brge	.+4      	; 0x498 <turn+0x14>
 494:	c5 df       	rcall	.-118    	; 0x420 <setTurnLeft>
	else setTurnRight();
 496:	01 c0       	rjmp	.+2      	; 0x49a <turn+0x16>
 498:	dc df       	rcall	.-72     	; 0x452 <setTurnRight>
	
	leftCount = 0;
 49a:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <leftCount+0x1>
 49e:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <leftCount>
	rightcount = 0;
 4a2:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <rightcount+0x1>
 4a6:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <rightcount>
	
	sei();
 4aa:	78 94       	sei
	
	int count = (d * 50) / 90;
 4ac:	22 e3       	ldi	r18, 0x32	; 50
 4ae:	2c 9f       	mul	r18, r28
 4b0:	c0 01       	movw	r24, r0
 4b2:	2d 9f       	mul	r18, r29
 4b4:	90 0d       	add	r25, r0
 4b6:	11 24       	eor	r1, r1
 4b8:	6a e5       	ldi	r22, 0x5A	; 90
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	16 d3       	rcall	.+1580   	; 0xaea <__divmodhi4>

	while(leftCount < count) {
 4be:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <leftCount>
 4c2:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <leftCount+0x1>
 4c6:	86 17       	cp	r24, r22
 4c8:	97 07       	cpc	r25, r23
 4ca:	5c f4       	brge	.+22     	; 0x4e2 <turn+0x5e>
		 PORTF ^= (1<<PF2);
 4cc:	24 e0       	ldi	r18, 0x04	; 4
 4ce:	81 b3       	in	r24, 0x11	; 17
 4d0:	82 27       	eor	r24, r18
 4d2:	81 bb       	out	0x11, r24	; 17
	
	sei();
	
	int count = (d * 50) / 90;

	while(leftCount < count) {
 4d4:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <leftCount>
 4d8:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <leftCount+0x1>
 4dc:	86 17       	cp	r24, r22
 4de:	97 07       	cpc	r25, r23
		 PORTF ^= (1<<PF2);
	}
	stop();
 4e0:	b4 f3       	brlt	.-20     	; 0x4ce <turn+0x4a>
 4e2:	8f df       	rcall	.-226    	; 0x402 <stop>
	
}
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	08 95       	ret

000004ea <initWheels>:

void initWheels() {
	DDRC |= 0x0F; 
 4ea:	87 b1       	in	r24, 0x07	; 7
 4ec:	8f 60       	ori	r24, 0x0F	; 15
 4ee:	87 b9       	out	0x07, r24	; 7
	DDRL |= 0x18;
 4f0:	ea e0       	ldi	r30, 0x0A	; 10
 4f2:	f1 e0       	ldi	r31, 0x01	; 1
 4f4:	80 81       	ld	r24, Z
 4f6:	88 61       	ori	r24, 0x18	; 24
 4f8:	80 83       	st	Z, r24
	
	timer = 0;
 4fa:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <timer>
 4fe:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <timer+0x1>
 502:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <timer+0x2>
 506:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <timer+0x3>
 50a:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <timer+0x4>
 50e:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <timer+0x5>
 512:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <timer+0x6>
 516:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <timer+0x7>

	int period = 1000; //total time

	// set up left timer
	ICR5 = period;
 51a:	88 ee       	ldi	r24, 0xE8	; 232
 51c:	93 e0       	ldi	r25, 0x03	; 3
 51e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
 522:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
	setDutyCycle(0, L_WHEEL);
 526:	40 e0       	ldi	r20, 0x00	; 0
 528:	50 e0       	ldi	r21, 0x00	; 0
 52a:	60 e0       	ldi	r22, 0x00	; 0
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	cb 01       	movw	r24, r22
 530:	10 df       	rcall	.-480    	; 0x352 <setDutyCycle>
	setDutyCycle(0, R_WHEEL);
 532:	41 e0       	ldi	r20, 0x01	; 1
 534:	50 e0       	ldi	r21, 0x00	; 0
 536:	60 e0       	ldi	r22, 0x00	; 0
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	cb 01       	movw	r24, r22
 53c:	0a df       	rcall	.-492    	; 0x352 <setDutyCycle>

	TCCR5A |= (1 <<COM5A1) | (1 << COM5B1);
 53e:	e0 e2       	ldi	r30, 0x20	; 32
 540:	f1 e0       	ldi	r31, 0x01	; 1
 542:	80 81       	ld	r24, Z
 544:	80 6a       	ori	r24, 0xA0	; 160
 546:	80 83       	st	Z, r24
	TCCR5B |= (1 << WGM53) | (1 << CS51);
 548:	e1 e2       	ldi	r30, 0x21	; 33
 54a:	f1 e0       	ldi	r31, 0x01	; 1
 54c:	80 81       	ld	r24, Z
 54e:	82 61       	ori	r24, 0x12	; 18
 550:	80 83       	st	Z, r24
	
	
	PORTC |= L_FORWARD;
 552:	43 9a       	sbi	0x08, 3	; 8
	PORTC |= R_FORWARD; 
 554:	40 9a       	sbi	0x08, 0	; 8
	
	// setup photoregister slit detection.
	PORTJ &= ~((1 << PJ1) | (1 << PJ0));
 556:	e5 e0       	ldi	r30, 0x05	; 5
 558:	f1 e0       	ldi	r31, 0x01	; 1
 55a:	80 81       	ld	r24, Z
 55c:	8c 7f       	andi	r24, 0xFC	; 252
 55e:	80 83       	st	Z, r24
	
	PCMSK1 |= (1 << PCINT9);
 560:	ec e6       	ldi	r30, 0x6C	; 108
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	80 81       	ld	r24, Z
 566:	82 60       	ori	r24, 0x02	; 2
 568:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT10);
 56a:	80 81       	ld	r24, Z
 56c:	84 60       	ori	r24, 0x04	; 4
 56e:	80 83       	st	Z, r24
	
	PCICR |= (1<<PCIE1);
 570:	e8 e6       	ldi	r30, 0x68	; 104
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	80 81       	ld	r24, Z
 576:	82 60       	ori	r24, 0x02	; 2
 578:	80 83       	st	Z, r24
 57a:	08 95       	ret

0000057c <__vector_10>:
	sei();
}


// pin 15 reads the right wheel, functions as the master
ISR(PCINT1_vect) {
 57c:	1f 92       	push	r1
 57e:	0f 92       	push	r0
 580:	0f b6       	in	r0, 0x3f	; 63
 582:	0f 92       	push	r0
 584:	11 24       	eor	r1, r1
 586:	0b b6       	in	r0, 0x3b	; 59
 588:	0f 92       	push	r0
 58a:	2f 93       	push	r18
 58c:	3f 93       	push	r19
 58e:	4f 93       	push	r20
 590:	5f 93       	push	r21
 592:	6f 93       	push	r22
 594:	7f 93       	push	r23
 596:	8f 93       	push	r24
 598:	9f 93       	push	r25
 59a:	ef 93       	push	r30
 59c:	ff 93       	push	r31
	//cli();
	//PSprintf(0, "%d\n\r", leftCount);
	//PORTB ^= 0x80;
	//PORTF ^= (1 << PF2);
	
	int J = PINJ;
 59e:	e3 e0       	ldi	r30, 0x03	; 3
 5a0:	f1 e0       	ldi	r31, 0x01	; 1
 5a2:	40 81       	ld	r20, Z
 5a4:	50 e0       	ldi	r21, 0x00	; 0
	
	int change = J ^ oldJ;
	
	PORTF = change;
 5a6:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__data_end>
 5aa:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__data_end+0x1>
 5ae:	84 27       	eor	r24, r20
 5b0:	95 27       	eor	r25, r21
 5b2:	81 bb       	out	0x11, r24	; 17
	
	int RisON = (PINJ | (1<<PJ1));
 5b4:	20 81       	ld	r18, Z
	int LisON = (PINJ | (1<<PJ0));
 5b6:	80 81       	ld	r24, Z
	
	// If master
	if(change | (1 << PJ1)) {
		//	update interval time
		rightcount = rightcount + 1;
 5b8:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <rightcount>
 5bc:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <rightcount+0x1>
 5c0:	6f 5f       	subi	r22, 0xFF	; 255
 5c2:	7f 4f       	sbci	r23, 0xFF	; 255
 5c4:	70 93 13 02 	sts	0x0213, r23	; 0x800213 <rightcount+0x1>
 5c8:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <rightcount>
		// else if slave
	}
	if(change | (1 << PJ0)) {
		//	compare interval time to master and adjust duty cycle accordingly.
		leftCount = leftCount + 1;
 5cc:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <leftCount>
 5d0:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <leftCount+0x1>
 5d4:	6f 5f       	subi	r22, 0xFF	; 255
 5d6:	7f 4f       	sbci	r23, 0xFF	; 255
 5d8:	70 93 15 02 	sts	0x0215, r23	; 0x800215 <leftCount+0x1>
 5dc:	60 93 14 02 	sts	0x0214, r22	; 0x800214 <leftCount>
	}
	
	RwasOn = RisON;
 5e0:	22 60       	ori	r18, 0x02	; 2
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	30 93 1f 02 	sts	0x021F, r19	; 0x80021f <RwasOn+0x1>
 5e8:	20 93 1e 02 	sts	0x021E, r18	; 0x80021e <RwasOn>
	LwasOn = LisON;
 5ec:	81 60       	ori	r24, 0x01	; 1
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <LwasOn+0x1>
 5f4:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <LwasOn>
	oldJ = J;
 5f8:	50 93 11 02 	sts	0x0211, r21	; 0x800211 <__data_end+0x1>
 5fc:	40 93 10 02 	sts	0x0210, r20	; 0x800210 <__data_end>
	//sei();
}
 600:	ff 91       	pop	r31
 602:	ef 91       	pop	r30
 604:	9f 91       	pop	r25
 606:	8f 91       	pop	r24
 608:	7f 91       	pop	r23
 60a:	6f 91       	pop	r22
 60c:	5f 91       	pop	r21
 60e:	4f 91       	pop	r20
 610:	3f 91       	pop	r19
 612:	2f 91       	pop	r18
 614:	0f 90       	pop	r0
 616:	0b be       	out	0x3b, r0	; 59
 618:	0f 90       	pop	r0
 61a:	0f be       	out	0x3f, r0	; 63
 61c:	0f 90       	pop	r0
 61e:	1f 90       	pop	r1
 620:	18 95       	reti

00000622 <init>:
#include "acxserial.h"

void init() {
	//setTime();
	//PSerial_open(0, BAUD9600, SERIAL_8N1);
	initIRDet();
 622:	f9 dd       	rcall	.-1038   	; 0x216 <initIRDet>
	initWheels();
 624:	62 cf       	rjmp	.-316    	; 0x4ea <initWheels>
 626:	08 95       	ret

00000628 <main>:
 628:	66 d1       	rcall	.+716    	; 0x8f6 <x_init>


int main(void)
{
	x_init();
	x_new(1, irControl, 1);
 62a:	41 e0       	ldi	r20, 0x01	; 1
 62c:	50 e0       	ldi	r21, 0x00	; 0
 62e:	6b e1       	ldi	r22, 0x1B	; 27
 630:	71 e0       	ldi	r23, 0x01	; 1
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	23 d1       	rcall	.+582    	; 0x87c <x_new>
//PORTB |= 0x80;
	//PSerial_open(0, BAUD9600, SERIAL_8N1);
	DDRB = 0x80;
 636:	80 e8       	ldi	r24, 0x80	; 128
	//DDRF |= (1<<DDF0)|(1<<DDF1)|(DDF2);
	init();
 638:	84 b9       	out	0x04, r24	; 4
 63a:	f3 df       	rcall	.-26     	; 0x622 <init>
	//PORTJ &= ~(1 << PJ1);
	sei();
 63c:	78 94       	sei

/* Replace with your application code */
	//changeDirection(FORWARD, L_WHEEL);
	
	setDutyCycle(0, L_WHEEL);
 63e:	40 e0       	ldi	r20, 0x00	; 0
 640:	50 e0       	ldi	r21, 0x00	; 0
 642:	60 e0       	ldi	r22, 0x00	; 0
 644:	70 e0       	ldi	r23, 0x00	; 0
 646:	cb 01       	movw	r24, r22
 648:	84 de       	rcall	.-760    	; 0x352 <setDutyCycle>
	setDutyCycle(0, R_WHEEL);
 64a:	41 e0       	ldi	r20, 0x01	; 1
 64c:	50 e0       	ldi	r21, 0x00	; 0
 64e:	60 e0       	ldi	r22, 0x00	; 0
 650:	70 e0       	ldi	r23, 0x00	; 0
 652:	cb 01       	movw	r24, r22
 654:	7e de       	rcall	.-772    	; 0x352 <setDutyCycle>
	
	while (1)
	{
		//unsigned long t = getTime();
		//PSprintf(0, "Time: %X\n\r", t);
		straight(0.5);
 656:	60 e0       	ldi	r22, 0x00	; 0
 658:	70 e0       	ldi	r23, 0x00	; 0
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	9f e3       	ldi	r25, 0x3F	; 63
 65e:	bc de       	rcall	.-648    	; 0x3d8 <straight>
 660:	fa cf       	rjmp	.-12     	; 0x656 <main+0x2e>

00000662 <__cmpsf2>:
 662:	34 d0       	rcall	.+104    	; 0x6cc <__fp_cmp>
 664:	08 f4       	brcc	.+2      	; 0x668 <__cmpsf2+0x6>
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	08 95       	ret

0000066a <__fixsfsi>:
 66a:	04 d0       	rcall	.+8      	; 0x674 <__fixunssfsi>
 66c:	68 94       	set
 66e:	b1 11       	cpse	r27, r1
 670:	74 c0       	rjmp	.+232    	; 0x75a <__fp_szero>
 672:	08 95       	ret

00000674 <__fixunssfsi>:
 674:	57 d0       	rcall	.+174    	; 0x724 <__fp_splitA>
 676:	88 f0       	brcs	.+34     	; 0x69a <__fixunssfsi+0x26>
 678:	9f 57       	subi	r25, 0x7F	; 127
 67a:	90 f0       	brcs	.+36     	; 0x6a0 <__fixunssfsi+0x2c>
 67c:	b9 2f       	mov	r27, r25
 67e:	99 27       	eor	r25, r25
 680:	b7 51       	subi	r27, 0x17	; 23
 682:	a0 f0       	brcs	.+40     	; 0x6ac <__fixunssfsi+0x38>
 684:	d1 f0       	breq	.+52     	; 0x6ba <__fixunssfsi+0x46>
 686:	66 0f       	add	r22, r22
 688:	77 1f       	adc	r23, r23
 68a:	88 1f       	adc	r24, r24
 68c:	99 1f       	adc	r25, r25
 68e:	1a f0       	brmi	.+6      	; 0x696 <__fixunssfsi+0x22>
 690:	ba 95       	dec	r27
 692:	c9 f7       	brne	.-14     	; 0x686 <__fixunssfsi+0x12>
 694:	12 c0       	rjmp	.+36     	; 0x6ba <__fixunssfsi+0x46>
 696:	b1 30       	cpi	r27, 0x01	; 1
 698:	81 f0       	breq	.+32     	; 0x6ba <__fixunssfsi+0x46>
 69a:	5e d0       	rcall	.+188    	; 0x758 <__fp_zero>
 69c:	b1 e0       	ldi	r27, 0x01	; 1
 69e:	08 95       	ret
 6a0:	5b c0       	rjmp	.+182    	; 0x758 <__fp_zero>
 6a2:	67 2f       	mov	r22, r23
 6a4:	78 2f       	mov	r23, r24
 6a6:	88 27       	eor	r24, r24
 6a8:	b8 5f       	subi	r27, 0xF8	; 248
 6aa:	39 f0       	breq	.+14     	; 0x6ba <__fixunssfsi+0x46>
 6ac:	b9 3f       	cpi	r27, 0xF9	; 249
 6ae:	cc f3       	brlt	.-14     	; 0x6a2 <__fixunssfsi+0x2e>
 6b0:	86 95       	lsr	r24
 6b2:	77 95       	ror	r23
 6b4:	67 95       	ror	r22
 6b6:	b3 95       	inc	r27
 6b8:	d9 f7       	brne	.-10     	; 0x6b0 <__fixunssfsi+0x3c>
 6ba:	3e f4       	brtc	.+14     	; 0x6ca <__fixunssfsi+0x56>
 6bc:	90 95       	com	r25
 6be:	80 95       	com	r24
 6c0:	70 95       	com	r23
 6c2:	61 95       	neg	r22
 6c4:	7f 4f       	sbci	r23, 0xFF	; 255
 6c6:	8f 4f       	sbci	r24, 0xFF	; 255
 6c8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ca:	08 95       	ret

000006cc <__fp_cmp>:
 6cc:	99 0f       	add	r25, r25
 6ce:	00 08       	sbc	r0, r0
 6d0:	55 0f       	add	r21, r21
 6d2:	aa 0b       	sbc	r26, r26
 6d4:	e0 e8       	ldi	r30, 0x80	; 128
 6d6:	fe ef       	ldi	r31, 0xFE	; 254
 6d8:	16 16       	cp	r1, r22
 6da:	17 06       	cpc	r1, r23
 6dc:	e8 07       	cpc	r30, r24
 6de:	f9 07       	cpc	r31, r25
 6e0:	c0 f0       	brcs	.+48     	; 0x712 <__fp_cmp+0x46>
 6e2:	12 16       	cp	r1, r18
 6e4:	13 06       	cpc	r1, r19
 6e6:	e4 07       	cpc	r30, r20
 6e8:	f5 07       	cpc	r31, r21
 6ea:	98 f0       	brcs	.+38     	; 0x712 <__fp_cmp+0x46>
 6ec:	62 1b       	sub	r22, r18
 6ee:	73 0b       	sbc	r23, r19
 6f0:	84 0b       	sbc	r24, r20
 6f2:	95 0b       	sbc	r25, r21
 6f4:	39 f4       	brne	.+14     	; 0x704 <__fp_cmp+0x38>
 6f6:	0a 26       	eor	r0, r26
 6f8:	61 f0       	breq	.+24     	; 0x712 <__fp_cmp+0x46>
 6fa:	23 2b       	or	r18, r19
 6fc:	24 2b       	or	r18, r20
 6fe:	25 2b       	or	r18, r21
 700:	21 f4       	brne	.+8      	; 0x70a <__fp_cmp+0x3e>
 702:	08 95       	ret
 704:	0a 26       	eor	r0, r26
 706:	09 f4       	brne	.+2      	; 0x70a <__fp_cmp+0x3e>
 708:	a1 40       	sbci	r26, 0x01	; 1
 70a:	a6 95       	lsr	r26
 70c:	8f ef       	ldi	r24, 0xFF	; 255
 70e:	81 1d       	adc	r24, r1
 710:	81 1d       	adc	r24, r1
 712:	08 95       	ret

00000714 <__fp_split3>:
 714:	57 fd       	sbrc	r21, 7
 716:	90 58       	subi	r25, 0x80	; 128
 718:	44 0f       	add	r20, r20
 71a:	55 1f       	adc	r21, r21
 71c:	59 f0       	breq	.+22     	; 0x734 <__fp_splitA+0x10>
 71e:	5f 3f       	cpi	r21, 0xFF	; 255
 720:	71 f0       	breq	.+28     	; 0x73e <__fp_splitA+0x1a>
 722:	47 95       	ror	r20

00000724 <__fp_splitA>:
 724:	88 0f       	add	r24, r24
 726:	97 fb       	bst	r25, 7
 728:	99 1f       	adc	r25, r25
 72a:	61 f0       	breq	.+24     	; 0x744 <__fp_splitA+0x20>
 72c:	9f 3f       	cpi	r25, 0xFF	; 255
 72e:	79 f0       	breq	.+30     	; 0x74e <__fp_splitA+0x2a>
 730:	87 95       	ror	r24
 732:	08 95       	ret
 734:	12 16       	cp	r1, r18
 736:	13 06       	cpc	r1, r19
 738:	14 06       	cpc	r1, r20
 73a:	55 1f       	adc	r21, r21
 73c:	f2 cf       	rjmp	.-28     	; 0x722 <__fp_split3+0xe>
 73e:	46 95       	lsr	r20
 740:	f1 df       	rcall	.-30     	; 0x724 <__fp_splitA>
 742:	08 c0       	rjmp	.+16     	; 0x754 <__fp_splitA+0x30>
 744:	16 16       	cp	r1, r22
 746:	17 06       	cpc	r1, r23
 748:	18 06       	cpc	r1, r24
 74a:	99 1f       	adc	r25, r25
 74c:	f1 cf       	rjmp	.-30     	; 0x730 <__fp_splitA+0xc>
 74e:	86 95       	lsr	r24
 750:	71 05       	cpc	r23, r1
 752:	61 05       	cpc	r22, r1
 754:	08 94       	sec
 756:	08 95       	ret

00000758 <__fp_zero>:
 758:	e8 94       	clt

0000075a <__fp_szero>:
 75a:	bb 27       	eor	r27, r27
 75c:	66 27       	eor	r22, r22
 75e:	77 27       	eor	r23, r23
 760:	cb 01       	movw	r24, r22
 762:	97 f9       	bld	r25, 7
 764:	08 95       	ret

00000766 <__mulsf3>:
 766:	0b d0       	rcall	.+22     	; 0x77e <__mulsf3x>
 768:	78 c0       	rjmp	.+240    	; 0x85a <__fp_round>
 76a:	69 d0       	rcall	.+210    	; 0x83e <__fp_pscA>
 76c:	28 f0       	brcs	.+10     	; 0x778 <__mulsf3+0x12>
 76e:	6e d0       	rcall	.+220    	; 0x84c <__fp_pscB>
 770:	18 f0       	brcs	.+6      	; 0x778 <__mulsf3+0x12>
 772:	95 23       	and	r25, r21
 774:	09 f0       	breq	.+2      	; 0x778 <__mulsf3+0x12>
 776:	5a c0       	rjmp	.+180    	; 0x82c <__fp_inf>
 778:	5f c0       	rjmp	.+190    	; 0x838 <__fp_nan>
 77a:	11 24       	eor	r1, r1
 77c:	ee cf       	rjmp	.-36     	; 0x75a <__fp_szero>

0000077e <__mulsf3x>:
 77e:	ca df       	rcall	.-108    	; 0x714 <__fp_split3>
 780:	a0 f3       	brcs	.-24     	; 0x76a <__mulsf3+0x4>

00000782 <__mulsf3_pse>:
 782:	95 9f       	mul	r25, r21
 784:	d1 f3       	breq	.-12     	; 0x77a <__mulsf3+0x14>
 786:	95 0f       	add	r25, r21
 788:	50 e0       	ldi	r21, 0x00	; 0
 78a:	55 1f       	adc	r21, r21
 78c:	62 9f       	mul	r22, r18
 78e:	f0 01       	movw	r30, r0
 790:	72 9f       	mul	r23, r18
 792:	bb 27       	eor	r27, r27
 794:	f0 0d       	add	r31, r0
 796:	b1 1d       	adc	r27, r1
 798:	63 9f       	mul	r22, r19
 79a:	aa 27       	eor	r26, r26
 79c:	f0 0d       	add	r31, r0
 79e:	b1 1d       	adc	r27, r1
 7a0:	aa 1f       	adc	r26, r26
 7a2:	64 9f       	mul	r22, r20
 7a4:	66 27       	eor	r22, r22
 7a6:	b0 0d       	add	r27, r0
 7a8:	a1 1d       	adc	r26, r1
 7aa:	66 1f       	adc	r22, r22
 7ac:	82 9f       	mul	r24, r18
 7ae:	22 27       	eor	r18, r18
 7b0:	b0 0d       	add	r27, r0
 7b2:	a1 1d       	adc	r26, r1
 7b4:	62 1f       	adc	r22, r18
 7b6:	73 9f       	mul	r23, r19
 7b8:	b0 0d       	add	r27, r0
 7ba:	a1 1d       	adc	r26, r1
 7bc:	62 1f       	adc	r22, r18
 7be:	83 9f       	mul	r24, r19
 7c0:	a0 0d       	add	r26, r0
 7c2:	61 1d       	adc	r22, r1
 7c4:	22 1f       	adc	r18, r18
 7c6:	74 9f       	mul	r23, r20
 7c8:	33 27       	eor	r19, r19
 7ca:	a0 0d       	add	r26, r0
 7cc:	61 1d       	adc	r22, r1
 7ce:	23 1f       	adc	r18, r19
 7d0:	84 9f       	mul	r24, r20
 7d2:	60 0d       	add	r22, r0
 7d4:	21 1d       	adc	r18, r1
 7d6:	82 2f       	mov	r24, r18
 7d8:	76 2f       	mov	r23, r22
 7da:	6a 2f       	mov	r22, r26
 7dc:	11 24       	eor	r1, r1
 7de:	9f 57       	subi	r25, 0x7F	; 127
 7e0:	50 40       	sbci	r21, 0x00	; 0
 7e2:	8a f0       	brmi	.+34     	; 0x806 <__mulsf3_pse+0x84>
 7e4:	e1 f0       	breq	.+56     	; 0x81e <__mulsf3_pse+0x9c>
 7e6:	88 23       	and	r24, r24
 7e8:	4a f0       	brmi	.+18     	; 0x7fc <__mulsf3_pse+0x7a>
 7ea:	ee 0f       	add	r30, r30
 7ec:	ff 1f       	adc	r31, r31
 7ee:	bb 1f       	adc	r27, r27
 7f0:	66 1f       	adc	r22, r22
 7f2:	77 1f       	adc	r23, r23
 7f4:	88 1f       	adc	r24, r24
 7f6:	91 50       	subi	r25, 0x01	; 1
 7f8:	50 40       	sbci	r21, 0x00	; 0
 7fa:	a9 f7       	brne	.-22     	; 0x7e6 <__mulsf3_pse+0x64>
 7fc:	9e 3f       	cpi	r25, 0xFE	; 254
 7fe:	51 05       	cpc	r21, r1
 800:	70 f0       	brcs	.+28     	; 0x81e <__mulsf3_pse+0x9c>
 802:	14 c0       	rjmp	.+40     	; 0x82c <__fp_inf>
 804:	aa cf       	rjmp	.-172    	; 0x75a <__fp_szero>
 806:	5f 3f       	cpi	r21, 0xFF	; 255
 808:	ec f3       	brlt	.-6      	; 0x804 <__mulsf3_pse+0x82>
 80a:	98 3e       	cpi	r25, 0xE8	; 232
 80c:	dc f3       	brlt	.-10     	; 0x804 <__mulsf3_pse+0x82>
 80e:	86 95       	lsr	r24
 810:	77 95       	ror	r23
 812:	67 95       	ror	r22
 814:	b7 95       	ror	r27
 816:	f7 95       	ror	r31
 818:	e7 95       	ror	r30
 81a:	9f 5f       	subi	r25, 0xFF	; 255
 81c:	c1 f7       	brne	.-16     	; 0x80e <__mulsf3_pse+0x8c>
 81e:	fe 2b       	or	r31, r30
 820:	88 0f       	add	r24, r24
 822:	91 1d       	adc	r25, r1
 824:	96 95       	lsr	r25
 826:	87 95       	ror	r24
 828:	97 f9       	bld	r25, 7
 82a:	08 95       	ret

0000082c <__fp_inf>:
 82c:	97 f9       	bld	r25, 7
 82e:	9f 67       	ori	r25, 0x7F	; 127
 830:	80 e8       	ldi	r24, 0x80	; 128
 832:	70 e0       	ldi	r23, 0x00	; 0
 834:	60 e0       	ldi	r22, 0x00	; 0
 836:	08 95       	ret

00000838 <__fp_nan>:
 838:	9f ef       	ldi	r25, 0xFF	; 255
 83a:	80 ec       	ldi	r24, 0xC0	; 192
 83c:	08 95       	ret

0000083e <__fp_pscA>:
 83e:	00 24       	eor	r0, r0
 840:	0a 94       	dec	r0
 842:	16 16       	cp	r1, r22
 844:	17 06       	cpc	r1, r23
 846:	18 06       	cpc	r1, r24
 848:	09 06       	cpc	r0, r25
 84a:	08 95       	ret

0000084c <__fp_pscB>:
 84c:	00 24       	eor	r0, r0
 84e:	0a 94       	dec	r0
 850:	12 16       	cp	r1, r18
 852:	13 06       	cpc	r1, r19
 854:	14 06       	cpc	r1, r20
 856:	05 06       	cpc	r0, r21
 858:	08 95       	ret

0000085a <__fp_round>:
 85a:	09 2e       	mov	r0, r25
 85c:	03 94       	inc	r0
 85e:	00 0c       	add	r0, r0
 860:	11 f4       	brne	.+4      	; 0x866 <__fp_round+0xc>
 862:	88 23       	and	r24, r24
 864:	52 f0       	brmi	.+20     	; 0x87a <__fp_round+0x20>
 866:	bb 0f       	add	r27, r27
 868:	40 f4       	brcc	.+16     	; 0x87a <__fp_round+0x20>
 86a:	bf 2b       	or	r27, r31
 86c:	11 f4       	brne	.+4      	; 0x872 <__fp_round+0x18>
 86e:	60 ff       	sbrs	r22, 0
 870:	04 c0       	rjmp	.+8      	; 0x87a <__fp_round+0x20>
 872:	6f 5f       	subi	r22, 0xFF	; 255
 874:	7f 4f       	sbci	r23, 0xFF	; 255
 876:	8f 4f       	sbci	r24, 0xFF	; 255
 878:	9f 4f       	sbci	r25, 0xFF	; 255
 87a:	08 95       	ret

0000087c <x_new>:
 87c:	cf 93       	push	r28
 87e:	df 93       	push	r29
 880:	c8 2f       	mov	r28, r24
 882:	d4 2f       	mov	r29, r20
 884:	e8 2f       	mov	r30, r24
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	ee 0f       	add	r30, r30
 88a:	ff 1f       	adc	r31, r31
 88c:	ee 0f       	add	r30, r30
 88e:	ff 1f       	adc	r31, r31
 890:	9f 01       	movw	r18, r30
 892:	2c 5c       	subi	r18, 0xCC	; 204
 894:	3d 4f       	sbci	r19, 0xFD	; 253
 896:	f9 01       	movw	r30, r18
 898:	a2 81       	ldd	r26, Z+2	; 0x02
 89a:	b3 81       	ldd	r27, Z+3	; 0x03
 89c:	6c 93       	st	X, r22
 89e:	cd 01       	movw	r24, r26
 8a0:	01 97       	sbiw	r24, 0x01	; 1
 8a2:	fc 01       	movw	r30, r24
 8a4:	70 83       	st	Z, r23
 8a6:	01 97       	sbiw	r24, 0x01	; 1
 8a8:	fc 01       	movw	r30, r24
 8aa:	10 82       	st	Z, r1
 8ac:	55 97       	sbiw	r26, 0x15	; 21
 8ae:	f9 01       	movw	r30, r18
 8b0:	b1 83       	std	Z+1, r27	; 0x01
 8b2:	a0 83       	st	Z, r26
 8b4:	8c 2f       	mov	r24, r28
 8b6:	a5 dc       	rcall	.-1718   	; 0x202 <bit2mask8>
 8b8:	dd 23       	and	r29, r29
 8ba:	39 f0       	breq	.+14     	; 0x8ca <x_new+0x4e>
 8bc:	80 95       	com	r24
 8be:	90 91 65 0a 	lds	r25, 0x0A65	; 0x800a65 <x_disable_status>
 8c2:	89 23       	and	r24, r25
 8c4:	80 93 65 0a 	sts	0x0A65, r24	; 0x800a65 <x_disable_status>
 8c8:	05 c0       	rjmp	.+10     	; 0x8d4 <x_new+0x58>
 8ca:	90 91 65 0a 	lds	r25, 0x0A65	; 0x800a65 <x_disable_status>
 8ce:	89 2b       	or	r24, r25
 8d0:	80 93 65 0a 	sts	0x0A65, r24	; 0x800a65 <x_disable_status>
 8d4:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <x_thread_id>
 8d8:	c8 13       	cpse	r28, r24
 8da:	01 c0       	rjmp	.+2      	; 0x8de <x_new+0x62>
 8dc:	53 dc       	rcall	.-1882   	; 0x184 <x_schedule>
 8de:	df 91       	pop	r29
 8e0:	cf 91       	pop	r28
 8e2:	08 95       	ret

000008e4 <init_System_Timer>:
 8e4:	82 e0       	ldi	r24, 0x02	; 2
 8e6:	84 bd       	out	0x24, r24	; 36
 8e8:	9a ef       	ldi	r25, 0xFA	; 250
 8ea:	97 bd       	out	0x27, r25	; 39
 8ec:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
 8f0:	83 e0       	ldi	r24, 0x03	; 3
 8f2:	85 bd       	out	0x25, r24	; 37
 8f4:	08 95       	ret

000008f6 <x_init>:
 8f6:	cf 93       	push	r28
 8f8:	df 93       	push	r29
 8fa:	f8 94       	cli
 8fc:	8e ef       	ldi	r24, 0xFE	; 254
 8fe:	80 93 65 0a 	sts	0x0A65, r24	; 0x800a65 <x_disable_status>
 902:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <x_suspend_status>
 906:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <x_delay_status>
 90a:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <x_thread_id>
 90e:	81 e0       	ldi	r24, 0x01	; 1
 910:	80 93 66 0a 	sts	0x0A66, r24	; 0x800a66 <x_thread_mask>
 914:	c4 e3       	ldi	r28, 0x34	; 52
 916:	d2 e0       	ldi	r29, 0x02	; 2
 918:	84 e5       	ldi	r24, 0x54	; 84
 91a:	93 e0       	ldi	r25, 0x03	; 3
 91c:	99 83       	std	Y+1, r25	; 0x01
 91e:	88 83       	st	Y, r24
 920:	9b 83       	std	Y+3, r25	; 0x03
 922:	8a 83       	std	Y+2, r24	; 0x02
 924:	84 e5       	ldi	r24, 0x54	; 84
 926:	94 e0       	ldi	r25, 0x04	; 4
 928:	9d 83       	std	Y+5, r25	; 0x05
 92a:	8c 83       	std	Y+4, r24	; 0x04
 92c:	9f 83       	std	Y+7, r25	; 0x07
 92e:	8e 83       	std	Y+6, r24	; 0x06
 930:	84 e5       	ldi	r24, 0x54	; 84
 932:	95 e0       	ldi	r25, 0x05	; 5
 934:	99 87       	std	Y+9, r25	; 0x09
 936:	88 87       	std	Y+8, r24	; 0x08
 938:	9b 87       	std	Y+11, r25	; 0x0b
 93a:	8a 87       	std	Y+10, r24	; 0x0a
 93c:	84 e5       	ldi	r24, 0x54	; 84
 93e:	96 e0       	ldi	r25, 0x06	; 6
 940:	9d 87       	std	Y+13, r25	; 0x0d
 942:	8c 87       	std	Y+12, r24	; 0x0c
 944:	9f 87       	std	Y+15, r25	; 0x0f
 946:	8e 87       	std	Y+14, r24	; 0x0e
 948:	84 e5       	ldi	r24, 0x54	; 84
 94a:	97 e0       	ldi	r25, 0x07	; 7
 94c:	99 8b       	std	Y+17, r25	; 0x11
 94e:	88 8b       	std	Y+16, r24	; 0x10
 950:	9b 8b       	std	Y+19, r25	; 0x13
 952:	8a 8b       	std	Y+18, r24	; 0x12
 954:	84 e5       	ldi	r24, 0x54	; 84
 956:	98 e0       	ldi	r25, 0x08	; 8
 958:	9d 8b       	std	Y+21, r25	; 0x15
 95a:	8c 8b       	std	Y+20, r24	; 0x14
 95c:	9f 8b       	std	Y+23, r25	; 0x17
 95e:	8e 8b       	std	Y+22, r24	; 0x16
 960:	84 e5       	ldi	r24, 0x54	; 84
 962:	99 e0       	ldi	r25, 0x09	; 9
 964:	99 8f       	std	Y+25, r25	; 0x19
 966:	88 8f       	std	Y+24, r24	; 0x18
 968:	9b 8f       	std	Y+27, r25	; 0x1b
 96a:	8a 8f       	std	Y+26, r24	; 0x1a
 96c:	84 e5       	ldi	r24, 0x54	; 84
 96e:	9a e0       	ldi	r25, 0x0A	; 10
 970:	9d 8f       	std	Y+29, r25	; 0x1d
 972:	8c 8f       	std	Y+28, r24	; 0x1c
 974:	9f 8f       	std	Y+31, r25	; 0x1f
 976:	8e 8f       	std	Y+30, r24	; 0x1e
 978:	8a ea       	ldi	r24, 0xAA	; 170
 97a:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <x_thread_stacks>
 97e:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <x_thread_stacks+0x100>
 982:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <x_thread_stacks+0x200>
 986:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <x_thread_stacks+0x300>
 98a:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <x_thread_stacks+0x400>
 98e:	80 93 55 07 	sts	0x0755, r24	; 0x800755 <x_thread_stacks+0x500>
 992:	80 93 55 08 	sts	0x0855, r24	; 0x800855 <x_thread_stacks+0x600>
 996:	80 93 55 09 	sts	0x0955, r24	; 0x800955 <x_thread_stacks+0x700>
 99a:	a4 df       	rcall	.-184    	; 0x8e4 <init_System_Timer>
 99c:	ed b7       	in	r30, 0x3d	; 61
 99e:	fe b7       	in	r31, 0x3e	; 62
 9a0:	a8 81       	ld	r26, Y
 9a2:	b9 81       	ldd	r27, Y+1	; 0x01
 9a4:	85 81       	ldd	r24, Z+5	; 0x05
 9a6:	8c 93       	st	X, r24
 9a8:	a8 81       	ld	r26, Y
 9aa:	b9 81       	ldd	r27, Y+1	; 0x01
 9ac:	84 81       	ldd	r24, Z+4	; 0x04
 9ae:	11 97       	sbiw	r26, 0x01	; 1
 9b0:	8c 93       	st	X, r24
 9b2:	a8 81       	ld	r26, Y
 9b4:	b9 81       	ldd	r27, Y+1	; 0x01
 9b6:	83 81       	ldd	r24, Z+3	; 0x03
 9b8:	12 97       	sbiw	r26, 0x02	; 2
 9ba:	8c 93       	st	X, r24
 9bc:	a8 81       	ld	r26, Y
 9be:	b9 81       	ldd	r27, Y+1	; 0x01
 9c0:	82 81       	ldd	r24, Z+2	; 0x02
 9c2:	13 97       	sbiw	r26, 0x03	; 3
 9c4:	8c 93       	st	X, r24
 9c6:	88 81       	ld	r24, Y
 9c8:	99 81       	ldd	r25, Y+1	; 0x01
 9ca:	21 81       	ldd	r18, Z+1	; 0x01
 9cc:	fc 01       	movw	r30, r24
 9ce:	34 97       	sbiw	r30, 0x04	; 4
 9d0:	20 83       	st	Z, r18
 9d2:	88 81       	ld	r24, Y
 9d4:	99 81       	ldd	r25, Y+1	; 0x01
 9d6:	05 97       	sbiw	r24, 0x05	; 5
 9d8:	9e bf       	out	0x3e, r25	; 62
 9da:	8d bf       	out	0x3d, r24	; 61
 9dc:	78 94       	sei
 9de:	df 91       	pop	r29
 9e0:	cf 91       	pop	r28
 9e2:	08 95       	ret

000009e4 <__vector_21>:
 9e4:	1f 92       	push	r1
 9e6:	0f 92       	push	r0
 9e8:	0f b6       	in	r0, 0x3f	; 63
 9ea:	0f 92       	push	r0
 9ec:	11 24       	eor	r1, r1
 9ee:	0b b6       	in	r0, 0x3b	; 59
 9f0:	0f 92       	push	r0
 9f2:	2f 93       	push	r18
 9f4:	3f 93       	push	r19
 9f6:	4f 93       	push	r20
 9f8:	5f 93       	push	r21
 9fa:	8f 93       	push	r24
 9fc:	9f 93       	push	r25
 9fe:	af 93       	push	r26
 a00:	bf 93       	push	r27
 a02:	ef 93       	push	r30
 a04:	ff 93       	push	r31
 a06:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <x_system_counter>
 a0a:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <x_system_counter+0x1>
 a0e:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <x_system_counter+0x2>
 a12:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <x_system_counter+0x3>
 a16:	01 96       	adiw	r24, 0x01	; 1
 a18:	a1 1d       	adc	r26, r1
 a1a:	b1 1d       	adc	r27, r1
 a1c:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <x_system_counter>
 a20:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <x_system_counter+0x1>
 a24:	a0 93 18 02 	sts	0x0218, r26	; 0x800218 <x_system_counter+0x2>
 a28:	b0 93 19 02 	sts	0x0219, r27	; 0x800219 <x_system_counter+0x3>
 a2c:	30 91 33 02 	lds	r19, 0x0233	; 0x800233 <x_delay_status>
 a30:	e5 e5       	ldi	r30, 0x55	; 85
 a32:	fa e0       	ldi	r31, 0x0A	; 10
 a34:	45 e6       	ldi	r20, 0x65	; 101
 a36:	5a e0       	ldi	r21, 0x0A	; 10
 a38:	21 e0       	ldi	r18, 0x01	; 1
 a3a:	80 81       	ld	r24, Z
 a3c:	91 81       	ldd	r25, Z+1	; 0x01
 a3e:	01 97       	sbiw	r24, 0x01	; 1
 a40:	81 93       	st	Z+, r24
 a42:	91 93       	st	Z+, r25
 a44:	89 2b       	or	r24, r25
 a46:	19 f4       	brne	.+6      	; 0xa4e <__vector_21+0x6a>
 a48:	82 2f       	mov	r24, r18
 a4a:	80 95       	com	r24
 a4c:	38 23       	and	r19, r24
 a4e:	22 0f       	add	r18, r18
 a50:	e4 17       	cp	r30, r20
 a52:	f5 07       	cpc	r31, r21
 a54:	91 f7       	brne	.-28     	; 0xa3a <__vector_21+0x56>
 a56:	30 93 33 02 	sts	0x0233, r19	; 0x800233 <x_delay_status>
 a5a:	ff 91       	pop	r31
 a5c:	ef 91       	pop	r30
 a5e:	bf 91       	pop	r27
 a60:	af 91       	pop	r26
 a62:	9f 91       	pop	r25
 a64:	8f 91       	pop	r24
 a66:	5f 91       	pop	r21
 a68:	4f 91       	pop	r20
 a6a:	3f 91       	pop	r19
 a6c:	2f 91       	pop	r18
 a6e:	0f 90       	pop	r0
 a70:	0b be       	out	0x3b, r0	; 59
 a72:	0f 90       	pop	r0
 a74:	0f be       	out	0x3f, r0	; 63
 a76:	0f 90       	pop	r0
 a78:	1f 90       	pop	r1
 a7a:	18 95       	reti

00000a7c <x_stack_overflow>:
 a7c:	ac 01       	movw	r20, r24
 a7e:	27 9a       	sbi	0x04, 7	; 4
 a80:	2f 98       	cbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a82:	2f ef       	ldi	r18, 0xFF	; 255
 a84:	61 ee       	ldi	r22, 0xE1	; 225
 a86:	84 e0       	ldi	r24, 0x04	; 4
 a88:	21 50       	subi	r18, 0x01	; 1
 a8a:	60 40       	sbci	r22, 0x00	; 0
 a8c:	80 40       	sbci	r24, 0x00	; 0
 a8e:	e1 f7       	brne	.-8      	; 0xa88 <x_stack_overflow+0xc>
 a90:	00 c0       	rjmp	.+0      	; 0xa92 <x_stack_overflow+0x16>
 a92:	00 00       	nop
 a94:	55 23       	and	r21, r21
 a96:	fc f0       	brlt	.+62     	; 0xad6 <x_stack_overflow+0x5a>
 a98:	20 e0       	ldi	r18, 0x00	; 0
 a9a:	30 e0       	ldi	r19, 0x00	; 0
 a9c:	95 b1       	in	r25, 0x05	; 5
 a9e:	90 58       	subi	r25, 0x80	; 128
 aa0:	95 b9       	out	0x05, r25	; 5
 aa2:	9f ef       	ldi	r25, 0xFF	; 255
 aa4:	60 e7       	ldi	r22, 0x70	; 112
 aa6:	82 e0       	ldi	r24, 0x02	; 2
 aa8:	91 50       	subi	r25, 0x01	; 1
 aaa:	60 40       	sbci	r22, 0x00	; 0
 aac:	80 40       	sbci	r24, 0x00	; 0
 aae:	e1 f7       	brne	.-8      	; 0xaa8 <x_stack_overflow+0x2c>
 ab0:	00 c0       	rjmp	.+0      	; 0xab2 <x_stack_overflow+0x36>
 ab2:	00 00       	nop
 ab4:	95 b1       	in	r25, 0x05	; 5
 ab6:	90 58       	subi	r25, 0x80	; 128
 ab8:	95 b9       	out	0x05, r25	; 5
 aba:	9f ef       	ldi	r25, 0xFF	; 255
 abc:	69 e6       	ldi	r22, 0x69	; 105
 abe:	88 e1       	ldi	r24, 0x18	; 24
 ac0:	91 50       	subi	r25, 0x01	; 1
 ac2:	60 40       	sbci	r22, 0x00	; 0
 ac4:	80 40       	sbci	r24, 0x00	; 0
 ac6:	e1 f7       	brne	.-8      	; 0xac0 <x_stack_overflow+0x44>
 ac8:	00 c0       	rjmp	.+0      	; 0xaca <x_stack_overflow+0x4e>
 aca:	00 00       	nop
 acc:	2f 5f       	subi	r18, 0xFF	; 255
 ace:	3f 4f       	sbci	r19, 0xFF	; 255
 ad0:	42 17       	cp	r20, r18
 ad2:	53 07       	cpc	r21, r19
 ad4:	1c f7       	brge	.-58     	; 0xa9c <x_stack_overflow+0x20>
 ad6:	9f ef       	ldi	r25, 0xFF	; 255
 ad8:	23 e2       	ldi	r18, 0x23	; 35
 ada:	64 ef       	ldi	r22, 0xF4	; 244
 adc:	91 50       	subi	r25, 0x01	; 1
 ade:	20 40       	sbci	r18, 0x00	; 0
 ae0:	60 40       	sbci	r22, 0x00	; 0
 ae2:	e1 f7       	brne	.-8      	; 0xadc <x_stack_overflow+0x60>
 ae4:	00 c0       	rjmp	.+0      	; 0xae6 <x_stack_overflow+0x6a>
 ae6:	00 00       	nop
 ae8:	d5 cf       	rjmp	.-86     	; 0xa94 <x_stack_overflow+0x18>

00000aea <__divmodhi4>:
 aea:	97 fb       	bst	r25, 7
 aec:	07 2e       	mov	r0, r23
 aee:	16 f4       	brtc	.+4      	; 0xaf4 <__divmodhi4+0xa>
 af0:	00 94       	com	r0
 af2:	06 d0       	rcall	.+12     	; 0xb00 <__divmodhi4_neg1>
 af4:	77 fd       	sbrc	r23, 7
 af6:	08 d0       	rcall	.+16     	; 0xb08 <__divmodhi4_neg2>
 af8:	0b d0       	rcall	.+22     	; 0xb10 <__udivmodhi4>
 afa:	07 fc       	sbrc	r0, 7
 afc:	05 d0       	rcall	.+10     	; 0xb08 <__divmodhi4_neg2>
 afe:	3e f4       	brtc	.+14     	; 0xb0e <__divmodhi4_exit>

00000b00 <__divmodhi4_neg1>:
 b00:	90 95       	com	r25
 b02:	81 95       	neg	r24
 b04:	9f 4f       	sbci	r25, 0xFF	; 255
 b06:	08 95       	ret

00000b08 <__divmodhi4_neg2>:
 b08:	70 95       	com	r23
 b0a:	61 95       	neg	r22
 b0c:	7f 4f       	sbci	r23, 0xFF	; 255

00000b0e <__divmodhi4_exit>:
 b0e:	08 95       	ret

00000b10 <__udivmodhi4>:
 b10:	aa 1b       	sub	r26, r26
 b12:	bb 1b       	sub	r27, r27
 b14:	51 e1       	ldi	r21, 0x11	; 17
 b16:	07 c0       	rjmp	.+14     	; 0xb26 <__udivmodhi4_ep>

00000b18 <__udivmodhi4_loop>:
 b18:	aa 1f       	adc	r26, r26
 b1a:	bb 1f       	adc	r27, r27
 b1c:	a6 17       	cp	r26, r22
 b1e:	b7 07       	cpc	r27, r23
 b20:	10 f0       	brcs	.+4      	; 0xb26 <__udivmodhi4_ep>
 b22:	a6 1b       	sub	r26, r22
 b24:	b7 0b       	sbc	r27, r23

00000b26 <__udivmodhi4_ep>:
 b26:	88 1f       	adc	r24, r24
 b28:	99 1f       	adc	r25, r25
 b2a:	5a 95       	dec	r21
 b2c:	a9 f7       	brne	.-22     	; 0xb18 <__udivmodhi4_loop>
 b2e:	80 95       	com	r24
 b30:	90 95       	com	r25
 b32:	bc 01       	movw	r22, r24
 b34:	cd 01       	movw	r24, r26
 b36:	08 95       	ret

00000b38 <_exit>:
 b38:	f8 94       	cli

00000b3a <__stop_program>:
 b3a:	ff cf       	rjmp	.-2      	; 0xb3a <__stop_program>
