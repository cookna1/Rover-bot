
Rover-bot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000202  00000276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000202  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f23  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cf5  00000000  00000000  0000125b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004aa  00000000  00000000  00001f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000023fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000630  00000000  00000000  00002464  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000101  00000000  00000000  00002a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002b95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e0       	ldi	r30, 0x02	; 2
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 30       	cpi	r26, 0x02	; 2
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	4d d0       	rcall	.+154    	; 0x1ba <main>
 120:	6e c0       	rjmp	.+220    	; 0x1fe <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initWheels>:
int offtime = 10;
int r_ontime;
int l_ontime;

void initWheels() {
	DDRC |= 0x0F; 
 124:	87 b1       	in	r24, 0x07	; 7
 126:	8f 60       	ori	r24, 0x0F	; 15
 128:	87 b9       	out	0x07, r24	; 7
	DDRL |= (1 << PL3) | (1 << PL4);
 12a:	ea e0       	ldi	r30, 0x0A	; 10
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	80 81       	ld	r24, Z
 130:	88 61       	ori	r24, 0x18	; 24
 132:	80 83       	st	Z, r24
	int l_ontime = 100; // ONTIME

	int l_period = offtime + l_ontime; //total time

	// set up left timer
	ICR5 = l_period;
 134:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 138:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 13c:	8c 59       	subi	r24, 0x9C	; 156
 13e:	9f 4f       	sbci	r25, 0xFF	; 255
 140:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
 144:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
	OCR5A = l_ontime;
 148:	84 e6       	ldi	r24, 0x64	; 100
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 150:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5B = l_ontime;
 154:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 158:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
	TCCR5A = (1<<COM5A1) | (1<<COM5B1);
 15c:	80 ea       	ldi	r24, 0xA0	; 160
 15e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
	TCCR5B |= (1 << CS51) | (1 <<WGM53);
 162:	e1 e2       	ldi	r30, 0x21	; 33
 164:	f1 e0       	ldi	r31, 0x01	; 1
 166:	80 81       	ld	r24, Z
 168:	82 61       	ori	r24, 0x12	; 18
 16a:	80 83       	st	Z, r24
	TIMSK5 = (1 << OCIE5A) | (1 << OCIE5B) | (1 << TOV5);
 16c:	87 e0       	ldi	r24, 0x07	; 7
 16e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
	
	PORTC |= L_BACKWARD;
 172:	42 9a       	sbi	0x08, 2	; 8
	PORTC |= R_FORWARD; 
 174:	41 9a       	sbi	0x08, 1	; 8
 176:	08 95       	ret

00000178 <changeDirection>:
	
}

void changeDirection(int direction, int wheelNumber) {
	//_delay_ms(100);
	if (wheelNumber == L_WHEEL && direction == FORWARD) {
 178:	61 30       	cpi	r22, 0x01	; 1
 17a:	71 05       	cpc	r23, r1
 17c:	71 f4       	brne	.+28     	; 0x19a <changeDirection+0x22>
 17e:	00 97       	sbiw	r24, 0x00	; 0
 180:	29 f4       	brne	.+10     	; 0x18c <changeDirection+0x14>
		PORTC &= 0xF3;
 182:	88 b1       	in	r24, 0x08	; 8
 184:	83 7f       	andi	r24, 0xF3	; 243
 186:	88 b9       	out	0x08, r24	; 8
		PORTC |=  L_FORWARD;
 188:	43 9a       	sbi	0x08, 3	; 8
 18a:	08 95       	ret
	} else if (wheelNumber == L_WHEEL && direction == BACKWARD) {
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	a1 f4       	brne	.+40     	; 0x1b8 <changeDirection+0x40>
		PORTC &= 0xF3;
 190:	88 b1       	in	r24, 0x08	; 8
 192:	83 7f       	andi	r24, 0xF3	; 243
 194:	88 b9       	out	0x08, r24	; 8
		PORTC |=  L_BACKWARD;
 196:	42 9a       	sbi	0x08, 2	; 8
 198:	08 95       	ret
	} else if (wheelNumber == R_WHEEL && direction == FORWARD) {
 19a:	67 2b       	or	r22, r23
 19c:	69 f4       	brne	.+26     	; 0x1b8 <changeDirection+0x40>
 19e:	00 97       	sbiw	r24, 0x00	; 0
 1a0:	29 f4       	brne	.+10     	; 0x1ac <changeDirection+0x34>
		PORTC &= 0xFC;
 1a2:	88 b1       	in	r24, 0x08	; 8
 1a4:	8c 7f       	andi	r24, 0xFC	; 252
 1a6:	88 b9       	out	0x08, r24	; 8
		PORTC |=  R_FORWARD;
 1a8:	41 9a       	sbi	0x08, 1	; 8
 1aa:	08 95       	ret
	} else if (wheelNumber == R_WHEEL && direction == BACKWARD) {
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	21 f4       	brne	.+8      	; 0x1b8 <changeDirection+0x40>
		PORTC &= 0xFC;
 1b0:	88 b1       	in	r24, 0x08	; 8
 1b2:	8c 7f       	andi	r24, 0xFC	; 252
 1b4:	88 b9       	out	0x08, r24	; 8
		PORTC |=  R_BACKWARD;
 1b6:	40 9a       	sbi	0x08, 0	; 8
 1b8:	08 95       	ret

000001ba <main>:


int main(void)
{
//PORTB |= 0x80;
initWheels();
 1ba:	b4 df       	rcall	.-152    	; 0x124 <initWheels>

/* Replace with your application code */
	//_delay_ms(1);
	//changeDirection(FORWARD, L_WHEEL);
	
	DDRC = 0x0F;
 1bc:	8f e0       	ldi	r24, 0x0F	; 15
 1be:	87 b9       	out	0x07, r24	; 7
	DDRL = 0x0F;
 1c0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
	while (1)
	{
		changeDirection(FORWARD, R_WHEEL);
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	d5 df       	rcall	.-86     	; 0x178 <changeDirection>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	83 e2       	ldi	r24, 0x23	; 35
 1d2:	94 ef       	ldi	r25, 0xF4	; 244
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0x1a>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0x24>
 1de:	00 00       	nop
		//PORTL = 0x08;
		_delay_ms(5000);
		changeDirection(BACKWARD, R_WHEEL);
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	70 e0       	ldi	r23, 0x00	; 0
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	c7 df       	rcall	.-114    	; 0x178 <changeDirection>
 1ea:	2f ef       	ldi	r18, 0xFF	; 255
 1ec:	83 e2       	ldi	r24, 0x23	; 35
 1ee:	94 ef       	ldi	r25, 0xF4	; 244
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0x36>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0x40>
 1fa:	00 00       	nop
 1fc:	e3 cf       	rjmp	.-58     	; 0x1c4 <main+0xa>

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>
