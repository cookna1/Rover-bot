
Rover-bot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000880  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000080c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800200  00800200  00000880  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001675  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f52  00000000  00000000  0000205d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000947  00000000  00000000  00002faf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  000038f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000763  00000000  00000000  00003b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007f3  00000000  00000000  000042bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004ab2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	3d c2       	rjmp	.+1146   	; 0x4a4 <__vector_10>
  2a:	00 00       	nop
  2c:	8b c0       	rjmp	.+278    	; 0x144 <__vector_11>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	cd c0       	rjmp	.+410    	; 0x1d0 <__vector_13>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e0       	ldi	r30, 0x0C	; 12
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 31       	cpi	r26, 0x1E	; 30
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	18 d2       	rcall	.+1072   	; 0x550 <main>
 120:	73 c3       	rjmp	.+1766   	; 0x808 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initIRDet>:
	DDRF = 0x03;
	PCMSK2 = (1 << PCINT16) | (1 << PCINT17);

}

void disableIRDet() {
 124:	e7 e0       	ldi	r30, 0x07	; 7
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	80 81       	ld	r24, Z
 12a:	8c 7f       	andi	r24, 0xFC	; 252
 12c:	80 83       	st	Z, r24
 12e:	80 b3       	in	r24, 0x10	; 16
 130:	83 60       	ori	r24, 0x03	; 3
 132:	80 bb       	out	0x10, r24	; 16
 134:	84 e0       	ldi	r24, 0x04	; 4
 136:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x700068>
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	80 bb       	out	0x10, r24	; 16
 13e:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x70006d>
 142:	08 95       	ret

00000144 <__vector_11>:
	
}

ISR(PCINT2_vect) {
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	0b b6       	in	r0, 0x3b	; 59
 150:	0f 92       	push	r0
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
	
	if(PINK & (1 << PK0) && !(PINK & (1 << PK1))){ //LEFT SENSOR
 16a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 16e:	80 ff       	sbrs	r24, 0
 170:	08 c0       	rjmp	.+16     	; 0x182 <__vector_11+0x3e>
 172:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 176:	81 fd       	sbrc	r24, 1
 178:	04 c0       	rjmp	.+8      	; 0x182 <__vector_11+0x3e>
		//PORTF |= (1 << PF0);  //TODO This part should change based on what needs to be done if left sensor get high
		//_delay_ms(100);
		//PORTF &= 1;
		turn(-5);
 17a:	8b ef       	ldi	r24, 0xFB	; 251
 17c:	9f ef       	ldi	r25, 0xFF	; 255
 17e:	22 d1       	rcall	.+580    	; 0x3c4 <turn>
 180:	14 c0       	rjmp	.+40     	; 0x1aa <__vector_11+0x66>
	}
	else if(PINK & (1 << PK1) && !(PINK & (1 << PK0))) { //RIGHT SENSOR
 182:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 186:	81 ff       	sbrs	r24, 1
 188:	08 c0       	rjmp	.+16     	; 0x19a <__vector_11+0x56>
 18a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 18e:	80 fd       	sbrc	r24, 0
 190:	04 c0       	rjmp	.+8      	; 0x19a <__vector_11+0x56>
		//PORTF |= (1 << PF1); //TODO This part should change based on what needs to be done if right sensor get high
		//_delay_ms(100);
		//PORTF &= 2;
		turn(5);
 192:	85 e0       	ldi	r24, 0x05	; 5
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	16 d1       	rcall	.+556    	; 0x3c4 <turn>
 198:	08 c0       	rjmp	.+16     	; 0x1aa <__vector_11+0x66>
	} else if (PINK & (1 << PK0) && (PINK & (1 << PK1))) {// both sensors
 19a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 19e:	80 ff       	sbrs	r24, 0
 1a0:	04 c0       	rjmp	.+8      	; 0x1aa <__vector_11+0x66>
 1a2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
		stop();
 1a6:	81 fd       	sbrc	r24, 1
 1a8:	d0 d0       	rcall	.+416    	; 0x34a <stop>
	}
 1aa:	ff 91       	pop	r31
 1ac:	ef 91       	pop	r30
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	7f 91       	pop	r23
 1b8:	6f 91       	pop	r22
 1ba:	5f 91       	pop	r21
 1bc:	4f 91       	pop	r20
 1be:	3f 91       	pop	r19
 1c0:	2f 91       	pop	r18
 1c2:	0f 90       	pop	r0
 1c4:	0b be       	out	0x3b, r0	; 59
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <__vector_13>:
	TIMSK2 |= (1 << OCIE2A);
	
	OCR2A = tickTime;
}

ISR(TIMER2_COMPA_vect) {
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	8f 93       	push	r24
 1dc:	9f 93       	push	r25
 1de:	af 93       	push	r26
 1e0:	bf 93       	push	r27
	timeCounter++;
 1e2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <timeCounter>
 1e6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <timeCounter+0x1>
 1ea:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <timeCounter+0x2>
 1ee:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <timeCounter+0x3>
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	a1 1d       	adc	r26, r1
 1f6:	b1 1d       	adc	r27, r1
 1f8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <timeCounter>
 1fc:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <timeCounter+0x1>
 200:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <timeCounter+0x2>
 204:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <timeCounter+0x3>
	/*if (timeCounter % 1000 == 0)*/ //PORTB ^= 0x80;
 208:	bf 91       	pop	r27
 20a:	af 91       	pop	r26
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <straight>:
	straight(0.7);
	float inches = 0;
	while(leftCount < 150) {
		 PORTF ^= (1<<PF2);
	}
	straight(0);
 21a:	cf 92       	push	r12
 21c:	df 92       	push	r13
 21e:	ef 92       	push	r14
 220:	ff 92       	push	r15
 222:	6b 01       	movw	r12, r22
 224:	7c 01       	movw	r14, r24
 226:	f8 94       	cli
 228:	20 e0       	ldi	r18, 0x00	; 0
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	a9 01       	movw	r20, r18
 22e:	b8 d1       	rcall	.+880    	; 0x5a0 <__cmpsf2>
 230:	81 11       	cpse	r24, r1
 232:	09 c0       	rjmp	.+18     	; 0x246 <straight+0x2c>
 234:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 238:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 23c:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 240:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 244:	15 c0       	rjmp	.+42     	; 0x270 <straight+0x56>
 246:	20 e0       	ldi	r18, 0x00	; 0
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	48 ec       	ldi	r20, 0xC8	; 200
 24c:	53 e4       	ldi	r21, 0x43	; 67
 24e:	c7 01       	movw	r24, r14
 250:	b6 01       	movw	r22, r12
 252:	28 d2       	rcall	.+1104   	; 0x6a4 <__mulsf3>
 254:	a9 d1       	rcall	.+850    	; 0x5a8 <__fixsfsi>
 256:	9b 01       	movw	r18, r22
 258:	20 57       	subi	r18, 0x70	; 112
 25a:	3e 4f       	sbci	r19, 0xFE	; 254
 25c:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 260:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 264:	67 55       	subi	r22, 0x57	; 87
 266:	7e 4f       	sbci	r23, 0xFE	; 254
 268:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 26c:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 270:	78 94       	sei
 272:	ff 90       	pop	r15
 274:	ef 90       	pop	r14
 276:	df 90       	pop	r13
 278:	cf 90       	pop	r12
 27a:	08 95       	ret

0000027c <initWheels>:
	stop();
	
}

void initWheels() {
	DDRC |= 0x0F; 
 27c:	87 b1       	in	r24, 0x07	; 7
 27e:	8f 60       	ori	r24, 0x0F	; 15
 280:	87 b9       	out	0x07, r24	; 7
	DDRL |= 0x18;
 282:	ea e0       	ldi	r30, 0x0A	; 10
 284:	f1 e0       	ldi	r31, 0x01	; 1
 286:	80 81       	ld	r24, Z
 288:	88 61       	ori	r24, 0x18	; 24
 28a:	80 83       	st	Z, r24
	
	timer = 0;
 28c:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <timer>
 290:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <timer+0x1>
 294:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <timer+0x2>
 298:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <timer+0x3>
 29c:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <timer+0x4>
 2a0:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <timer+0x5>
 2a4:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <timer+0x6>
 2a8:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <timer+0x7>

	int period = 1000; //total time

	// set up left timer
	ICR5 = period;
 2ac:	88 ee       	ldi	r24, 0xE8	; 232
 2ae:	93 e0       	ldi	r25, 0x03	; 3
 2b0:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
 2b4:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>

// setDutyCycle accepts a dutycycle (number between 0.0 and 1.0) and the wheel (L_WHEEL or R_WHEEL)
void setDutyCycle(float dutycycle, int wheel) {
	
	if (dutycycle == 0) {
		if (wheel == L_WHEEL) OCR5A = 0;
 2b8:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 2bc:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
		else if (wheel == R_WHEEL) OCR5B = 0;
 2c0:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 2c4:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
	// set up left timer
	ICR5 = period;
	setDutyCycle(0, L_WHEEL);
	setDutyCycle(0, R_WHEEL);

	TCCR5A |= (1 <<COM5A1) | (1 << COM5B1);
 2c8:	e0 e2       	ldi	r30, 0x20	; 32
 2ca:	f1 e0       	ldi	r31, 0x01	; 1
 2cc:	80 81       	ld	r24, Z
 2ce:	80 6a       	ori	r24, 0xA0	; 160
 2d0:	80 83       	st	Z, r24
	TCCR5B |= (1 << WGM53) | (1 << CS51);
 2d2:	e1 e2       	ldi	r30, 0x21	; 33
 2d4:	f1 e0       	ldi	r31, 0x01	; 1
 2d6:	80 81       	ld	r24, Z
 2d8:	82 61       	ori	r24, 0x12	; 18
 2da:	80 83       	st	Z, r24
	
	
	PORTC |= L_FORWARD;
 2dc:	43 9a       	sbi	0x08, 3	; 8
	PORTC |= R_FORWARD; 
 2de:	40 9a       	sbi	0x08, 0	; 8
	
	// setup photoregister slit detection.
	PORTJ &= ~((1 << PJ1) | (1 << PJ0));
 2e0:	e5 e0       	ldi	r30, 0x05	; 5
 2e2:	f1 e0       	ldi	r31, 0x01	; 1
 2e4:	80 81       	ld	r24, Z
 2e6:	8c 7f       	andi	r24, 0xFC	; 252
 2e8:	80 83       	st	Z, r24
	
	PCMSK1 |= (1 << PCINT9);
 2ea:	ec e6       	ldi	r30, 0x6C	; 108
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	82 60       	ori	r24, 0x02	; 2
 2f2:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT10);
 2f4:	80 81       	ld	r24, Z
 2f6:	84 60       	ori	r24, 0x04	; 4
 2f8:	80 83       	st	Z, r24
	
	PCICR |= (1<<PCIE1);
 2fa:	e8 e6       	ldi	r30, 0x68	; 104
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	82 60       	ori	r24, 0x02	; 2
 302:	80 83       	st	Z, r24
 304:	08 95       	ret

00000306 <changeDirection>:
	
}

void changeDirection(int direction, int wheelNumber) {
	//_delay_ms(100);
	if (wheelNumber == L_WHEEL && direction == FORWARD) {
 306:	61 15       	cp	r22, r1
 308:	71 05       	cpc	r23, r1
 30a:	71 f4       	brne	.+28     	; 0x328 <changeDirection+0x22>
 30c:	00 97       	sbiw	r24, 0x00	; 0
 30e:	29 f4       	brne	.+10     	; 0x31a <changeDirection+0x14>
		PORTC &= 0xF3;
 310:	88 b1       	in	r24, 0x08	; 8
 312:	83 7f       	andi	r24, 0xF3	; 243
 314:	88 b9       	out	0x08, r24	; 8
		PORTC |=  L_FORWARD;
 316:	43 9a       	sbi	0x08, 3	; 8
 318:	08 95       	ret
	} else if (wheelNumber == L_WHEEL && direction == BACKWARD) {
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	a9 f4       	brne	.+42     	; 0x348 <changeDirection+0x42>
		PORTC &= 0xF3;
 31e:	88 b1       	in	r24, 0x08	; 8
 320:	83 7f       	andi	r24, 0xF3	; 243
 322:	88 b9       	out	0x08, r24	; 8
		PORTC |=  L_BACKWARD;
 324:	42 9a       	sbi	0x08, 2	; 8
 326:	08 95       	ret
	} else if (wheelNumber == R_WHEEL && direction == FORWARD) {
 328:	61 30       	cpi	r22, 0x01	; 1
 32a:	71 05       	cpc	r23, r1
 32c:	69 f4       	brne	.+26     	; 0x348 <changeDirection+0x42>
 32e:	00 97       	sbiw	r24, 0x00	; 0
 330:	29 f4       	brne	.+10     	; 0x33c <changeDirection+0x36>
		PORTC &= 0xFC;
 332:	88 b1       	in	r24, 0x08	; 8
 334:	8c 7f       	andi	r24, 0xFC	; 252
 336:	88 b9       	out	0x08, r24	; 8
		PORTC |=  R_FORWARD;
 338:	40 9a       	sbi	0x08, 0	; 8
 33a:	08 95       	ret
	} else if (wheelNumber == R_WHEEL && direction == BACKWARD) {
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	21 f4       	brne	.+8      	; 0x348 <changeDirection+0x42>
		PORTC &= 0xFC;
 340:	88 b1       	in	r24, 0x08	; 8
 342:	8c 7f       	andi	r24, 0xFC	; 252
 344:	88 b9       	out	0x08, r24	; 8
		PORTC |=  R_BACKWARD;
 346:	41 9a       	sbi	0x08, 1	; 8
 348:	08 95       	ret

0000034a <stop>:
	setDutyCycle(ds, R_WHEEL);
	sei();
}

void stop() {
	changeDirection(FORWARD, L_WHEEL);
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	d9 df       	rcall	.-78     	; 0x306 <changeDirection>
	changeDirection(FORWARD, R_WHEEL);
 354:	61 e0       	ldi	r22, 0x01	; 1
 356:	70 e0       	ldi	r23, 0x00	; 0
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	d4 df       	rcall	.-88     	; 0x306 <changeDirection>
	straight(0);
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	cb 01       	movw	r24, r22
 364:	5a cf       	rjmp	.-332    	; 0x21a <straight>
 366:	08 95       	ret

00000368 <setTurnLeft>:
}

void setTurnLeft() {
	
	changeDirection(FORWARD, L_WHEEL);
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	70 e0       	ldi	r23, 0x00	; 0
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	ca df       	rcall	.-108    	; 0x306 <changeDirection>
	changeDirection(BACKWARD, R_WHEEL);
 372:	61 e0       	ldi	r22, 0x01	; 1
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	c5 df       	rcall	.-118    	; 0x306 <changeDirection>
		if (wheel == L_WHEEL) OCR5A = 0;
		else if (wheel == R_WHEEL) OCR5B = 0;
	} else {
		int ontime = ((int)(dutycycle * 400.0) + 400) ;
		
		if (wheel == L_WHEEL) OCR5A = ontime ;
 37c:	88 ea       	ldi	r24, 0xA8	; 168
 37e:	92 e0       	ldi	r25, 0x02	; 2
 380:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 384:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
		else if (wheel == R_WHEEL) OCR5B = ontime + 25;
 388:	81 ec       	ldi	r24, 0xC1	; 193
 38a:	92 e0       	ldi	r25, 0x02	; 2
 38c:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 390:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 394:	08 95       	ret

00000396 <setTurnRight>:
}


void setTurnRight() {
	
	changeDirection(BACKWARD, L_WHEEL);
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	b3 df       	rcall	.-154    	; 0x306 <changeDirection>
	changeDirection(FORWARD, R_WHEEL);
 3a0:	61 e0       	ldi	r22, 0x01	; 1
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	ae df       	rcall	.-164    	; 0x306 <changeDirection>
		if (wheel == L_WHEEL) OCR5A = 0;
		else if (wheel == R_WHEEL) OCR5B = 0;
	} else {
		int ontime = ((int)(dutycycle * 400.0) + 400) ;
		
		if (wheel == L_WHEEL) OCR5A = ontime ;
 3aa:	88 ea       	ldi	r24, 0xA8	; 168
 3ac:	92 e0       	ldi	r25, 0x02	; 2
 3ae:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 3b2:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
		else if (wheel == R_WHEEL) OCR5B = ontime + 25;
 3b6:	81 ec       	ldi	r24, 0xC1	; 193
 3b8:	92 e0       	ldi	r25, 0x02	; 2
 3ba:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 3be:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 3c2:	08 95       	ret

000003c4 <turn>:
	changeDirection(FORWARD, R_WHEEL);
	setDutyCycle(0.7, L_WHEEL);
	setDutyCycle(0.7, R_WHEEL);
}

void turn(int d) {
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	ec 01       	movw	r28, r24
	stop();
 3ca:	bf df       	rcall	.-130    	; 0x34a <stop>
	//_delay_ms(100);
	cli();
 3cc:	f8 94       	cli
	
	if (d > 0) setTurnLeft();
 3ce:	1c 16       	cp	r1, r28
 3d0:	1d 06       	cpc	r1, r29
 3d2:	14 f4       	brge	.+4      	; 0x3d8 <turn+0x14>
 3d4:	c9 df       	rcall	.-110    	; 0x368 <setTurnLeft>
	else setTurnRight();
 3d6:	01 c0       	rjmp	.+2      	; 0x3da <turn+0x16>
 3d8:	de df       	rcall	.-68     	; 0x396 <setTurnRight>
	
	leftCount = 0;
 3da:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <leftCount+0x1>
 3de:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <leftCount>
	rightcount = 0;
 3e2:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <rightcount+0x1>
 3e6:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <rightcount>
	
	sei();
 3ea:	78 94       	sei
	
	int count = (d * 50) / 90;
 3ec:	22 e3       	ldi	r18, 0x32	; 50
 3ee:	2c 9f       	mul	r18, r28
 3f0:	c0 01       	movw	r24, r0
 3f2:	2d 9f       	mul	r18, r29
 3f4:	90 0d       	add	r25, r0
 3f6:	11 24       	eor	r1, r1
 3f8:	6a e5       	ldi	r22, 0x5A	; 90
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	de d1       	rcall	.+956    	; 0x7ba <__divmodhi4>

	while(leftCount < count) {
 3fe:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <leftCount>
 402:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <leftCount+0x1>
 406:	86 17       	cp	r24, r22
 408:	97 07       	cpc	r25, r23
 40a:	5c f4       	brge	.+22     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		 PORTF ^= (1<<PF2);
 40c:	24 e0       	ldi	r18, 0x04	; 4
 40e:	81 b3       	in	r24, 0x11	; 17
 410:	82 27       	eor	r24, r18
 412:	81 bb       	out	0x11, r24	; 17
	
	sei();
	
	int count = (d * 50) / 90;

	while(leftCount < count) {
 414:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <leftCount>
 418:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <leftCount+0x1>
 41c:	86 17       	cp	r24, r22
 41e:	97 07       	cpc	r25, r23
		 PORTF ^= (1<<PF2);
	}
	stop();
 420:	b4 f3       	brlt	.-20     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 422:	93 df       	rcall	.-218    	; 0x34a <stop>
	
}
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	08 95       	ret

0000042a <setDutyCycle>:
	}

}

// setDutyCycle accepts a dutycycle (number between 0.0 and 1.0) and the wheel (L_WHEEL or R_WHEEL)
void setDutyCycle(float dutycycle, int wheel) {
 42a:	cf 92       	push	r12
 42c:	df 92       	push	r13
 42e:	ef 92       	push	r14
 430:	ff 92       	push	r15
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	6b 01       	movw	r12, r22
 438:	7c 01       	movw	r14, r24
 43a:	ea 01       	movw	r28, r20
	
	if (dutycycle == 0) {
 43c:	20 e0       	ldi	r18, 0x00	; 0
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	a9 01       	movw	r20, r18
 442:	ae d0       	rcall	.+348    	; 0x5a0 <__cmpsf2>
 444:	81 11       	cpse	r24, r1
 446:	0e c0       	rjmp	.+28     	; 0x464 <setDutyCycle+0x3a>
		if (wheel == L_WHEEL) OCR5A = 0;
 448:	20 97       	sbiw	r28, 0x00	; 0
 44a:	29 f4       	brne	.+10     	; 0x456 <setDutyCycle+0x2c>
 44c:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 450:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 454:	20 c0       	rjmp	.+64     	; 0x496 <setDutyCycle+0x6c>
		else if (wheel == R_WHEEL) OCR5B = 0;
 456:	21 97       	sbiw	r28, 0x01	; 1
 458:	f1 f4       	brne	.+60     	; 0x496 <setDutyCycle+0x6c>
 45a:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 45e:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 462:	19 c0       	rjmp	.+50     	; 0x496 <setDutyCycle+0x6c>
	} else {
		int ontime = ((int)(dutycycle * 400.0) + 400) ;
 464:	20 e0       	ldi	r18, 0x00	; 0
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	48 ec       	ldi	r20, 0xC8	; 200
 46a:	53 e4       	ldi	r21, 0x43	; 67
 46c:	c7 01       	movw	r24, r14
 46e:	b6 01       	movw	r22, r12
 470:	19 d1       	rcall	.+562    	; 0x6a4 <__mulsf3>
 472:	9a d0       	rcall	.+308    	; 0x5a8 <__fixsfsi>
		
		if (wheel == L_WHEEL) OCR5A = ontime ;
 474:	20 97       	sbiw	r28, 0x00	; 0
 476:	39 f4       	brne	.+14     	; 0x486 <setDutyCycle+0x5c>
 478:	60 57       	subi	r22, 0x70	; 112
 47a:	7e 4f       	sbci	r23, 0xFE	; 254
 47c:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 480:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 484:	08 c0       	rjmp	.+16     	; 0x496 <setDutyCycle+0x6c>
		else if (wheel == R_WHEEL) OCR5B = ontime + 25;
 486:	21 97       	sbiw	r28, 0x01	; 1
 488:	31 f4       	brne	.+12     	; 0x496 <setDutyCycle+0x6c>
 48a:	67 55       	subi	r22, 0x57	; 87
 48c:	7e 4f       	sbci	r23, 0xFE	; 254
 48e:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 492:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
	}
}
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	ff 90       	pop	r15
 49c:	ef 90       	pop	r14
 49e:	df 90       	pop	r13
 4a0:	cf 90       	pop	r12
 4a2:	08 95       	ret

000004a4 <__vector_10>:


// pin 15 reads the right wheel, functions as the master
ISR(PCINT1_vect) {
 4a4:	1f 92       	push	r1
 4a6:	0f 92       	push	r0
 4a8:	0f b6       	in	r0, 0x3f	; 63
 4aa:	0f 92       	push	r0
 4ac:	11 24       	eor	r1, r1
 4ae:	0b b6       	in	r0, 0x3b	; 59
 4b0:	0f 92       	push	r0
 4b2:	2f 93       	push	r18
 4b4:	3f 93       	push	r19
 4b6:	4f 93       	push	r20
 4b8:	5f 93       	push	r21
 4ba:	6f 93       	push	r22
 4bc:	7f 93       	push	r23
 4be:	8f 93       	push	r24
 4c0:	9f 93       	push	r25
 4c2:	ef 93       	push	r30
 4c4:	ff 93       	push	r31
	//cli();
	//PSprintf(0, "%d\n\r", leftCount);
	//PORTB ^= 0x80;
	//PORTF ^= (1 << PF2);
	
	int J = PINJ;
 4c6:	e3 e0       	ldi	r30, 0x03	; 3
 4c8:	f1 e0       	ldi	r31, 0x01	; 1
 4ca:	40 81       	ld	r20, Z
 4cc:	50 e0       	ldi	r21, 0x00	; 0
	
	int change = J ^ oldJ;
	
	PORTF = change;
 4ce:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end>
 4d2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_end+0x1>
 4d6:	84 27       	eor	r24, r20
 4d8:	95 27       	eor	r25, r21
 4da:	81 bb       	out	0x11, r24	; 17
	
	int RisON = (PINJ | (1<<PJ1));
 4dc:	20 81       	ld	r18, Z
	int LisON = (PINJ | (1<<PJ0));
 4de:	80 81       	ld	r24, Z
	
	// If master
	if(change | (1 << PJ1)) {
		//	update interval time
		rightcount = rightcount + 1;
 4e0:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <rightcount>
 4e4:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <rightcount+0x1>
 4e8:	6f 5f       	subi	r22, 0xFF	; 255
 4ea:	7f 4f       	sbci	r23, 0xFF	; 255
 4ec:	70 93 03 02 	sts	0x0203, r23	; 0x800203 <rightcount+0x1>
 4f0:	60 93 02 02 	sts	0x0202, r22	; 0x800202 <rightcount>
		// else if slave
	}
	if(change | (1 << PJ0)) {
		//	compare interval time to master and adjust duty cycle accordingly.
		leftCount = leftCount + 1;
 4f4:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <leftCount>
 4f8:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <leftCount+0x1>
 4fc:	6f 5f       	subi	r22, 0xFF	; 255
 4fe:	7f 4f       	sbci	r23, 0xFF	; 255
 500:	70 93 05 02 	sts	0x0205, r23	; 0x800205 <leftCount+0x1>
 504:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <leftCount>
	}
	
	RwasOn = RisON;
 508:	22 60       	ori	r18, 0x02	; 2
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	30 93 0b 02 	sts	0x020B, r19	; 0x80020b <RwasOn+0x1>
 510:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <RwasOn>
	LwasOn = LisON;
 514:	81 60       	ori	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <LwasOn+0x1>
 51c:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <LwasOn>
	oldJ = J;
 520:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <__data_end+0x1>
 524:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <__data_end>
	//sei();
}
 528:	ff 91       	pop	r31
 52a:	ef 91       	pop	r30
 52c:	9f 91       	pop	r25
 52e:	8f 91       	pop	r24
 530:	7f 91       	pop	r23
 532:	6f 91       	pop	r22
 534:	5f 91       	pop	r21
 536:	4f 91       	pop	r20
 538:	3f 91       	pop	r19
 53a:	2f 91       	pop	r18
 53c:	0f 90       	pop	r0
 53e:	0b be       	out	0x3b, r0	; 59
 540:	0f 90       	pop	r0
 542:	0f be       	out	0x3f, r0	; 63
 544:	0f 90       	pop	r0
 546:	1f 90       	pop	r1
 548:	18 95       	reti

0000054a <init>:
#include "IRdetector.h"

void init() {
	//setTime();
	//PSerial_open(0, BAUD9600, SERIAL_8N1);
	initIRDet();
 54a:	ec dd       	rcall	.-1064   	; 0x124 <initIRDet>
	initWheels();
 54c:	97 ce       	rjmp	.-722    	; 0x27c <initWheels>
 54e:	08 95       	ret

00000550 <main>:
 550:	80 e8       	ldi	r24, 0x80	; 128

int main(void)
{
//PORTB |= 0x80;
	//PSerial_open(0, BAUD9600, SERIAL_8N1);
	DDRB = 0x80;
 552:	84 b9       	out	0x04, r24	; 4
	//DDRF |= (1<<DDF0)|(1<<DDF1)|(DDF2);
	init();
 554:	fa df       	rcall	.-12     	; 0x54a <init>
	//PORTJ &= ~(1 << PJ1);
	sei();
 556:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 558:	2f ef       	ldi	r18, 0xFF	; 255
 55a:	83 ed       	ldi	r24, 0xD3	; 211
 55c:	90 e3       	ldi	r25, 0x30	; 48
 55e:	21 50       	subi	r18, 0x01	; 1
 560:	80 40       	sbci	r24, 0x00	; 0
 562:	90 40       	sbci	r25, 0x00	; 0
 564:	e1 f7       	brne	.-8      	; 0x55e <main+0xe>
 566:	00 c0       	rjmp	.+0      	; 0x568 <main+0x18>
 568:	00 00       	nop

/* Replace with your application code */
	_delay_ms(1000);
	//changeDirection(FORWARD, L_WHEEL);
	
	setDutyCycle(0, L_WHEEL);
 56a:	40 e0       	ldi	r20, 0x00	; 0
 56c:	50 e0       	ldi	r21, 0x00	; 0
 56e:	60 e0       	ldi	r22, 0x00	; 0
 570:	70 e0       	ldi	r23, 0x00	; 0
 572:	cb 01       	movw	r24, r22
 574:	5a df       	rcall	.-332    	; 0x42a <setDutyCycle>
	setDutyCycle(0, R_WHEEL);
 576:	41 e0       	ldi	r20, 0x01	; 1
 578:	50 e0       	ldi	r21, 0x00	; 0
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	70 e0       	ldi	r23, 0x00	; 0
 57e:	cb 01       	movw	r24, r22
 580:	54 df       	rcall	.-344    	; 0x42a <setDutyCycle>
 582:	2f ef       	ldi	r18, 0xFF	; 255
 584:	8b e7       	ldi	r24, 0x7B	; 123
 586:	92 e9       	ldi	r25, 0x92	; 146
 588:	21 50       	subi	r18, 0x01	; 1
 58a:	80 40       	sbci	r24, 0x00	; 0
 58c:	90 40       	sbci	r25, 0x00	; 0
 58e:	e1 f7       	brne	.-8      	; 0x588 <main+0x38>
 590:	00 c0       	rjmp	.+0      	; 0x592 <main+0x42>
 592:	00 00       	nop
	while (1)
	{
		//unsigned long t = getTime();
		//PSprintf(0, "Time: %X\n\r", t);
		_delay_ms(3000);
		straight(0.5);
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	70 e0       	ldi	r23, 0x00	; 0
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	9f e3       	ldi	r25, 0x3F	; 63
 59c:	3e de       	rcall	.-900    	; 0x21a <straight>
 59e:	f1 cf       	rjmp	.-30     	; 0x582 <main+0x32>

000005a0 <__cmpsf2>:
 5a0:	34 d0       	rcall	.+104    	; 0x60a <__fp_cmp>
 5a2:	08 f4       	brcc	.+2      	; 0x5a6 <__cmpsf2+0x6>
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	08 95       	ret

000005a8 <__fixsfsi>:
 5a8:	04 d0       	rcall	.+8      	; 0x5b2 <__fixunssfsi>
 5aa:	68 94       	set
 5ac:	b1 11       	cpse	r27, r1
 5ae:	74 c0       	rjmp	.+232    	; 0x698 <__fp_szero>
 5b0:	08 95       	ret

000005b2 <__fixunssfsi>:
 5b2:	57 d0       	rcall	.+174    	; 0x662 <__fp_splitA>
 5b4:	88 f0       	brcs	.+34     	; 0x5d8 <__fixunssfsi+0x26>
 5b6:	9f 57       	subi	r25, 0x7F	; 127
 5b8:	90 f0       	brcs	.+36     	; 0x5de <__fixunssfsi+0x2c>
 5ba:	b9 2f       	mov	r27, r25
 5bc:	99 27       	eor	r25, r25
 5be:	b7 51       	subi	r27, 0x17	; 23
 5c0:	a0 f0       	brcs	.+40     	; 0x5ea <__fixunssfsi+0x38>
 5c2:	d1 f0       	breq	.+52     	; 0x5f8 <__fixunssfsi+0x46>
 5c4:	66 0f       	add	r22, r22
 5c6:	77 1f       	adc	r23, r23
 5c8:	88 1f       	adc	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	1a f0       	brmi	.+6      	; 0x5d4 <__fixunssfsi+0x22>
 5ce:	ba 95       	dec	r27
 5d0:	c9 f7       	brne	.-14     	; 0x5c4 <__fixunssfsi+0x12>
 5d2:	12 c0       	rjmp	.+36     	; 0x5f8 <__fixunssfsi+0x46>
 5d4:	b1 30       	cpi	r27, 0x01	; 1
 5d6:	81 f0       	breq	.+32     	; 0x5f8 <__fixunssfsi+0x46>
 5d8:	5e d0       	rcall	.+188    	; 0x696 <__fp_zero>
 5da:	b1 e0       	ldi	r27, 0x01	; 1
 5dc:	08 95       	ret
 5de:	5b c0       	rjmp	.+182    	; 0x696 <__fp_zero>
 5e0:	67 2f       	mov	r22, r23
 5e2:	78 2f       	mov	r23, r24
 5e4:	88 27       	eor	r24, r24
 5e6:	b8 5f       	subi	r27, 0xF8	; 248
 5e8:	39 f0       	breq	.+14     	; 0x5f8 <__fixunssfsi+0x46>
 5ea:	b9 3f       	cpi	r27, 0xF9	; 249
 5ec:	cc f3       	brlt	.-14     	; 0x5e0 <__fixunssfsi+0x2e>
 5ee:	86 95       	lsr	r24
 5f0:	77 95       	ror	r23
 5f2:	67 95       	ror	r22
 5f4:	b3 95       	inc	r27
 5f6:	d9 f7       	brne	.-10     	; 0x5ee <__fixunssfsi+0x3c>
 5f8:	3e f4       	brtc	.+14     	; 0x608 <__fixunssfsi+0x56>
 5fa:	90 95       	com	r25
 5fc:	80 95       	com	r24
 5fe:	70 95       	com	r23
 600:	61 95       	neg	r22
 602:	7f 4f       	sbci	r23, 0xFF	; 255
 604:	8f 4f       	sbci	r24, 0xFF	; 255
 606:	9f 4f       	sbci	r25, 0xFF	; 255
 608:	08 95       	ret

0000060a <__fp_cmp>:
 60a:	99 0f       	add	r25, r25
 60c:	00 08       	sbc	r0, r0
 60e:	55 0f       	add	r21, r21
 610:	aa 0b       	sbc	r26, r26
 612:	e0 e8       	ldi	r30, 0x80	; 128
 614:	fe ef       	ldi	r31, 0xFE	; 254
 616:	16 16       	cp	r1, r22
 618:	17 06       	cpc	r1, r23
 61a:	e8 07       	cpc	r30, r24
 61c:	f9 07       	cpc	r31, r25
 61e:	c0 f0       	brcs	.+48     	; 0x650 <__fp_cmp+0x46>
 620:	12 16       	cp	r1, r18
 622:	13 06       	cpc	r1, r19
 624:	e4 07       	cpc	r30, r20
 626:	f5 07       	cpc	r31, r21
 628:	98 f0       	brcs	.+38     	; 0x650 <__fp_cmp+0x46>
 62a:	62 1b       	sub	r22, r18
 62c:	73 0b       	sbc	r23, r19
 62e:	84 0b       	sbc	r24, r20
 630:	95 0b       	sbc	r25, r21
 632:	39 f4       	brne	.+14     	; 0x642 <__fp_cmp+0x38>
 634:	0a 26       	eor	r0, r26
 636:	61 f0       	breq	.+24     	; 0x650 <__fp_cmp+0x46>
 638:	23 2b       	or	r18, r19
 63a:	24 2b       	or	r18, r20
 63c:	25 2b       	or	r18, r21
 63e:	21 f4       	brne	.+8      	; 0x648 <__fp_cmp+0x3e>
 640:	08 95       	ret
 642:	0a 26       	eor	r0, r26
 644:	09 f4       	brne	.+2      	; 0x648 <__fp_cmp+0x3e>
 646:	a1 40       	sbci	r26, 0x01	; 1
 648:	a6 95       	lsr	r26
 64a:	8f ef       	ldi	r24, 0xFF	; 255
 64c:	81 1d       	adc	r24, r1
 64e:	81 1d       	adc	r24, r1
 650:	08 95       	ret

00000652 <__fp_split3>:
 652:	57 fd       	sbrc	r21, 7
 654:	90 58       	subi	r25, 0x80	; 128
 656:	44 0f       	add	r20, r20
 658:	55 1f       	adc	r21, r21
 65a:	59 f0       	breq	.+22     	; 0x672 <__fp_splitA+0x10>
 65c:	5f 3f       	cpi	r21, 0xFF	; 255
 65e:	71 f0       	breq	.+28     	; 0x67c <__fp_splitA+0x1a>
 660:	47 95       	ror	r20

00000662 <__fp_splitA>:
 662:	88 0f       	add	r24, r24
 664:	97 fb       	bst	r25, 7
 666:	99 1f       	adc	r25, r25
 668:	61 f0       	breq	.+24     	; 0x682 <__fp_splitA+0x20>
 66a:	9f 3f       	cpi	r25, 0xFF	; 255
 66c:	79 f0       	breq	.+30     	; 0x68c <__fp_splitA+0x2a>
 66e:	87 95       	ror	r24
 670:	08 95       	ret
 672:	12 16       	cp	r1, r18
 674:	13 06       	cpc	r1, r19
 676:	14 06       	cpc	r1, r20
 678:	55 1f       	adc	r21, r21
 67a:	f2 cf       	rjmp	.-28     	; 0x660 <__fp_split3+0xe>
 67c:	46 95       	lsr	r20
 67e:	f1 df       	rcall	.-30     	; 0x662 <__fp_splitA>
 680:	08 c0       	rjmp	.+16     	; 0x692 <__fp_splitA+0x30>
 682:	16 16       	cp	r1, r22
 684:	17 06       	cpc	r1, r23
 686:	18 06       	cpc	r1, r24
 688:	99 1f       	adc	r25, r25
 68a:	f1 cf       	rjmp	.-30     	; 0x66e <__fp_splitA+0xc>
 68c:	86 95       	lsr	r24
 68e:	71 05       	cpc	r23, r1
 690:	61 05       	cpc	r22, r1
 692:	08 94       	sec
 694:	08 95       	ret

00000696 <__fp_zero>:
 696:	e8 94       	clt

00000698 <__fp_szero>:
 698:	bb 27       	eor	r27, r27
 69a:	66 27       	eor	r22, r22
 69c:	77 27       	eor	r23, r23
 69e:	cb 01       	movw	r24, r22
 6a0:	97 f9       	bld	r25, 7
 6a2:	08 95       	ret

000006a4 <__mulsf3>:
 6a4:	0b d0       	rcall	.+22     	; 0x6bc <__mulsf3x>
 6a6:	78 c0       	rjmp	.+240    	; 0x798 <__fp_round>
 6a8:	69 d0       	rcall	.+210    	; 0x77c <__fp_pscA>
 6aa:	28 f0       	brcs	.+10     	; 0x6b6 <__mulsf3+0x12>
 6ac:	6e d0       	rcall	.+220    	; 0x78a <__fp_pscB>
 6ae:	18 f0       	brcs	.+6      	; 0x6b6 <__mulsf3+0x12>
 6b0:	95 23       	and	r25, r21
 6b2:	09 f0       	breq	.+2      	; 0x6b6 <__mulsf3+0x12>
 6b4:	5a c0       	rjmp	.+180    	; 0x76a <__fp_inf>
 6b6:	5f c0       	rjmp	.+190    	; 0x776 <__fp_nan>
 6b8:	11 24       	eor	r1, r1
 6ba:	ee cf       	rjmp	.-36     	; 0x698 <__fp_szero>

000006bc <__mulsf3x>:
 6bc:	ca df       	rcall	.-108    	; 0x652 <__fp_split3>
 6be:	a0 f3       	brcs	.-24     	; 0x6a8 <__mulsf3+0x4>

000006c0 <__mulsf3_pse>:
 6c0:	95 9f       	mul	r25, r21
 6c2:	d1 f3       	breq	.-12     	; 0x6b8 <__mulsf3+0x14>
 6c4:	95 0f       	add	r25, r21
 6c6:	50 e0       	ldi	r21, 0x00	; 0
 6c8:	55 1f       	adc	r21, r21
 6ca:	62 9f       	mul	r22, r18
 6cc:	f0 01       	movw	r30, r0
 6ce:	72 9f       	mul	r23, r18
 6d0:	bb 27       	eor	r27, r27
 6d2:	f0 0d       	add	r31, r0
 6d4:	b1 1d       	adc	r27, r1
 6d6:	63 9f       	mul	r22, r19
 6d8:	aa 27       	eor	r26, r26
 6da:	f0 0d       	add	r31, r0
 6dc:	b1 1d       	adc	r27, r1
 6de:	aa 1f       	adc	r26, r26
 6e0:	64 9f       	mul	r22, r20
 6e2:	66 27       	eor	r22, r22
 6e4:	b0 0d       	add	r27, r0
 6e6:	a1 1d       	adc	r26, r1
 6e8:	66 1f       	adc	r22, r22
 6ea:	82 9f       	mul	r24, r18
 6ec:	22 27       	eor	r18, r18
 6ee:	b0 0d       	add	r27, r0
 6f0:	a1 1d       	adc	r26, r1
 6f2:	62 1f       	adc	r22, r18
 6f4:	73 9f       	mul	r23, r19
 6f6:	b0 0d       	add	r27, r0
 6f8:	a1 1d       	adc	r26, r1
 6fa:	62 1f       	adc	r22, r18
 6fc:	83 9f       	mul	r24, r19
 6fe:	a0 0d       	add	r26, r0
 700:	61 1d       	adc	r22, r1
 702:	22 1f       	adc	r18, r18
 704:	74 9f       	mul	r23, r20
 706:	33 27       	eor	r19, r19
 708:	a0 0d       	add	r26, r0
 70a:	61 1d       	adc	r22, r1
 70c:	23 1f       	adc	r18, r19
 70e:	84 9f       	mul	r24, r20
 710:	60 0d       	add	r22, r0
 712:	21 1d       	adc	r18, r1
 714:	82 2f       	mov	r24, r18
 716:	76 2f       	mov	r23, r22
 718:	6a 2f       	mov	r22, r26
 71a:	11 24       	eor	r1, r1
 71c:	9f 57       	subi	r25, 0x7F	; 127
 71e:	50 40       	sbci	r21, 0x00	; 0
 720:	8a f0       	brmi	.+34     	; 0x744 <__mulsf3_pse+0x84>
 722:	e1 f0       	breq	.+56     	; 0x75c <__mulsf3_pse+0x9c>
 724:	88 23       	and	r24, r24
 726:	4a f0       	brmi	.+18     	; 0x73a <__mulsf3_pse+0x7a>
 728:	ee 0f       	add	r30, r30
 72a:	ff 1f       	adc	r31, r31
 72c:	bb 1f       	adc	r27, r27
 72e:	66 1f       	adc	r22, r22
 730:	77 1f       	adc	r23, r23
 732:	88 1f       	adc	r24, r24
 734:	91 50       	subi	r25, 0x01	; 1
 736:	50 40       	sbci	r21, 0x00	; 0
 738:	a9 f7       	brne	.-22     	; 0x724 <__mulsf3_pse+0x64>
 73a:	9e 3f       	cpi	r25, 0xFE	; 254
 73c:	51 05       	cpc	r21, r1
 73e:	70 f0       	brcs	.+28     	; 0x75c <__mulsf3_pse+0x9c>
 740:	14 c0       	rjmp	.+40     	; 0x76a <__fp_inf>
 742:	aa cf       	rjmp	.-172    	; 0x698 <__fp_szero>
 744:	5f 3f       	cpi	r21, 0xFF	; 255
 746:	ec f3       	brlt	.-6      	; 0x742 <__mulsf3_pse+0x82>
 748:	98 3e       	cpi	r25, 0xE8	; 232
 74a:	dc f3       	brlt	.-10     	; 0x742 <__mulsf3_pse+0x82>
 74c:	86 95       	lsr	r24
 74e:	77 95       	ror	r23
 750:	67 95       	ror	r22
 752:	b7 95       	ror	r27
 754:	f7 95       	ror	r31
 756:	e7 95       	ror	r30
 758:	9f 5f       	subi	r25, 0xFF	; 255
 75a:	c1 f7       	brne	.-16     	; 0x74c <__mulsf3_pse+0x8c>
 75c:	fe 2b       	or	r31, r30
 75e:	88 0f       	add	r24, r24
 760:	91 1d       	adc	r25, r1
 762:	96 95       	lsr	r25
 764:	87 95       	ror	r24
 766:	97 f9       	bld	r25, 7
 768:	08 95       	ret

0000076a <__fp_inf>:
 76a:	97 f9       	bld	r25, 7
 76c:	9f 67       	ori	r25, 0x7F	; 127
 76e:	80 e8       	ldi	r24, 0x80	; 128
 770:	70 e0       	ldi	r23, 0x00	; 0
 772:	60 e0       	ldi	r22, 0x00	; 0
 774:	08 95       	ret

00000776 <__fp_nan>:
 776:	9f ef       	ldi	r25, 0xFF	; 255
 778:	80 ec       	ldi	r24, 0xC0	; 192
 77a:	08 95       	ret

0000077c <__fp_pscA>:
 77c:	00 24       	eor	r0, r0
 77e:	0a 94       	dec	r0
 780:	16 16       	cp	r1, r22
 782:	17 06       	cpc	r1, r23
 784:	18 06       	cpc	r1, r24
 786:	09 06       	cpc	r0, r25
 788:	08 95       	ret

0000078a <__fp_pscB>:
 78a:	00 24       	eor	r0, r0
 78c:	0a 94       	dec	r0
 78e:	12 16       	cp	r1, r18
 790:	13 06       	cpc	r1, r19
 792:	14 06       	cpc	r1, r20
 794:	05 06       	cpc	r0, r21
 796:	08 95       	ret

00000798 <__fp_round>:
 798:	09 2e       	mov	r0, r25
 79a:	03 94       	inc	r0
 79c:	00 0c       	add	r0, r0
 79e:	11 f4       	brne	.+4      	; 0x7a4 <__fp_round+0xc>
 7a0:	88 23       	and	r24, r24
 7a2:	52 f0       	brmi	.+20     	; 0x7b8 <__fp_round+0x20>
 7a4:	bb 0f       	add	r27, r27
 7a6:	40 f4       	brcc	.+16     	; 0x7b8 <__fp_round+0x20>
 7a8:	bf 2b       	or	r27, r31
 7aa:	11 f4       	brne	.+4      	; 0x7b0 <__fp_round+0x18>
 7ac:	60 ff       	sbrs	r22, 0
 7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <__fp_round+0x20>
 7b0:	6f 5f       	subi	r22, 0xFF	; 255
 7b2:	7f 4f       	sbci	r23, 0xFF	; 255
 7b4:	8f 4f       	sbci	r24, 0xFF	; 255
 7b6:	9f 4f       	sbci	r25, 0xFF	; 255
 7b8:	08 95       	ret

000007ba <__divmodhi4>:
 7ba:	97 fb       	bst	r25, 7
 7bc:	07 2e       	mov	r0, r23
 7be:	16 f4       	brtc	.+4      	; 0x7c4 <__divmodhi4+0xa>
 7c0:	00 94       	com	r0
 7c2:	06 d0       	rcall	.+12     	; 0x7d0 <__divmodhi4_neg1>
 7c4:	77 fd       	sbrc	r23, 7
 7c6:	08 d0       	rcall	.+16     	; 0x7d8 <__divmodhi4_neg2>
 7c8:	0b d0       	rcall	.+22     	; 0x7e0 <__udivmodhi4>
 7ca:	07 fc       	sbrc	r0, 7
 7cc:	05 d0       	rcall	.+10     	; 0x7d8 <__divmodhi4_neg2>
 7ce:	3e f4       	brtc	.+14     	; 0x7de <__divmodhi4_exit>

000007d0 <__divmodhi4_neg1>:
 7d0:	90 95       	com	r25
 7d2:	81 95       	neg	r24
 7d4:	9f 4f       	sbci	r25, 0xFF	; 255
 7d6:	08 95       	ret

000007d8 <__divmodhi4_neg2>:
 7d8:	70 95       	com	r23
 7da:	61 95       	neg	r22
 7dc:	7f 4f       	sbci	r23, 0xFF	; 255

000007de <__divmodhi4_exit>:
 7de:	08 95       	ret

000007e0 <__udivmodhi4>:
 7e0:	aa 1b       	sub	r26, r26
 7e2:	bb 1b       	sub	r27, r27
 7e4:	51 e1       	ldi	r21, 0x11	; 17
 7e6:	07 c0       	rjmp	.+14     	; 0x7f6 <__udivmodhi4_ep>

000007e8 <__udivmodhi4_loop>:
 7e8:	aa 1f       	adc	r26, r26
 7ea:	bb 1f       	adc	r27, r27
 7ec:	a6 17       	cp	r26, r22
 7ee:	b7 07       	cpc	r27, r23
 7f0:	10 f0       	brcs	.+4      	; 0x7f6 <__udivmodhi4_ep>
 7f2:	a6 1b       	sub	r26, r22
 7f4:	b7 0b       	sbc	r27, r23

000007f6 <__udivmodhi4_ep>:
 7f6:	88 1f       	adc	r24, r24
 7f8:	99 1f       	adc	r25, r25
 7fa:	5a 95       	dec	r21
 7fc:	a9 f7       	brne	.-22     	; 0x7e8 <__udivmodhi4_loop>
 7fe:	80 95       	com	r24
 800:	90 95       	com	r25
 802:	bc 01       	movw	r22, r24
 804:	cd 01       	movw	r24, r26
 806:	08 95       	ret

00000808 <_exit>:
 808:	f8 94       	cli

0000080a <__stop_program>:
 80a:	ff cf       	rjmp	.-2      	; 0x80a <__stop_program>
