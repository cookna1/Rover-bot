
Rover-bot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  00000bf6  00000c8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bf6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000861  00800210  00800210  00000c9a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ccc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00000d10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002128  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001302  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000122c  00000000  00000000  00004312  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f0  00000000  00000000  00005540  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009db  00000000  00000000  00005930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b78  00000000  00000000  0000630b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00006e83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	f1 c2       	rjmp	.+1506   	; 0x60c <__vector_10>
  2a:	00 00       	nop
  2c:	f4 c0       	rjmp	.+488    	; 0x216 <__vector_11>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	5e c1       	rjmp	.+700    	; 0x2f2 <__vector_13>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c5       	rjmp	.+2632   	; 0xa9e <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 ef       	ldi	r30, 0xF6	; 246
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 31       	cpi	r26, 0x10	; 16
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	2a e0       	ldi	r18, 0x0A	; 10
 110:	a0 e1       	ldi	r26, 0x10	; 16
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 37       	cpi	r26, 0x71	; 113
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	d5 d2       	rcall	.+1450   	; 0x6ca <main>
 120:	68 c5       	rjmp	.+2768   	; 0xbf2 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <x_yield>:
 124:	2f 92       	push	r2
 126:	3f 92       	push	r3
 128:	4f 92       	push	r4
 12a:	5f 92       	push	r5
 12c:	6f 92       	push	r6
 12e:	7f 92       	push	r7
 130:	8f 92       	push	r8
 132:	9f 92       	push	r9
 134:	af 92       	push	r10
 136:	bf 92       	push	r11
 138:	cf 92       	push	r12
 13a:	df 92       	push	r13
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	20 91 3c 02 	lds	r18, 0x023C	; 0x80023c <x_thread_id>
 14c:	30 91 70 0a 	lds	r19, 0x0A70	; 0x800a70 <x_thread_mask>
 150:	f8 94       	cli
 152:	ed b6       	in	r14, 0x3d	; 61
 154:	fe b6       	in	r15, 0x3e	; 62
 156:	78 94       	sei
 158:	ee e3       	ldi	r30, 0x3E	; 62
 15a:	f2 e0       	ldi	r31, 0x02	; 2
 15c:	22 0f       	add	r18, r18
 15e:	c0 e0       	ldi	r28, 0x00	; 0
 160:	d2 e0       	ldi	r29, 0x02	; 2
 162:	c2 0f       	add	r28, r18
 164:	d1 1d       	adc	r29, r1
 166:	19 91       	ld	r17, Y+
 168:	d8 81       	ld	r29, Y
 16a:	c1 2f       	mov	r28, r17
 16c:	18 81       	ld	r17, Y
 16e:	1a 3a       	cpi	r17, 0xAA	; 170
 170:	21 f0       	breq	.+8      	; 0x17a <x_yield+0x56>
 172:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <x_thread_id>
 176:	91 2d       	mov	r25, r1
 178:	de c4       	rjmp	.+2492   	; 0xb36 <x_stack_overflow>
 17a:	22 0f       	add	r18, r18
 17c:	e2 0f       	add	r30, r18
 17e:	f1 1d       	adc	r31, r1
 180:	e1 92       	st	Z+, r14
 182:	f0 82       	st	Z, r15

00000184 <x_schedule>:
 184:	20 91 6f 0a 	lds	r18, 0x0A6F	; 0x800a6f <x_disable_status>
 188:	30 91 3d 02 	lds	r19, 0x023D	; 0x80023d <x_delay_status>
 18c:	40 91 5e 02 	lds	r20, 0x025E	; 0x80025e <x_suspend_status>
 190:	23 2b       	or	r18, r19
 192:	24 2b       	or	r18, r20
 194:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <x_thread_id>
 198:	40 91 70 0a 	lds	r20, 0x0A70	; 0x800a70 <x_thread_mask>
 19c:	68 e0       	ldi	r22, 0x08	; 8
 19e:	88 94       	clc
 1a0:	33 95       	inc	r19
 1a2:	37 70       	andi	r19, 0x07	; 7
 1a4:	44 1f       	adc	r20, r20
 1a6:	41 1d       	adc	r20, r1
 1a8:	74 2f       	mov	r23, r20
 1aa:	42 23       	and	r20, r18
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <restore>
 1ae:	6a 95       	dec	r22
 1b0:	b9 f7       	brne	.-18     	; 0x1a0 <x_schedule+0x1c>
 1b2:	e8 cf       	rjmp	.-48     	; 0x184 <x_schedule>

000001b4 <restore>:
 1b4:	30 93 3c 02 	sts	0x023C, r19	; 0x80023c <x_thread_id>
 1b8:	70 93 70 0a 	sts	0x0A70, r23	; 0x800a70 <x_thread_mask>
 1bc:	ee e3       	ldi	r30, 0x3E	; 62
 1be:	f2 e0       	ldi	r31, 0x02	; 2
 1c0:	33 0f       	add	r19, r19
 1c2:	33 0f       	add	r19, r19
 1c4:	e3 0f       	add	r30, r19
 1c6:	f1 1d       	adc	r31, r1
 1c8:	21 91       	ld	r18, Z+
 1ca:	30 81       	ld	r19, Z
 1cc:	f8 94       	cli
 1ce:	2d bf       	out	0x3d, r18	; 61
 1d0:	3e bf       	out	0x3e, r19	; 62
 1d2:	78 94       	sei
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	ff 90       	pop	r15
 1de:	ef 90       	pop	r14
 1e0:	df 90       	pop	r13
 1e2:	cf 90       	pop	r12
 1e4:	bf 90       	pop	r11
 1e6:	af 90       	pop	r10
 1e8:	9f 90       	pop	r9
 1ea:	8f 90       	pop	r8
 1ec:	7f 90       	pop	r7
 1ee:	6f 90       	pop	r6
 1f0:	5f 90       	pop	r5
 1f2:	85 2d       	mov	r24, r5
 1f4:	4f 90       	pop	r4
 1f6:	94 2d       	mov	r25, r4
 1f8:	3f 90       	pop	r3
 1fa:	63 2d       	mov	r22, r3
 1fc:	2f 90       	pop	r2
 1fe:	72 2d       	mov	r23, r2
 200:	08 95       	ret

00000202 <bit2mask8>:
 202:	ee e0       	ldi	r30, 0x0E	; 14
 204:	f2 e0       	ldi	r31, 0x02	; 2
 206:	e8 0f       	add	r30, r24
 208:	f1 1d       	adc	r31, r1
 20a:	84 91       	lpm	r24, Z
 20c:	08 95       	ret

0000020e <bitmask8_table>:
 20e:	01 02       	muls	r16, r17
 210:	04 08       	sbc	r0, r4
 212:	10 20       	and	r1, r0
 214:	40 80       	ld	r4, Z

00000216 <__vector_11>:
		x_yield();
	}
}


ISR(PCINT2_vect) {
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	11 24       	eor	r1, r1
 220:	0b b6       	in	r0, 0x3b	; 59
 222:	0f 92       	push	r0
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
 228:	ef 93       	push	r30
 22a:	ff 93       	push	r31
	
 	if (i==1) // HIGH to LOW
 22c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__data_end>
 230:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__data_end+0x1>
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	81 f4       	brne	.+32     	; 0x258 <__vector_11+0x42>
 	{
		 
	 	TCCR1B=0; //stop counter
 238:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	 	pulse=TCNT1; //count memory is updated to int
 23c:	e4 e8       	ldi	r30, 0x84	; 132
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	91 81       	ldd	r25, Z+1	; 0x01
 244:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <pulse+0x1>
 248:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <pulse>
	 	TCNT1=0; //resetting t he counter memory
 24c:	11 82       	std	Z+1, r1	; 0x01
 24e:	10 82       	st	Z, r1
	 	i=0;
 250:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <__data_end+0x1>
 254:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <__data_end>
 	}
 	if (i==0) //LOW to HIGH
 258:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__data_end>
 25c:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__data_end+0x1>
 260:	89 2b       	or	r24, r25
 262:	59 f4       	brne	.+22     	; 0x27a <__vector_11+0x64>
 	{
		
	 	TCCR1B|=(1<<CS10); //Enable counter
 264:	e1 e8       	ldi	r30, 0x81	; 129
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	81 60       	ori	r24, 0x01	; 1
 26c:	80 83       	st	Z, r24
	 	i=1;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <__data_end+0x1>
 276:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <__data_end>
 	}
	
 27a:	ff 91       	pop	r31
 27c:	ef 91       	pop	r30
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	0f 90       	pop	r0
 284:	0b be       	out	0x3b, r0	; 59
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <initIRDet>:
#include "wheels.h"
#include "acx.h"
#include "acxserial.h"

void initIRDet() {
	DDRF &= ~((1<<PF7) | (1<<PF6));
 290:	80 b3       	in	r24, 0x10	; 16
 292:	8f 73       	andi	r24, 0x3F	; 63
 294:	80 bb       	out	0x10, r24	; 16
	DDRF |= 0x03;
 296:	80 b3       	in	r24, 0x10	; 16
 298:	83 60       	ori	r24, 0x03	; 3
 29a:	80 bb       	out	0x10, r24	; 16
 29c:	08 95       	ret

0000029e <irControl>:
		} else if (!(PINF & (1 << PD6) && (PINF & (1 << PD7)))) {// both sensors
			stop();
			if (turnedOn) setMode(DONE);
			
		} else {
			turnedOn = 1;
 29e:	c1 e0       	ldi	r28, 0x01	; 1
 2a0:	d0 e0       	ldi	r29, 0x00	; 0

int turnedOn = 0;

void irControl() {
	while(1) {
		if (getMode() == DONE) {
 2a2:	ff d1       	rcall	.+1022   	; 0x6a2 <getMode>
 2a4:	01 96       	adiw	r24, 0x01	; 1
 2a6:	19 f1       	breq	.+70     	; 0x2ee <irControl+0x50>
			// do nothing
		} else if(PINF & (1 << PD6) && !(PINF & (1 << PD7))){ //LEFT SENSOR
 2a8:	7e 9b       	sbis	0x0f, 6	; 15
 2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <irControl+0x1a>
 2ac:	7f 99       	sbic	0x0f, 7	; 15
 2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <irControl+0x1a>
			//PORTF |= (1 << PF0);  //TODO This part should change based on what needs to be done if left sensor get high
			//_delay_ms(100);
			//PORTF &= 1;
			turn(-5);
 2b0:	8b ef       	ldi	r24, 0xFB	; 251
 2b2:	9f ef       	ldi	r25, 0xFF	; 255
 2b4:	21 d1       	rcall	.+578    	; 0x4f8 <turn>
 2b6:	1b c0       	rjmp	.+54     	; 0x2ee <irControl+0x50>
		}
		else if(PINF & (1 << PD7) && !(PINF & (1 << PD6))) { //RIGHT SENSOR
 2b8:	7f 9b       	sbis	0x0f, 7	; 15
 2ba:	06 c0       	rjmp	.+12     	; 0x2c8 <irControl+0x2a>
 2bc:	7e 99       	sbic	0x0f, 6	; 15
 2be:	04 c0       	rjmp	.+8      	; 0x2c8 <irControl+0x2a>
			//PORTF |= (1 << PF1); //TODO This part should change based on what needs to be done if right sensor get high
			//_delay_ms(100);
			//PORTF &= 2;
			turn(5);
 2c0:	85 e0       	ldi	r24, 0x05	; 5
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	19 d1       	rcall	.+562    	; 0x4f8 <turn>
 2c6:	13 c0       	rjmp	.+38     	; 0x2ee <irControl+0x50>
		} else if (!(PINF & (1 << PD6) && (PINF & (1 << PD7)))) {// both sensors
 2c8:	7e 9b       	sbis	0x0f, 6	; 15
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <irControl+0x32>
 2cc:	7f 99       	sbic	0x0f, 7	; 15
			stop();
 2ce:	0b c0       	rjmp	.+22     	; 0x2e6 <irControl+0x48>
 2d0:	cf d0       	rcall	.+414    	; 0x470 <stop>
			if (turnedOn) setMode(DONE);
 2d2:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <turnedOn>
 2d6:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <turnedOn+0x1>
 2da:	89 2b       	or	r24, r25
 2dc:	41 f0       	breq	.+16     	; 0x2ee <irControl+0x50>
 2de:	8f ef       	ldi	r24, 0xFF	; 255
 2e0:	9f ef       	ldi	r25, 0xFF	; 255
 2e2:	e4 d1       	rcall	.+968    	; 0x6ac <setMode>
			
		} else {
			turnedOn = 1;
 2e4:	04 c0       	rjmp	.+8      	; 0x2ee <irControl+0x50>
 2e6:	d0 93 15 02 	sts	0x0215, r29	; 0x800215 <turnedOn+0x1>
 2ea:	c0 93 14 02 	sts	0x0214, r28	; 0x800214 <turnedOn>
		}
		x_yield();
 2ee:	1a df       	rcall	.-460    	; 0x124 <x_yield>
	}
 2f0:	d8 cf       	rjmp	.-80     	; 0x2a2 <irControl+0x4>

000002f2 <__vector_13>:
	TIMSK2 |= (1 << OCIE2A);
	
	OCR2A = tickTime;
}

ISR(TIMER2_COMPA_vect) {
 2f2:	1f 92       	push	r1
 2f4:	0f 92       	push	r0
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	0f 92       	push	r0
 2fa:	11 24       	eor	r1, r1
 2fc:	8f 93       	push	r24
 2fe:	9f 93       	push	r25
 300:	af 93       	push	r26
 302:	bf 93       	push	r27
	timeCounter++;
 304:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <timeCounter>
 308:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <timeCounter+0x1>
 30c:	a0 91 24 02 	lds	r26, 0x0224	; 0x800224 <timeCounter+0x2>
 310:	b0 91 25 02 	lds	r27, 0x0225	; 0x800225 <timeCounter+0x3>
 314:	01 96       	adiw	r24, 0x01	; 1
 316:	a1 1d       	adc	r26, r1
 318:	b1 1d       	adc	r27, r1
 31a:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <timeCounter>
 31e:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <timeCounter+0x1>
 322:	a0 93 24 02 	sts	0x0224, r26	; 0x800224 <timeCounter+0x2>
 326:	b0 93 25 02 	sts	0x0225, r27	; 0x800225 <timeCounter+0x3>
	/*if (timeCounter % 1000 == 0)*/ //PORTB ^= 0x80;
 32a:	bf 91       	pop	r27
 32c:	af 91       	pop	r26
 32e:	9f 91       	pop	r25
 330:	8f 91       	pop	r24
 332:	0f 90       	pop	r0
 334:	0f be       	out	0x3f, r0	; 63
 336:	0f 90       	pop	r0
 338:	1f 90       	pop	r1
 33a:	18 95       	reti

0000033c <changeDirection>:
	straight(0.7);
	float inches = 0;
	while(leftCount < 150) {
		 //PORTF ^= (1<<PF2);
	}
	straight(0);
 33c:	61 15       	cp	r22, r1
 33e:	71 05       	cpc	r23, r1
 340:	71 f4       	brne	.+28     	; 0x35e <changeDirection+0x22>
 342:	00 97       	sbiw	r24, 0x00	; 0
 344:	29 f4       	brne	.+10     	; 0x350 <changeDirection+0x14>
 346:	88 b1       	in	r24, 0x08	; 8
 348:	83 7f       	andi	r24, 0xF3	; 243
 34a:	88 b9       	out	0x08, r24	; 8
 34c:	43 9a       	sbi	0x08, 3	; 8
 34e:	08 95       	ret
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	a9 f4       	brne	.+42     	; 0x37e <changeDirection+0x42>
 354:	88 b1       	in	r24, 0x08	; 8
 356:	83 7f       	andi	r24, 0xF3	; 243
 358:	88 b9       	out	0x08, r24	; 8
 35a:	42 9a       	sbi	0x08, 2	; 8
 35c:	08 95       	ret
 35e:	61 30       	cpi	r22, 0x01	; 1
 360:	71 05       	cpc	r23, r1
 362:	69 f4       	brne	.+26     	; 0x37e <changeDirection+0x42>
 364:	00 97       	sbiw	r24, 0x00	; 0
 366:	29 f4       	brne	.+10     	; 0x372 <changeDirection+0x36>
 368:	88 b1       	in	r24, 0x08	; 8
 36a:	8c 7f       	andi	r24, 0xFC	; 252
 36c:	88 b9       	out	0x08, r24	; 8
 36e:	40 9a       	sbi	0x08, 0	; 8
 370:	08 95       	ret
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	21 f4       	brne	.+8      	; 0x37e <changeDirection+0x42>
 376:	88 b1       	in	r24, 0x08	; 8
 378:	8c 7f       	andi	r24, 0xFC	; 252
 37a:	88 b9       	out	0x08, r24	; 8
 37c:	41 9a       	sbi	0x08, 1	; 8
 37e:	08 95       	ret

00000380 <setDutyCycle>:
 380:	cf 92       	push	r12
 382:	df 92       	push	r13
 384:	ef 92       	push	r14
 386:	ff 92       	push	r15
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	6b 01       	movw	r12, r22
 38e:	7c 01       	movw	r14, r24
 390:	ea 01       	movw	r28, r20
 392:	f8 94       	cli
 394:	20 e0       	ldi	r18, 0x00	; 0
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	a9 01       	movw	r20, r18
 39a:	aa d1       	rcall	.+852    	; 0x6f0 <__cmpsf2>
 39c:	81 11       	cpse	r24, r1
 39e:	0e c0       	rjmp	.+28     	; 0x3bc <setDutyCycle+0x3c>
 3a0:	20 97       	sbiw	r28, 0x00	; 0
 3a2:	29 f4       	brne	.+10     	; 0x3ae <setDutyCycle+0x2e>
 3a4:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 3a8:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 3ac:	30 c0       	rjmp	.+96     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3ae:	21 97       	sbiw	r28, 0x01	; 1
 3b0:	71 f5       	brne	.+92     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3b2:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 3b6:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 3ba:	29 c0       	rjmp	.+82     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3bc:	20 e0       	ldi	r18, 0x00	; 0
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	48 ec       	ldi	r20, 0xC8	; 200
 3c2:	53 e4       	ldi	r21, 0x43	; 67
 3c4:	c7 01       	movw	r24, r14
 3c6:	b6 01       	movw	r22, r12
 3c8:	15 d2       	rcall	.+1066   	; 0x7f4 <__mulsf3>
 3ca:	96 d1       	rcall	.+812    	; 0x6f8 <__fixsfsi>
 3cc:	60 57       	subi	r22, 0x70	; 112
 3ce:	7e 4f       	sbci	r23, 0xFE	; 254
 3d0:	20 97       	sbiw	r28, 0x00	; 0
 3d2:	71 f4       	brne	.+28     	; 0x3f0 <setDutyCycle+0x70>
 3d4:	16 16       	cp	r1, r22
 3d6:	17 06       	cpc	r1, r23
 3d8:	d4 f4       	brge	.+52     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	e8 e2       	ldi	r30, 0x28	; 40
 3e0:	f1 e0       	ldi	r31, 0x01	; 1
 3e2:	91 83       	std	Z+1, r25	; 0x01
 3e4:	80 83       	st	Z, r24
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	86 17       	cp	r24, r22
 3ea:	97 07       	cpc	r25, r23
 3ec:	d4 f3       	brlt	.-12     	; 0x3e2 <setDutyCycle+0x62>
 3ee:	0f c0       	rjmp	.+30     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3f0:	21 97       	sbiw	r28, 0x01	; 1
 3f2:	69 f4       	brne	.+26     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3f4:	16 16       	cp	r1, r22
 3f6:	17 06       	cpc	r1, r23
 3f8:	54 f4       	brge	.+20     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	ea e2       	ldi	r30, 0x2A	; 42
 400:	f1 e0       	ldi	r31, 0x01	; 1
 402:	91 83       	std	Z+1, r25	; 0x01
 404:	80 83       	st	Z, r24
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	86 17       	cp	r24, r22
 40a:	97 07       	cpc	r25, r23
 40c:	d4 f3       	brlt	.-12     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 40e:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
 412:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
 416:	78 94       	sei
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	ff 90       	pop	r15
 41e:	ef 90       	pop	r14
 420:	df 90       	pop	r13
 422:	cf 90       	pop	r12
 424:	08 95       	ret

00000426 <straight>:
 426:	cf 92       	push	r12
 428:	df 92       	push	r13
 42a:	ef 92       	push	r14
 42c:	ff 92       	push	r15
 42e:	6b 01       	movw	r12, r22
 430:	7c 01       	movw	r14, r24
 432:	f8 94       	cli
 434:	40 e0       	ldi	r20, 0x00	; 0
 436:	50 e0       	ldi	r21, 0x00	; 0
 438:	a3 df       	rcall	.-186    	; 0x380 <setDutyCycle>
 43a:	41 e0       	ldi	r20, 0x01	; 1
 43c:	50 e0       	ldi	r21, 0x00	; 0
 43e:	c7 01       	movw	r24, r14
 440:	b6 01       	movw	r22, r12
 442:	9e df       	rcall	.-196    	; 0x380 <setDutyCycle>
 444:	78 94       	sei
 446:	ff 90       	pop	r15
 448:	ef 90       	pop	r14
 44a:	df 90       	pop	r13
 44c:	cf 90       	pop	r12
 44e:	08 95       	ret

00000450 <wheelControl>:
 450:	28 d1       	rcall	.+592    	; 0x6a2 <getMode>
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	59 f4       	brne	.+22     	; 0x46c <wheelControl+0x1c>
 456:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <l_ds>
 45a:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <l_ds+0x1>
 45e:	89 2b       	or	r24, r25
 460:	29 f4       	brne	.+10     	; 0x46c <wheelControl+0x1c>
 462:	6d ec       	ldi	r22, 0xCD	; 205
 464:	7c ec       	ldi	r23, 0xCC	; 204
 466:	8c e4       	ldi	r24, 0x4C	; 76
 468:	9e e3       	ldi	r25, 0x3E	; 62
 46a:	dd df       	rcall	.-70     	; 0x426 <straight>
 46c:	5b de       	rcall	.-842    	; 0x124 <x_yield>
 46e:	f0 cf       	rjmp	.-32     	; 0x450 <wheelControl>

00000470 <stop>:
	sei();
}

void stop() {
	
	setMode(STOPPED);
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	1b d1       	rcall	.+566    	; 0x6ac <setMode>
	changeDirection(FORWARD, L_WHEEL);
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	5e df       	rcall	.-324    	; 0x33c <changeDirection>
	changeDirection(FORWARD, R_WHEEL);
 480:	61 e0       	ldi	r22, 0x01	; 1
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	59 df       	rcall	.-334    	; 0x33c <changeDirection>
	straight(0);
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	70 e0       	ldi	r23, 0x00	; 0
 48e:	cb 01       	movw	r24, r22
 490:	ca cf       	rjmp	.-108    	; 0x426 <straight>
 492:	08 95       	ret

00000494 <setTurnLeft>:
}

void setTurnLeft() {
	
	changeDirection(FORWARD, L_WHEEL);
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	70 e0       	ldi	r23, 0x00	; 0
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	4f df       	rcall	.-354    	; 0x33c <changeDirection>
	changeDirection(BACKWARD, R_WHEEL);
 49e:	61 e0       	ldi	r22, 0x01	; 1
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	4a df       	rcall	.-364    	; 0x33c <changeDirection>
	setDutyCycle(0.5, L_WHEEL);
 4a8:	40 e0       	ldi	r20, 0x00	; 0
 4aa:	50 e0       	ldi	r21, 0x00	; 0
 4ac:	60 e0       	ldi	r22, 0x00	; 0
 4ae:	70 e0       	ldi	r23, 0x00	; 0
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	9f e3       	ldi	r25, 0x3F	; 63
 4b4:	65 df       	rcall	.-310    	; 0x380 <setDutyCycle>
	setDutyCycle(0.5, R_WHEEL);
 4b6:	41 e0       	ldi	r20, 0x01	; 1
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	9f e3       	ldi	r25, 0x3F	; 63
 4c2:	5e cf       	rjmp	.-324    	; 0x380 <setDutyCycle>
 4c4:	08 95       	ret

000004c6 <setTurnRight>:
}


void setTurnRight() {
	
	changeDirection(BACKWARD, L_WHEEL);
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	36 df       	rcall	.-404    	; 0x33c <changeDirection>
	changeDirection(FORWARD, R_WHEEL);
 4d0:	61 e0       	ldi	r22, 0x01	; 1
 4d2:	70 e0       	ldi	r23, 0x00	; 0
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	31 df       	rcall	.-414    	; 0x33c <changeDirection>
	setDutyCycle(0.5, L_WHEEL);
 4da:	40 e0       	ldi	r20, 0x00	; 0
 4dc:	50 e0       	ldi	r21, 0x00	; 0
 4de:	60 e0       	ldi	r22, 0x00	; 0
 4e0:	70 e0       	ldi	r23, 0x00	; 0
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	9f e3       	ldi	r25, 0x3F	; 63
 4e6:	4c df       	rcall	.-360    	; 0x380 <setDutyCycle>
	setDutyCycle(0.5, R_WHEEL);
 4e8:	41 e0       	ldi	r20, 0x01	; 1
 4ea:	50 e0       	ldi	r21, 0x00	; 0
 4ec:	60 e0       	ldi	r22, 0x00	; 0
 4ee:	70 e0       	ldi	r23, 0x00	; 0
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	9f e3       	ldi	r25, 0x3F	; 63
 4f4:	45 cf       	rjmp	.-374    	; 0x380 <setDutyCycle>
 4f6:	08 95       	ret

000004f8 <turn>:
}

void turn(int d) {
 4f8:	0f 93       	push	r16
 4fa:	1f 93       	push	r17
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	8c 01       	movw	r16, r24
	int oldMode = getMode();
 502:	cf d0       	rcall	.+414    	; 0x6a2 <getMode>
 504:	ec 01       	movw	r28, r24
	stop();
 506:	b4 df       	rcall	.-152    	; 0x470 <stop>
 508:	82 e0       	ldi	r24, 0x02	; 2
	setMode(TURNING);
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	cf d0       	rcall	.+414    	; 0x6ac <setMode>
 50e:	f8 94       	cli
	//_delay_ms(100);
	cli();
 510:	10 16       	cp	r1, r16
	
	if (d > 0) setTurnLeft();
 512:	11 06       	cpc	r1, r17
 514:	14 f4       	brge	.+4      	; 0x51a <turn+0x22>
 516:	be df       	rcall	.-132    	; 0x494 <setTurnLeft>
 518:	04 c0       	rjmp	.+8      	; 0x522 <turn+0x2a>
	else  {
		d *= -1;
 51a:	11 95       	neg	r17
 51c:	01 95       	neg	r16
 51e:	11 09       	sbc	r17, r1
		setTurnRight();
 520:	d2 df       	rcall	.-92     	; 0x4c6 <setTurnRight>
 522:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <leftCount+0x1>
	}
	leftCount = 0;
 526:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <leftCount>
 52a:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <rightcount+0x1>
	rightcount = 0;
 52e:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <rightcount>
 532:	78 94       	sei
	
	sei();
 534:	29 e1       	ldi	r18, 0x19	; 25
	
	int count = (d * 25) / 90;
 536:	20 9f       	mul	r18, r16
 538:	c0 01       	movw	r24, r0
 53a:	21 9f       	mul	r18, r17
 53c:	90 0d       	add	r25, r0
 53e:	11 24       	eor	r1, r1
 540:	6a e5       	ldi	r22, 0x5A	; 90
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	2f d3       	rcall	.+1630   	; 0xba4 <__divmodhi4>
 546:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <leftCount>

	while(leftCount < count) {
 54a:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <leftCount+0x1>
 54e:	86 17       	cp	r24, r22
 550:	97 07       	cpc	r25, r23
 552:	5c f4       	brge	.+22     	; 0x56a <turn+0x72>
 554:	24 e0       	ldi	r18, 0x04	; 4
		 PORTF ^= (1<<PF2);
 556:	81 b3       	in	r24, 0x11	; 17
 558:	82 27       	eor	r24, r18
 55a:	81 bb       	out	0x11, r24	; 17
 55c:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <leftCount>
	
	sei();
	
	int count = (d * 25) / 90;

	while(leftCount < count) {
 560:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <leftCount+0x1>
 564:	86 17       	cp	r24, r22
 566:	97 07       	cpc	r25, r23
		 PORTF ^= (1<<PF2);
	}
	stop();
 568:	b4 f3       	brlt	.-20     	; 0x556 <turn+0x5e>
 56a:	82 df       	rcall	.-252    	; 0x470 <stop>
	setMode(oldMode);
 56c:	ce 01       	movw	r24, r28
 56e:	9e d0       	rcall	.+316    	; 0x6ac <setMode>
 570:	df 91       	pop	r29
}
 572:	cf 91       	pop	r28
 574:	1f 91       	pop	r17
 576:	0f 91       	pop	r16
 578:	08 95       	ret

0000057a <initWheels>:
 57a:	87 b1       	in	r24, 0x07	; 7

void initWheels() {
	DDRC |= 0x0F; 
 57c:	8f 60       	ori	r24, 0x0F	; 15
 57e:	87 b9       	out	0x07, r24	; 7
	DDRL |= 0x18;
 580:	ea e0       	ldi	r30, 0x0A	; 10
 582:	f1 e0       	ldi	r31, 0x01	; 1
 584:	80 81       	ld	r24, Z
 586:	88 61       	ori	r24, 0x18	; 24
 588:	80 83       	st	Z, r24
	
	timer = 0;
 58a:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <timer>
 58e:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <timer+0x1>
 592:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <timer+0x2>
 596:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <timer+0x3>
 59a:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <timer+0x4>
 59e:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <timer+0x5>
 5a2:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <timer+0x6>
 5a6:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <timer+0x7>

	int period = 1000; //total time

	// set up left timer
	ICR5 = period;
 5aa:	88 ee       	ldi	r24, 0xE8	; 232
 5ac:	93 e0       	ldi	r25, 0x03	; 3
 5ae:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
 5b2:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
	setDutyCycle(0, L_WHEEL);
 5b6:	40 e0       	ldi	r20, 0x00	; 0
 5b8:	50 e0       	ldi	r21, 0x00	; 0
 5ba:	60 e0       	ldi	r22, 0x00	; 0
 5bc:	70 e0       	ldi	r23, 0x00	; 0
 5be:	cb 01       	movw	r24, r22
 5c0:	df de       	rcall	.-578    	; 0x380 <setDutyCycle>
	setDutyCycle(0, R_WHEEL);
 5c2:	41 e0       	ldi	r20, 0x01	; 1
 5c4:	50 e0       	ldi	r21, 0x00	; 0
 5c6:	60 e0       	ldi	r22, 0x00	; 0
 5c8:	70 e0       	ldi	r23, 0x00	; 0
 5ca:	cb 01       	movw	r24, r22
 5cc:	d9 de       	rcall	.-590    	; 0x380 <setDutyCycle>

	TCCR5A |= (1 <<COM5A1) | (1 << COM5B1);
 5ce:	e0 e2       	ldi	r30, 0x20	; 32
 5d0:	f1 e0       	ldi	r31, 0x01	; 1
 5d2:	80 81       	ld	r24, Z
 5d4:	80 6a       	ori	r24, 0xA0	; 160
 5d6:	80 83       	st	Z, r24
	TCCR5B |= (1 << WGM53) | (1 << CS51);
 5d8:	e1 e2       	ldi	r30, 0x21	; 33
 5da:	f1 e0       	ldi	r31, 0x01	; 1
 5dc:	80 81       	ld	r24, Z
 5de:	82 61       	ori	r24, 0x12	; 18
 5e0:	80 83       	st	Z, r24
	
	
	PORTC |= L_FORWARD;
 5e2:	43 9a       	sbi	0x08, 3	; 8
	PORTC |= R_FORWARD; 
 5e4:	40 9a       	sbi	0x08, 0	; 8
	
	// setup photoregister slit detection.
	PORTJ &= ~((1 << PJ1) | (1 << PJ0));
 5e6:	e5 e0       	ldi	r30, 0x05	; 5
 5e8:	f1 e0       	ldi	r31, 0x01	; 1
 5ea:	80 81       	ld	r24, Z
 5ec:	8c 7f       	andi	r24, 0xFC	; 252
 5ee:	80 83       	st	Z, r24
	
	PCMSK1 |= (1 << PCINT9);
 5f0:	ec e6       	ldi	r30, 0x6C	; 108
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	82 60       	ori	r24, 0x02	; 2
 5f8:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT10);
 5fa:	80 81       	ld	r24, Z
 5fc:	84 60       	ori	r24, 0x04	; 4
 5fe:	80 83       	st	Z, r24
	
	PCICR |= (1<<PCIE1);
 600:	e8 e6       	ldi	r30, 0x68	; 104
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	80 81       	ld	r24, Z
 606:	82 60       	ori	r24, 0x02	; 2
 608:	80 83       	st	Z, r24
 60a:	08 95       	ret

0000060c <__vector_10>:
	sei();
}


// pin 15 reads the right wheel, functions as the master
ISR(PCINT1_vect) {
 60c:	1f 92       	push	r1
 60e:	0f 92       	push	r0
 610:	0f b6       	in	r0, 0x3f	; 63
 612:	0f 92       	push	r0
 614:	11 24       	eor	r1, r1
 616:	0b b6       	in	r0, 0x3b	; 59
 618:	0f 92       	push	r0
 61a:	2f 93       	push	r18
 61c:	3f 93       	push	r19
 61e:	4f 93       	push	r20
 620:	6f 93       	push	r22
 622:	7f 93       	push	r23
 624:	8f 93       	push	r24
 626:	9f 93       	push	r25
 628:	ef 93       	push	r30
 62a:	ff 93       	push	r31
	//cli();
	//PSprintf(0, "%d\n\r", leftCount);
	//PORTB ^= 0x80;
	//PORTF ^= (1 << PF2);
	
	int J = PINJ;
 62c:	e3 e0       	ldi	r30, 0x03	; 3
 62e:	f1 e0       	ldi	r31, 0x01	; 1
 630:	40 81       	ld	r20, Z
	
	int change = J ^ oldJ;
	
	//PORTF = change;
	
	int RisON = (PINJ | (1<<PJ1));
 632:	20 81       	ld	r18, Z
	int LisON = (PINJ | (1<<PJ0));
 634:	80 81       	ld	r24, Z
	
	// If master
	if(change | (1 << PJ1)) {
		//	update interval time
		rightcount = rightcount + 1;
 636:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <rightcount>
 63a:	70 91 19 02 	lds	r23, 0x0219	; 0x800219 <rightcount+0x1>
 63e:	6f 5f       	subi	r22, 0xFF	; 255
 640:	7f 4f       	sbci	r23, 0xFF	; 255
 642:	70 93 19 02 	sts	0x0219, r23	; 0x800219 <rightcount+0x1>
 646:	60 93 18 02 	sts	0x0218, r22	; 0x800218 <rightcount>
		// else if slave
	}
	if(change | (1 << PJ0)) {
		//	compare interval time to master and adjust duty cycle accordingly.
		leftCount = leftCount + 1;
 64a:	60 91 1a 02 	lds	r22, 0x021A	; 0x80021a <leftCount>
 64e:	70 91 1b 02 	lds	r23, 0x021B	; 0x80021b <leftCount+0x1>
 652:	6f 5f       	subi	r22, 0xFF	; 255
 654:	7f 4f       	sbci	r23, 0xFF	; 255
 656:	70 93 1b 02 	sts	0x021B, r23	; 0x80021b <leftCount+0x1>
 65a:	60 93 1a 02 	sts	0x021A, r22	; 0x80021a <leftCount>
	}
	
	RwasOn = RisON;
 65e:	22 60       	ori	r18, 0x02	; 2
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	30 93 27 02 	sts	0x0227, r19	; 0x800227 <RwasOn+0x1>
 666:	20 93 26 02 	sts	0x0226, r18	; 0x800226 <RwasOn>
	LwasOn = LisON;
 66a:	81 60       	ori	r24, 0x01	; 1
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <LwasOn+0x1>
 672:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <LwasOn>
	oldJ = J;
 676:	84 2f       	mov	r24, r20
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <oldJ+0x1>
 67e:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <oldJ>
	//sei();
}
 682:	ff 91       	pop	r31
 684:	ef 91       	pop	r30
 686:	9f 91       	pop	r25
 688:	8f 91       	pop	r24
 68a:	7f 91       	pop	r23
 68c:	6f 91       	pop	r22
 68e:	4f 91       	pop	r20
 690:	3f 91       	pop	r19
 692:	2f 91       	pop	r18
 694:	0f 90       	pop	r0
 696:	0b be       	out	0x3b, r0	; 59
 698:	0f 90       	pop	r0
 69a:	0f be       	out	0x3f, r0	; 63
 69c:	0f 90       	pop	r0
 69e:	1f 90       	pop	r1
 6a0:	18 95       	reti

000006a2 <getMode>:
#include "acxserial.h"

volatile int mode;

int getMode() {
	return mode;
 6a2:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <mode>
 6a6:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <mode+0x1>
}
 6aa:	08 95       	ret

000006ac <setMode>:

void setMode(int newMode) {
	mode = newMode;
 6ac:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <mode+0x1>
 6b0:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <mode>
 6b4:	08 95       	ret

000006b6 <init>:
}

void init() {
	//setTime();
	//PSerial_open(0, BAUD9600, SERIAL_8N1);
	mode = STRAIGHT;
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <mode+0x1>
 6be:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <mode>

	initIRDet();
 6c2:	e6 dd       	rcall	.-1076   	; 0x290 <initIRDet>
	initWheels();
 6c4:	5a df       	rcall	.-332    	; 0x57a <initWheels>
 6c6:	78 94       	sei
	//initUS();
	sei();
 6c8:	08 95       	ret

000006ca <main>:
 6ca:	f5 df       	rcall	.-22     	; 0x6b6 <init>

int main(void)
{
	init();
	
	x_init();
 6cc:	5b d1       	rcall	.+694    	; 0x984 <x_init>
 6ce:	88 ee       	ldi	r24, 0xE8	; 232
	x_delay(1000);
 6d0:	93 e0       	ldi	r25, 0x03	; 3
 6d2:	cf d1       	rcall	.+926    	; 0xa72 <x_delay>
 6d4:	41 e0       	ldi	r20, 0x01	; 1
	

	x_new(2, wheelControl, 1);
 6d6:	50 e0       	ldi	r21, 0x00	; 0
 6d8:	68 e2       	ldi	r22, 0x28	; 40
 6da:	72 e0       	ldi	r23, 0x02	; 2
 6dc:	82 e0       	ldi	r24, 0x02	; 2
 6de:	15 d1       	rcall	.+554    	; 0x90a <x_new>
 6e0:	41 e0       	ldi	r20, 0x01	; 1
	x_new(1, irControl, 1);
 6e2:	50 e0       	ldi	r21, 0x00	; 0
 6e4:	6f e4       	ldi	r22, 0x4F	; 79
 6e6:	71 e0       	ldi	r23, 0x01	; 1
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	0f d1       	rcall	.+542    	; 0x90a <x_new>
	
	while (1)
	{
		//turn(90);
		//_delay_ms(2000); 
		x_yield();
 6ec:	1b dd       	rcall	.-1482   	; 0x124 <x_yield>
 6ee:	fe cf       	rjmp	.-4      	; 0x6ec <main+0x22>

000006f0 <__cmpsf2>:
 6f0:	34 d0       	rcall	.+104    	; 0x75a <__fp_cmp>
 6f2:	08 f4       	brcc	.+2      	; 0x6f6 <__cmpsf2+0x6>
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	08 95       	ret

000006f8 <__fixsfsi>:
 6f8:	04 d0       	rcall	.+8      	; 0x702 <__fixunssfsi>
 6fa:	68 94       	set
 6fc:	b1 11       	cpse	r27, r1
 6fe:	74 c0       	rjmp	.+232    	; 0x7e8 <__fp_szero>
 700:	08 95       	ret

00000702 <__fixunssfsi>:
 702:	57 d0       	rcall	.+174    	; 0x7b2 <__fp_splitA>
 704:	88 f0       	brcs	.+34     	; 0x728 <__fixunssfsi+0x26>
 706:	9f 57       	subi	r25, 0x7F	; 127
 708:	90 f0       	brcs	.+36     	; 0x72e <__fixunssfsi+0x2c>
 70a:	b9 2f       	mov	r27, r25
 70c:	99 27       	eor	r25, r25
 70e:	b7 51       	subi	r27, 0x17	; 23
 710:	a0 f0       	brcs	.+40     	; 0x73a <__fixunssfsi+0x38>
 712:	d1 f0       	breq	.+52     	; 0x748 <__fixunssfsi+0x46>
 714:	66 0f       	add	r22, r22
 716:	77 1f       	adc	r23, r23
 718:	88 1f       	adc	r24, r24
 71a:	99 1f       	adc	r25, r25
 71c:	1a f0       	brmi	.+6      	; 0x724 <__fixunssfsi+0x22>
 71e:	ba 95       	dec	r27
 720:	c9 f7       	brne	.-14     	; 0x714 <__fixunssfsi+0x12>
 722:	12 c0       	rjmp	.+36     	; 0x748 <__fixunssfsi+0x46>
 724:	b1 30       	cpi	r27, 0x01	; 1
 726:	81 f0       	breq	.+32     	; 0x748 <__fixunssfsi+0x46>
 728:	5e d0       	rcall	.+188    	; 0x7e6 <__fp_zero>
 72a:	b1 e0       	ldi	r27, 0x01	; 1
 72c:	08 95       	ret
 72e:	5b c0       	rjmp	.+182    	; 0x7e6 <__fp_zero>
 730:	67 2f       	mov	r22, r23
 732:	78 2f       	mov	r23, r24
 734:	88 27       	eor	r24, r24
 736:	b8 5f       	subi	r27, 0xF8	; 248
 738:	39 f0       	breq	.+14     	; 0x748 <__fixunssfsi+0x46>
 73a:	b9 3f       	cpi	r27, 0xF9	; 249
 73c:	cc f3       	brlt	.-14     	; 0x730 <__fixunssfsi+0x2e>
 73e:	86 95       	lsr	r24
 740:	77 95       	ror	r23
 742:	67 95       	ror	r22
 744:	b3 95       	inc	r27
 746:	d9 f7       	brne	.-10     	; 0x73e <__fixunssfsi+0x3c>
 748:	3e f4       	brtc	.+14     	; 0x758 <__fixunssfsi+0x56>
 74a:	90 95       	com	r25
 74c:	80 95       	com	r24
 74e:	70 95       	com	r23
 750:	61 95       	neg	r22
 752:	7f 4f       	sbci	r23, 0xFF	; 255
 754:	8f 4f       	sbci	r24, 0xFF	; 255
 756:	9f 4f       	sbci	r25, 0xFF	; 255
 758:	08 95       	ret

0000075a <__fp_cmp>:
 75a:	99 0f       	add	r25, r25
 75c:	00 08       	sbc	r0, r0
 75e:	55 0f       	add	r21, r21
 760:	aa 0b       	sbc	r26, r26
 762:	e0 e8       	ldi	r30, 0x80	; 128
 764:	fe ef       	ldi	r31, 0xFE	; 254
 766:	16 16       	cp	r1, r22
 768:	17 06       	cpc	r1, r23
 76a:	e8 07       	cpc	r30, r24
 76c:	f9 07       	cpc	r31, r25
 76e:	c0 f0       	brcs	.+48     	; 0x7a0 <__fp_cmp+0x46>
 770:	12 16       	cp	r1, r18
 772:	13 06       	cpc	r1, r19
 774:	e4 07       	cpc	r30, r20
 776:	f5 07       	cpc	r31, r21
 778:	98 f0       	brcs	.+38     	; 0x7a0 <__fp_cmp+0x46>
 77a:	62 1b       	sub	r22, r18
 77c:	73 0b       	sbc	r23, r19
 77e:	84 0b       	sbc	r24, r20
 780:	95 0b       	sbc	r25, r21
 782:	39 f4       	brne	.+14     	; 0x792 <__fp_cmp+0x38>
 784:	0a 26       	eor	r0, r26
 786:	61 f0       	breq	.+24     	; 0x7a0 <__fp_cmp+0x46>
 788:	23 2b       	or	r18, r19
 78a:	24 2b       	or	r18, r20
 78c:	25 2b       	or	r18, r21
 78e:	21 f4       	brne	.+8      	; 0x798 <__fp_cmp+0x3e>
 790:	08 95       	ret
 792:	0a 26       	eor	r0, r26
 794:	09 f4       	brne	.+2      	; 0x798 <__fp_cmp+0x3e>
 796:	a1 40       	sbci	r26, 0x01	; 1
 798:	a6 95       	lsr	r26
 79a:	8f ef       	ldi	r24, 0xFF	; 255
 79c:	81 1d       	adc	r24, r1
 79e:	81 1d       	adc	r24, r1
 7a0:	08 95       	ret

000007a2 <__fp_split3>:
 7a2:	57 fd       	sbrc	r21, 7
 7a4:	90 58       	subi	r25, 0x80	; 128
 7a6:	44 0f       	add	r20, r20
 7a8:	55 1f       	adc	r21, r21
 7aa:	59 f0       	breq	.+22     	; 0x7c2 <__fp_splitA+0x10>
 7ac:	5f 3f       	cpi	r21, 0xFF	; 255
 7ae:	71 f0       	breq	.+28     	; 0x7cc <__fp_splitA+0x1a>
 7b0:	47 95       	ror	r20

000007b2 <__fp_splitA>:
 7b2:	88 0f       	add	r24, r24
 7b4:	97 fb       	bst	r25, 7
 7b6:	99 1f       	adc	r25, r25
 7b8:	61 f0       	breq	.+24     	; 0x7d2 <__fp_splitA+0x20>
 7ba:	9f 3f       	cpi	r25, 0xFF	; 255
 7bc:	79 f0       	breq	.+30     	; 0x7dc <__fp_splitA+0x2a>
 7be:	87 95       	ror	r24
 7c0:	08 95       	ret
 7c2:	12 16       	cp	r1, r18
 7c4:	13 06       	cpc	r1, r19
 7c6:	14 06       	cpc	r1, r20
 7c8:	55 1f       	adc	r21, r21
 7ca:	f2 cf       	rjmp	.-28     	; 0x7b0 <__fp_split3+0xe>
 7cc:	46 95       	lsr	r20
 7ce:	f1 df       	rcall	.-30     	; 0x7b2 <__fp_splitA>
 7d0:	08 c0       	rjmp	.+16     	; 0x7e2 <__fp_splitA+0x30>
 7d2:	16 16       	cp	r1, r22
 7d4:	17 06       	cpc	r1, r23
 7d6:	18 06       	cpc	r1, r24
 7d8:	99 1f       	adc	r25, r25
 7da:	f1 cf       	rjmp	.-30     	; 0x7be <__fp_splitA+0xc>
 7dc:	86 95       	lsr	r24
 7de:	71 05       	cpc	r23, r1
 7e0:	61 05       	cpc	r22, r1
 7e2:	08 94       	sec
 7e4:	08 95       	ret

000007e6 <__fp_zero>:
 7e6:	e8 94       	clt

000007e8 <__fp_szero>:
 7e8:	bb 27       	eor	r27, r27
 7ea:	66 27       	eor	r22, r22
 7ec:	77 27       	eor	r23, r23
 7ee:	cb 01       	movw	r24, r22
 7f0:	97 f9       	bld	r25, 7
 7f2:	08 95       	ret

000007f4 <__mulsf3>:
 7f4:	0b d0       	rcall	.+22     	; 0x80c <__mulsf3x>
 7f6:	78 c0       	rjmp	.+240    	; 0x8e8 <__fp_round>
 7f8:	69 d0       	rcall	.+210    	; 0x8cc <__fp_pscA>
 7fa:	28 f0       	brcs	.+10     	; 0x806 <__mulsf3+0x12>
 7fc:	6e d0       	rcall	.+220    	; 0x8da <__fp_pscB>
 7fe:	18 f0       	brcs	.+6      	; 0x806 <__mulsf3+0x12>
 800:	95 23       	and	r25, r21
 802:	09 f0       	breq	.+2      	; 0x806 <__mulsf3+0x12>
 804:	5a c0       	rjmp	.+180    	; 0x8ba <__fp_inf>
 806:	5f c0       	rjmp	.+190    	; 0x8c6 <__fp_nan>
 808:	11 24       	eor	r1, r1
 80a:	ee cf       	rjmp	.-36     	; 0x7e8 <__fp_szero>

0000080c <__mulsf3x>:
 80c:	ca df       	rcall	.-108    	; 0x7a2 <__fp_split3>
 80e:	a0 f3       	brcs	.-24     	; 0x7f8 <__mulsf3+0x4>

00000810 <__mulsf3_pse>:
 810:	95 9f       	mul	r25, r21
 812:	d1 f3       	breq	.-12     	; 0x808 <__mulsf3+0x14>
 814:	95 0f       	add	r25, r21
 816:	50 e0       	ldi	r21, 0x00	; 0
 818:	55 1f       	adc	r21, r21
 81a:	62 9f       	mul	r22, r18
 81c:	f0 01       	movw	r30, r0
 81e:	72 9f       	mul	r23, r18
 820:	bb 27       	eor	r27, r27
 822:	f0 0d       	add	r31, r0
 824:	b1 1d       	adc	r27, r1
 826:	63 9f       	mul	r22, r19
 828:	aa 27       	eor	r26, r26
 82a:	f0 0d       	add	r31, r0
 82c:	b1 1d       	adc	r27, r1
 82e:	aa 1f       	adc	r26, r26
 830:	64 9f       	mul	r22, r20
 832:	66 27       	eor	r22, r22
 834:	b0 0d       	add	r27, r0
 836:	a1 1d       	adc	r26, r1
 838:	66 1f       	adc	r22, r22
 83a:	82 9f       	mul	r24, r18
 83c:	22 27       	eor	r18, r18
 83e:	b0 0d       	add	r27, r0
 840:	a1 1d       	adc	r26, r1
 842:	62 1f       	adc	r22, r18
 844:	73 9f       	mul	r23, r19
 846:	b0 0d       	add	r27, r0
 848:	a1 1d       	adc	r26, r1
 84a:	62 1f       	adc	r22, r18
 84c:	83 9f       	mul	r24, r19
 84e:	a0 0d       	add	r26, r0
 850:	61 1d       	adc	r22, r1
 852:	22 1f       	adc	r18, r18
 854:	74 9f       	mul	r23, r20
 856:	33 27       	eor	r19, r19
 858:	a0 0d       	add	r26, r0
 85a:	61 1d       	adc	r22, r1
 85c:	23 1f       	adc	r18, r19
 85e:	84 9f       	mul	r24, r20
 860:	60 0d       	add	r22, r0
 862:	21 1d       	adc	r18, r1
 864:	82 2f       	mov	r24, r18
 866:	76 2f       	mov	r23, r22
 868:	6a 2f       	mov	r22, r26
 86a:	11 24       	eor	r1, r1
 86c:	9f 57       	subi	r25, 0x7F	; 127
 86e:	50 40       	sbci	r21, 0x00	; 0
 870:	8a f0       	brmi	.+34     	; 0x894 <__mulsf3_pse+0x84>
 872:	e1 f0       	breq	.+56     	; 0x8ac <__mulsf3_pse+0x9c>
 874:	88 23       	and	r24, r24
 876:	4a f0       	brmi	.+18     	; 0x88a <__mulsf3_pse+0x7a>
 878:	ee 0f       	add	r30, r30
 87a:	ff 1f       	adc	r31, r31
 87c:	bb 1f       	adc	r27, r27
 87e:	66 1f       	adc	r22, r22
 880:	77 1f       	adc	r23, r23
 882:	88 1f       	adc	r24, r24
 884:	91 50       	subi	r25, 0x01	; 1
 886:	50 40       	sbci	r21, 0x00	; 0
 888:	a9 f7       	brne	.-22     	; 0x874 <__mulsf3_pse+0x64>
 88a:	9e 3f       	cpi	r25, 0xFE	; 254
 88c:	51 05       	cpc	r21, r1
 88e:	70 f0       	brcs	.+28     	; 0x8ac <__mulsf3_pse+0x9c>
 890:	14 c0       	rjmp	.+40     	; 0x8ba <__fp_inf>
 892:	aa cf       	rjmp	.-172    	; 0x7e8 <__fp_szero>
 894:	5f 3f       	cpi	r21, 0xFF	; 255
 896:	ec f3       	brlt	.-6      	; 0x892 <__mulsf3_pse+0x82>
 898:	98 3e       	cpi	r25, 0xE8	; 232
 89a:	dc f3       	brlt	.-10     	; 0x892 <__mulsf3_pse+0x82>
 89c:	86 95       	lsr	r24
 89e:	77 95       	ror	r23
 8a0:	67 95       	ror	r22
 8a2:	b7 95       	ror	r27
 8a4:	f7 95       	ror	r31
 8a6:	e7 95       	ror	r30
 8a8:	9f 5f       	subi	r25, 0xFF	; 255
 8aa:	c1 f7       	brne	.-16     	; 0x89c <__mulsf3_pse+0x8c>
 8ac:	fe 2b       	or	r31, r30
 8ae:	88 0f       	add	r24, r24
 8b0:	91 1d       	adc	r25, r1
 8b2:	96 95       	lsr	r25
 8b4:	87 95       	ror	r24
 8b6:	97 f9       	bld	r25, 7
 8b8:	08 95       	ret

000008ba <__fp_inf>:
 8ba:	97 f9       	bld	r25, 7
 8bc:	9f 67       	ori	r25, 0x7F	; 127
 8be:	80 e8       	ldi	r24, 0x80	; 128
 8c0:	70 e0       	ldi	r23, 0x00	; 0
 8c2:	60 e0       	ldi	r22, 0x00	; 0
 8c4:	08 95       	ret

000008c6 <__fp_nan>:
 8c6:	9f ef       	ldi	r25, 0xFF	; 255
 8c8:	80 ec       	ldi	r24, 0xC0	; 192
 8ca:	08 95       	ret

000008cc <__fp_pscA>:
 8cc:	00 24       	eor	r0, r0
 8ce:	0a 94       	dec	r0
 8d0:	16 16       	cp	r1, r22
 8d2:	17 06       	cpc	r1, r23
 8d4:	18 06       	cpc	r1, r24
 8d6:	09 06       	cpc	r0, r25
 8d8:	08 95       	ret

000008da <__fp_pscB>:
 8da:	00 24       	eor	r0, r0
 8dc:	0a 94       	dec	r0
 8de:	12 16       	cp	r1, r18
 8e0:	13 06       	cpc	r1, r19
 8e2:	14 06       	cpc	r1, r20
 8e4:	05 06       	cpc	r0, r21
 8e6:	08 95       	ret

000008e8 <__fp_round>:
 8e8:	09 2e       	mov	r0, r25
 8ea:	03 94       	inc	r0
 8ec:	00 0c       	add	r0, r0
 8ee:	11 f4       	brne	.+4      	; 0x8f4 <__fp_round+0xc>
 8f0:	88 23       	and	r24, r24
 8f2:	52 f0       	brmi	.+20     	; 0x908 <__fp_round+0x20>
 8f4:	bb 0f       	add	r27, r27
 8f6:	40 f4       	brcc	.+16     	; 0x908 <__fp_round+0x20>
 8f8:	bf 2b       	or	r27, r31
 8fa:	11 f4       	brne	.+4      	; 0x900 <__fp_round+0x18>
 8fc:	60 ff       	sbrs	r22, 0
 8fe:	04 c0       	rjmp	.+8      	; 0x908 <__fp_round+0x20>
 900:	6f 5f       	subi	r22, 0xFF	; 255
 902:	7f 4f       	sbci	r23, 0xFF	; 255
 904:	8f 4f       	sbci	r24, 0xFF	; 255
 906:	9f 4f       	sbci	r25, 0xFF	; 255
 908:	08 95       	ret

0000090a <x_new>:
 90a:	cf 93       	push	r28
 90c:	df 93       	push	r29
 90e:	c8 2f       	mov	r28, r24
 910:	d4 2f       	mov	r29, r20
 912:	e8 2f       	mov	r30, r24
 914:	f0 e0       	ldi	r31, 0x00	; 0
 916:	ee 0f       	add	r30, r30
 918:	ff 1f       	adc	r31, r31
 91a:	ee 0f       	add	r30, r30
 91c:	ff 1f       	adc	r31, r31
 91e:	9f 01       	movw	r18, r30
 920:	22 5c       	subi	r18, 0xC2	; 194
 922:	3d 4f       	sbci	r19, 0xFD	; 253
 924:	f9 01       	movw	r30, r18
 926:	a2 81       	ldd	r26, Z+2	; 0x02
 928:	b3 81       	ldd	r27, Z+3	; 0x03
 92a:	6c 93       	st	X, r22
 92c:	cd 01       	movw	r24, r26
 92e:	01 97       	sbiw	r24, 0x01	; 1
 930:	fc 01       	movw	r30, r24
 932:	70 83       	st	Z, r23
 934:	01 97       	sbiw	r24, 0x01	; 1
 936:	fc 01       	movw	r30, r24
 938:	10 82       	st	Z, r1
 93a:	55 97       	sbiw	r26, 0x15	; 21
 93c:	f9 01       	movw	r30, r18
 93e:	b1 83       	std	Z+1, r27	; 0x01
 940:	a0 83       	st	Z, r26
 942:	8c 2f       	mov	r24, r28
 944:	5e dc       	rcall	.-1860   	; 0x202 <bit2mask8>
 946:	dd 23       	and	r29, r29
 948:	39 f0       	breq	.+14     	; 0x958 <x_new+0x4e>
 94a:	80 95       	com	r24
 94c:	90 91 6f 0a 	lds	r25, 0x0A6F	; 0x800a6f <x_disable_status>
 950:	89 23       	and	r24, r25
 952:	80 93 6f 0a 	sts	0x0A6F, r24	; 0x800a6f <x_disable_status>
 956:	05 c0       	rjmp	.+10     	; 0x962 <x_new+0x58>
 958:	90 91 6f 0a 	lds	r25, 0x0A6F	; 0x800a6f <x_disable_status>
 95c:	89 2b       	or	r24, r25
 95e:	80 93 6f 0a 	sts	0x0A6F, r24	; 0x800a6f <x_disable_status>
 962:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <x_thread_id>
 966:	c8 13       	cpse	r28, r24
 968:	01 c0       	rjmp	.+2      	; 0x96c <x_new+0x62>
 96a:	0c dc       	rcall	.-2024   	; 0x184 <x_schedule>
 96c:	df 91       	pop	r29
 96e:	cf 91       	pop	r28
 970:	08 95       	ret

00000972 <init_System_Timer>:
 972:	82 e0       	ldi	r24, 0x02	; 2
 974:	84 bd       	out	0x24, r24	; 36
 976:	9a ef       	ldi	r25, 0xFA	; 250
 978:	97 bd       	out	0x27, r25	; 39
 97a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
 97e:	83 e0       	ldi	r24, 0x03	; 3
 980:	85 bd       	out	0x25, r24	; 37
 982:	08 95       	ret

00000984 <x_init>:
 984:	cf 93       	push	r28
 986:	df 93       	push	r29
 988:	f8 94       	cli
 98a:	8e ef       	ldi	r24, 0xFE	; 254
 98c:	80 93 6f 0a 	sts	0x0A6F, r24	; 0x800a6f <x_disable_status>
 990:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <x_suspend_status>
 994:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <x_delay_status>
 998:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <x_thread_id>
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	80 93 70 0a 	sts	0x0A70, r24	; 0x800a70 <x_thread_mask>
 9a2:	ce e3       	ldi	r28, 0x3E	; 62
 9a4:	d2 e0       	ldi	r29, 0x02	; 2
 9a6:	8e e5       	ldi	r24, 0x5E	; 94
 9a8:	93 e0       	ldi	r25, 0x03	; 3
 9aa:	99 83       	std	Y+1, r25	; 0x01
 9ac:	88 83       	st	Y, r24
 9ae:	9b 83       	std	Y+3, r25	; 0x03
 9b0:	8a 83       	std	Y+2, r24	; 0x02
 9b2:	8e e5       	ldi	r24, 0x5E	; 94
 9b4:	94 e0       	ldi	r25, 0x04	; 4
 9b6:	9d 83       	std	Y+5, r25	; 0x05
 9b8:	8c 83       	std	Y+4, r24	; 0x04
 9ba:	9f 83       	std	Y+7, r25	; 0x07
 9bc:	8e 83       	std	Y+6, r24	; 0x06
 9be:	8e e5       	ldi	r24, 0x5E	; 94
 9c0:	95 e0       	ldi	r25, 0x05	; 5
 9c2:	99 87       	std	Y+9, r25	; 0x09
 9c4:	88 87       	std	Y+8, r24	; 0x08
 9c6:	9b 87       	std	Y+11, r25	; 0x0b
 9c8:	8a 87       	std	Y+10, r24	; 0x0a
 9ca:	8e e5       	ldi	r24, 0x5E	; 94
 9cc:	96 e0       	ldi	r25, 0x06	; 6
 9ce:	9d 87       	std	Y+13, r25	; 0x0d
 9d0:	8c 87       	std	Y+12, r24	; 0x0c
 9d2:	9f 87       	std	Y+15, r25	; 0x0f
 9d4:	8e 87       	std	Y+14, r24	; 0x0e
 9d6:	8e e5       	ldi	r24, 0x5E	; 94
 9d8:	97 e0       	ldi	r25, 0x07	; 7
 9da:	99 8b       	std	Y+17, r25	; 0x11
 9dc:	88 8b       	std	Y+16, r24	; 0x10
 9de:	9b 8b       	std	Y+19, r25	; 0x13
 9e0:	8a 8b       	std	Y+18, r24	; 0x12
 9e2:	8e e5       	ldi	r24, 0x5E	; 94
 9e4:	98 e0       	ldi	r25, 0x08	; 8
 9e6:	9d 8b       	std	Y+21, r25	; 0x15
 9e8:	8c 8b       	std	Y+20, r24	; 0x14
 9ea:	9f 8b       	std	Y+23, r25	; 0x17
 9ec:	8e 8b       	std	Y+22, r24	; 0x16
 9ee:	8e e5       	ldi	r24, 0x5E	; 94
 9f0:	99 e0       	ldi	r25, 0x09	; 9
 9f2:	99 8f       	std	Y+25, r25	; 0x19
 9f4:	88 8f       	std	Y+24, r24	; 0x18
 9f6:	9b 8f       	std	Y+27, r25	; 0x1b
 9f8:	8a 8f       	std	Y+26, r24	; 0x1a
 9fa:	8e e5       	ldi	r24, 0x5E	; 94
 9fc:	9a e0       	ldi	r25, 0x0A	; 10
 9fe:	9d 8f       	std	Y+29, r25	; 0x1d
 a00:	8c 8f       	std	Y+28, r24	; 0x1c
 a02:	9f 8f       	std	Y+31, r25	; 0x1f
 a04:	8e 8f       	std	Y+30, r24	; 0x1e
 a06:	8a ea       	ldi	r24, 0xAA	; 170
 a08:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <x_thread_stacks>
 a0c:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <x_thread_stacks+0x100>
 a10:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <x_thread_stacks+0x200>
 a14:	80 93 5f 05 	sts	0x055F, r24	; 0x80055f <x_thread_stacks+0x300>
 a18:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <x_thread_stacks+0x400>
 a1c:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <x_thread_stacks+0x500>
 a20:	80 93 5f 08 	sts	0x085F, r24	; 0x80085f <x_thread_stacks+0x600>
 a24:	80 93 5f 09 	sts	0x095F, r24	; 0x80095f <x_thread_stacks+0x700>
 a28:	a4 df       	rcall	.-184    	; 0x972 <init_System_Timer>
 a2a:	ed b7       	in	r30, 0x3d	; 61
 a2c:	fe b7       	in	r31, 0x3e	; 62
 a2e:	a8 81       	ld	r26, Y
 a30:	b9 81       	ldd	r27, Y+1	; 0x01
 a32:	85 81       	ldd	r24, Z+5	; 0x05
 a34:	8c 93       	st	X, r24
 a36:	a8 81       	ld	r26, Y
 a38:	b9 81       	ldd	r27, Y+1	; 0x01
 a3a:	84 81       	ldd	r24, Z+4	; 0x04
 a3c:	11 97       	sbiw	r26, 0x01	; 1
 a3e:	8c 93       	st	X, r24
 a40:	a8 81       	ld	r26, Y
 a42:	b9 81       	ldd	r27, Y+1	; 0x01
 a44:	83 81       	ldd	r24, Z+3	; 0x03
 a46:	12 97       	sbiw	r26, 0x02	; 2
 a48:	8c 93       	st	X, r24
 a4a:	a8 81       	ld	r26, Y
 a4c:	b9 81       	ldd	r27, Y+1	; 0x01
 a4e:	82 81       	ldd	r24, Z+2	; 0x02
 a50:	13 97       	sbiw	r26, 0x03	; 3
 a52:	8c 93       	st	X, r24
 a54:	88 81       	ld	r24, Y
 a56:	99 81       	ldd	r25, Y+1	; 0x01
 a58:	21 81       	ldd	r18, Z+1	; 0x01
 a5a:	fc 01       	movw	r30, r24
 a5c:	34 97       	sbiw	r30, 0x04	; 4
 a5e:	20 83       	st	Z, r18
 a60:	88 81       	ld	r24, Y
 a62:	99 81       	ldd	r25, Y+1	; 0x01
 a64:	05 97       	sbiw	r24, 0x05	; 5
 a66:	9e bf       	out	0x3e, r25	; 62
 a68:	8d bf       	out	0x3d, r24	; 61
 a6a:	78 94       	sei
 a6c:	df 91       	pop	r29
 a6e:	cf 91       	pop	r28
 a70:	08 95       	ret

00000a72 <x_delay>:
 a72:	9c 01       	movw	r18, r24
 a74:	9f b7       	in	r25, 0x3f	; 63
 a76:	f8 94       	cli
 a78:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <x_thread_id>
 a7c:	f0 e0       	ldi	r31, 0x00	; 0
 a7e:	ee 0f       	add	r30, r30
 a80:	ff 1f       	adc	r31, r31
 a82:	e1 5a       	subi	r30, 0xA1	; 161
 a84:	f5 4f       	sbci	r31, 0xF5	; 245
 a86:	31 83       	std	Z+1, r19	; 0x01
 a88:	20 83       	st	Z, r18
 a8a:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <x_delay_status>
 a8e:	80 91 70 0a 	lds	r24, 0x0A70	; 0x800a70 <x_thread_mask>
 a92:	82 2b       	or	r24, r18
 a94:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <x_delay_status>
 a98:	9f bf       	out	0x3f, r25	; 63
 a9a:	44 cb       	rjmp	.-2424   	; 0x124 <x_yield>
 a9c:	08 95       	ret

00000a9e <__vector_21>:
 a9e:	1f 92       	push	r1
 aa0:	0f 92       	push	r0
 aa2:	0f b6       	in	r0, 0x3f	; 63
 aa4:	0f 92       	push	r0
 aa6:	11 24       	eor	r1, r1
 aa8:	0b b6       	in	r0, 0x3b	; 59
 aaa:	0f 92       	push	r0
 aac:	2f 93       	push	r18
 aae:	3f 93       	push	r19
 ab0:	4f 93       	push	r20
 ab2:	5f 93       	push	r21
 ab4:	8f 93       	push	r24
 ab6:	9f 93       	push	r25
 ab8:	af 93       	push	r26
 aba:	bf 93       	push	r27
 abc:	ef 93       	push	r30
 abe:	ff 93       	push	r31
 ac0:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <x_system_counter>
 ac4:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <x_system_counter+0x1>
 ac8:	a0 91 20 02 	lds	r26, 0x0220	; 0x800220 <x_system_counter+0x2>
 acc:	b0 91 21 02 	lds	r27, 0x0221	; 0x800221 <x_system_counter+0x3>
 ad0:	01 96       	adiw	r24, 0x01	; 1
 ad2:	a1 1d       	adc	r26, r1
 ad4:	b1 1d       	adc	r27, r1
 ad6:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <x_system_counter>
 ada:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <x_system_counter+0x1>
 ade:	a0 93 20 02 	sts	0x0220, r26	; 0x800220 <x_system_counter+0x2>
 ae2:	b0 93 21 02 	sts	0x0221, r27	; 0x800221 <x_system_counter+0x3>
 ae6:	30 91 3d 02 	lds	r19, 0x023D	; 0x80023d <x_delay_status>
 aea:	ef e5       	ldi	r30, 0x5F	; 95
 aec:	fa e0       	ldi	r31, 0x0A	; 10
 aee:	4f e6       	ldi	r20, 0x6F	; 111
 af0:	5a e0       	ldi	r21, 0x0A	; 10
 af2:	21 e0       	ldi	r18, 0x01	; 1
 af4:	80 81       	ld	r24, Z
 af6:	91 81       	ldd	r25, Z+1	; 0x01
 af8:	01 97       	sbiw	r24, 0x01	; 1
 afa:	81 93       	st	Z+, r24
 afc:	91 93       	st	Z+, r25
 afe:	89 2b       	or	r24, r25
 b00:	19 f4       	brne	.+6      	; 0xb08 <__vector_21+0x6a>
 b02:	82 2f       	mov	r24, r18
 b04:	80 95       	com	r24
 b06:	38 23       	and	r19, r24
 b08:	22 0f       	add	r18, r18
 b0a:	e4 17       	cp	r30, r20
 b0c:	f5 07       	cpc	r31, r21
 b0e:	91 f7       	brne	.-28     	; 0xaf4 <__vector_21+0x56>
 b10:	30 93 3d 02 	sts	0x023D, r19	; 0x80023d <x_delay_status>
 b14:	ff 91       	pop	r31
 b16:	ef 91       	pop	r30
 b18:	bf 91       	pop	r27
 b1a:	af 91       	pop	r26
 b1c:	9f 91       	pop	r25
 b1e:	8f 91       	pop	r24
 b20:	5f 91       	pop	r21
 b22:	4f 91       	pop	r20
 b24:	3f 91       	pop	r19
 b26:	2f 91       	pop	r18
 b28:	0f 90       	pop	r0
 b2a:	0b be       	out	0x3b, r0	; 59
 b2c:	0f 90       	pop	r0
 b2e:	0f be       	out	0x3f, r0	; 63
 b30:	0f 90       	pop	r0
 b32:	1f 90       	pop	r1
 b34:	18 95       	reti

00000b36 <x_stack_overflow>:
 b36:	ac 01       	movw	r20, r24
 b38:	27 9a       	sbi	0x04, 7	; 4
 b3a:	2f 98       	cbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b3c:	2f ef       	ldi	r18, 0xFF	; 255
 b3e:	61 ee       	ldi	r22, 0xE1	; 225
 b40:	84 e0       	ldi	r24, 0x04	; 4
 b42:	21 50       	subi	r18, 0x01	; 1
 b44:	60 40       	sbci	r22, 0x00	; 0
 b46:	80 40       	sbci	r24, 0x00	; 0
 b48:	e1 f7       	brne	.-8      	; 0xb42 <x_stack_overflow+0xc>
 b4a:	00 c0       	rjmp	.+0      	; 0xb4c <x_stack_overflow+0x16>
 b4c:	00 00       	nop
 b4e:	55 23       	and	r21, r21
 b50:	fc f0       	brlt	.+62     	; 0xb90 <x_stack_overflow+0x5a>
 b52:	20 e0       	ldi	r18, 0x00	; 0
 b54:	30 e0       	ldi	r19, 0x00	; 0
 b56:	95 b1       	in	r25, 0x05	; 5
 b58:	90 58       	subi	r25, 0x80	; 128
 b5a:	95 b9       	out	0x05, r25	; 5
 b5c:	9f ef       	ldi	r25, 0xFF	; 255
 b5e:	60 e7       	ldi	r22, 0x70	; 112
 b60:	82 e0       	ldi	r24, 0x02	; 2
 b62:	91 50       	subi	r25, 0x01	; 1
 b64:	60 40       	sbci	r22, 0x00	; 0
 b66:	80 40       	sbci	r24, 0x00	; 0
 b68:	e1 f7       	brne	.-8      	; 0xb62 <x_stack_overflow+0x2c>
 b6a:	00 c0       	rjmp	.+0      	; 0xb6c <x_stack_overflow+0x36>
 b6c:	00 00       	nop
 b6e:	95 b1       	in	r25, 0x05	; 5
 b70:	90 58       	subi	r25, 0x80	; 128
 b72:	95 b9       	out	0x05, r25	; 5
 b74:	9f ef       	ldi	r25, 0xFF	; 255
 b76:	69 e6       	ldi	r22, 0x69	; 105
 b78:	88 e1       	ldi	r24, 0x18	; 24
 b7a:	91 50       	subi	r25, 0x01	; 1
 b7c:	60 40       	sbci	r22, 0x00	; 0
 b7e:	80 40       	sbci	r24, 0x00	; 0
 b80:	e1 f7       	brne	.-8      	; 0xb7a <x_stack_overflow+0x44>
 b82:	00 c0       	rjmp	.+0      	; 0xb84 <x_stack_overflow+0x4e>
 b84:	00 00       	nop
 b86:	2f 5f       	subi	r18, 0xFF	; 255
 b88:	3f 4f       	sbci	r19, 0xFF	; 255
 b8a:	42 17       	cp	r20, r18
 b8c:	53 07       	cpc	r21, r19
 b8e:	1c f7       	brge	.-58     	; 0xb56 <x_stack_overflow+0x20>
 b90:	9f ef       	ldi	r25, 0xFF	; 255
 b92:	23 e2       	ldi	r18, 0x23	; 35
 b94:	64 ef       	ldi	r22, 0xF4	; 244
 b96:	91 50       	subi	r25, 0x01	; 1
 b98:	20 40       	sbci	r18, 0x00	; 0
 b9a:	60 40       	sbci	r22, 0x00	; 0
 b9c:	e1 f7       	brne	.-8      	; 0xb96 <x_stack_overflow+0x60>
 b9e:	00 c0       	rjmp	.+0      	; 0xba0 <x_stack_overflow+0x6a>
 ba0:	00 00       	nop
 ba2:	d5 cf       	rjmp	.-86     	; 0xb4e <x_stack_overflow+0x18>

00000ba4 <__divmodhi4>:
 ba4:	97 fb       	bst	r25, 7
 ba6:	07 2e       	mov	r0, r23
 ba8:	16 f4       	brtc	.+4      	; 0xbae <__divmodhi4+0xa>
 baa:	00 94       	com	r0
 bac:	06 d0       	rcall	.+12     	; 0xbba <__divmodhi4_neg1>
 bae:	77 fd       	sbrc	r23, 7
 bb0:	08 d0       	rcall	.+16     	; 0xbc2 <__divmodhi4_neg2>
 bb2:	0b d0       	rcall	.+22     	; 0xbca <__udivmodhi4>
 bb4:	07 fc       	sbrc	r0, 7
 bb6:	05 d0       	rcall	.+10     	; 0xbc2 <__divmodhi4_neg2>
 bb8:	3e f4       	brtc	.+14     	; 0xbc8 <__divmodhi4_exit>

00000bba <__divmodhi4_neg1>:
 bba:	90 95       	com	r25
 bbc:	81 95       	neg	r24
 bbe:	9f 4f       	sbci	r25, 0xFF	; 255
 bc0:	08 95       	ret

00000bc2 <__divmodhi4_neg2>:
 bc2:	70 95       	com	r23
 bc4:	61 95       	neg	r22
 bc6:	7f 4f       	sbci	r23, 0xFF	; 255

00000bc8 <__divmodhi4_exit>:
 bc8:	08 95       	ret

00000bca <__udivmodhi4>:
 bca:	aa 1b       	sub	r26, r26
 bcc:	bb 1b       	sub	r27, r27
 bce:	51 e1       	ldi	r21, 0x11	; 17
 bd0:	07 c0       	rjmp	.+14     	; 0xbe0 <__udivmodhi4_ep>

00000bd2 <__udivmodhi4_loop>:
 bd2:	aa 1f       	adc	r26, r26
 bd4:	bb 1f       	adc	r27, r27
 bd6:	a6 17       	cp	r26, r22
 bd8:	b7 07       	cpc	r27, r23
 bda:	10 f0       	brcs	.+4      	; 0xbe0 <__udivmodhi4_ep>
 bdc:	a6 1b       	sub	r26, r22
 bde:	b7 0b       	sbc	r27, r23

00000be0 <__udivmodhi4_ep>:
 be0:	88 1f       	adc	r24, r24
 be2:	99 1f       	adc	r25, r25
 be4:	5a 95       	dec	r21
 be6:	a9 f7       	brne	.-22     	; 0xbd2 <__udivmodhi4_loop>
 be8:	80 95       	com	r24
 bea:	90 95       	com	r25
 bec:	bc 01       	movw	r22, r24
 bee:	cd 01       	movw	r24, r26
 bf0:	08 95       	ret

00000bf2 <_exit>:
 bf2:	f8 94       	cli

00000bf4 <__stop_program>:
 bf4:	ff cf       	rjmp	.-2      	; 0xbf4 <__stop_program>
