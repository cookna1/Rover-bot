
Rover-bot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000089e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000082a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800200  00800200  0000089e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000089e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001799  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ff7  00000000  00000000  000021b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c00  00000000  00000000  000031b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  00003db0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d7  00000000  00000000  0000401c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d3e  00000000  00000000  000047f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00005531  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	2e c2       	rjmp	.+1116   	; 0x486 <__vector_10>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	e7 c0       	rjmp	.+462    	; 0x204 <__vector_13>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e2       	ldi	r30, 0x2A	; 42
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 31       	cpi	r26, 0x1E	; 30
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	18 d2       	rcall	.+1072   	; 0x550 <main>
 120:	82 c3       	rjmp	.+1796   	; 0x826 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <PSerial_read>:
}

int PSerial_read(unsigned char port){
    int data = -1;

    switch (port) {
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	71 f0       	breq	.+28     	; 0x144 <PSerial_read+0x20>
 128:	28 f0       	brcs	.+10     	; 0x134 <PSerial_read+0x10>
 12a:	82 30       	cpi	r24, 0x02	; 2
 12c:	99 f0       	breq	.+38     	; 0x154 <PSerial_read+0x30>
 12e:	83 30       	cpi	r24, 0x03	; 3
 130:	c9 f0       	breq	.+50     	; 0x164 <PSerial_read+0x40>
 132:	20 c0       	rjmp	.+64     	; 0x174 <PSerial_read+0x50>
        case 0: 
           if (UCSR0A & (1<<RXC0))
 134:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 138:	88 23       	and	r24, r24
 13a:	fc f4       	brge	.+62     	; 0x17a <PSerial_read+0x56>
                data = UDR0;
 13c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	08 95       	ret
           break;
        case 1:
            if (UCSR1A & (1<<RXC1))
 144:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 148:	88 23       	and	r24, r24
 14a:	d4 f4       	brge	.+52     	; 0x180 <PSerial_read+0x5c>
                data = UDR1;
 14c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	08 95       	ret
            break;
        case 2:
            if (UCSR2A & (1<<RXC2))
 154:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
 158:	88 23       	and	r24, r24
 15a:	ac f4       	brge	.+42     	; 0x186 <PSerial_read+0x62>
                data = UDR2;
 15c:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	08 95       	ret
            break;
        case 3:
             if (UCSR3A & (1<<RXC3))
 164:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
 168:	88 23       	and	r24, r24
 16a:	84 f4       	brge	.+32     	; 0x18c <PSerial_read+0x68>
                data = UDR3;
 16c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	08 95       	ret
	if (speed == 250000l) return 3l;
	return 103l;
}

int PSerial_read(unsigned char port){
    int data = -1;
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	9f ef       	ldi	r25, 0xFF	; 255
 178:	08 95       	ret
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	9f ef       	ldi	r25, 0xFF	; 255
 17e:	08 95       	ret
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	9f ef       	ldi	r25, 0xFF	; 255
 184:	08 95       	ret
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	9f ef       	ldi	r25, 0xFF	; 255
 18a:	08 95       	ret
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	9f ef       	ldi	r25, 0xFF	; 255
            break;
        default :
            break;
    }
    return data;
}
 190:	08 95       	ret

00000192 <PSerial_open>:


#include "PSerial.h"

void PSerial_open(unsigned char port, long speed, int config){
    switch (port) {
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	91 f0       	breq	.+36     	; 0x1ba <PSerial_open+0x28>
 196:	28 f0       	brcs	.+10     	; 0x1a2 <PSerial_open+0x10>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	d9 f0       	breq	.+54     	; 0x1d2 <PSerial_open+0x40>
 19c:	83 30       	cpi	r24, 0x03	; 3
 19e:	29 f1       	breq	.+74     	; 0x1ea <PSerial_open+0x58>
 1a0:	2f c0       	rjmp	.+94     	; 0x200 <PSerial_open+0x6e>
        case 0: 
			UCSR0B |= 0x18;
 1a2:	e1 ec       	ldi	r30, 0xC1	; 193
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	90 81       	ld	r25, Z
 1a8:	98 61       	ori	r25, 0x18	; 24
 1aa:	90 83       	st	Z, r25
            UCSR0C = config;
 1ac:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
			UBRR0 = speed;
 1b0:	50 93 c5 00 	sts	0x00C5, r21	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 1b4:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
            break;
 1b8:	23 c0       	rjmp	.+70     	; 0x200 <PSerial_open+0x6e>
        case 1:
            UCSR1C = config;
 1ba:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
			UCSR1B |= 0x18;
 1be:	e9 ec       	ldi	r30, 0xC9	; 201
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	90 81       	ld	r25, Z
 1c4:	98 61       	ori	r25, 0x18	; 24
 1c6:	90 83       	st	Z, r25
            UBRR1 = speed;
 1c8:	50 93 cd 00 	sts	0x00CD, r21	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
 1cc:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
            break;
 1d0:	17 c0       	rjmp	.+46     	; 0x200 <PSerial_open+0x6e>
        case 2:
            UCSR2C = config;
 1d2:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
			UCSR2B |= 0x18;
 1d6:	e1 ed       	ldi	r30, 0xD1	; 209
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	90 81       	ld	r25, Z
 1dc:	98 61       	ori	r25, 0x18	; 24
 1de:	90 83       	st	Z, r25
            UBRR2 = speed;
 1e0:	50 93 d5 00 	sts	0x00D5, r21	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
 1e4:	40 93 d4 00 	sts	0x00D4, r20	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
            break;
 1e8:	0b c0       	rjmp	.+22     	; 0x200 <PSerial_open+0x6e>
        case 3:
            UCSR3C = config;
 1ea:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
			UCSR3B |= 0x18;
 1ee:	e1 e3       	ldi	r30, 0x31	; 49
 1f0:	f1 e0       	ldi	r31, 0x01	; 1
 1f2:	90 81       	ld	r25, Z
 1f4:	98 61       	ori	r25, 0x18	; 24
 1f6:	90 83       	st	Z, r25
            UBRR3 = speed;
 1f8:	50 93 35 01 	sts	0x0135, r21	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
 1fc:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
            break;
        default:
            break;
    }
	PSerial_read(port);
 200:	91 cf       	rjmp	.-222    	; 0x124 <PSerial_read>
 202:	08 95       	ret

00000204 <__vector_13>:
	TIMSK2 |= (1 << OCIE2A);
	
	OCR2A = tickTime;
}

ISR(TIMER2_COMPA_vect) {
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	af 93       	push	r26
 214:	bf 93       	push	r27
	timeCounter++;
 216:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <timeCounter>
 21a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <timeCounter+0x1>
 21e:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <timeCounter+0x2>
 222:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <timeCounter+0x3>
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	a1 1d       	adc	r26, r1
 22a:	b1 1d       	adc	r27, r1
 22c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <timeCounter>
 230:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <timeCounter+0x1>
 234:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <timeCounter+0x2>
 238:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <timeCounter+0x3>
	/*if (timeCounter % 1000 == 0)*/ //PORTB ^= 0x80;
 23c:	bf 91       	pop	r27
 23e:	af 91       	pop	r26
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <straight>:
	straight(0.7);
	float inches = 0;
	while(leftCount < 150) {
		 PORTF ^= (1<<PF2);
	}
	straight(0);
 24e:	cf 92       	push	r12
 250:	df 92       	push	r13
 252:	ef 92       	push	r14
 254:	ff 92       	push	r15
 256:	6b 01       	movw	r12, r22
 258:	7c 01       	movw	r14, r24
 25a:	f8 94       	cli
 25c:	20 e0       	ldi	r18, 0x00	; 0
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	a9 01       	movw	r20, r18
 262:	ad d1       	rcall	.+858    	; 0x5be <__cmpsf2>
 264:	81 11       	cpse	r24, r1
 266:	09 c0       	rjmp	.+18     	; 0x27a <straight+0x2c>
 268:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 26c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 270:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 274:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 278:	15 c0       	rjmp	.+42     	; 0x2a4 <straight+0x56>
 27a:	20 e0       	ldi	r18, 0x00	; 0
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	48 ec       	ldi	r20, 0xC8	; 200
 280:	53 e4       	ldi	r21, 0x43	; 67
 282:	c7 01       	movw	r24, r14
 284:	b6 01       	movw	r22, r12
 286:	1d d2       	rcall	.+1082   	; 0x6c2 <__mulsf3>
 288:	9e d1       	rcall	.+828    	; 0x5c6 <__fixsfsi>
 28a:	9b 01       	movw	r18, r22
 28c:	20 57       	subi	r18, 0x70	; 112
 28e:	3e 4f       	sbci	r19, 0xFE	; 254
 290:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 294:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 298:	67 55       	subi	r22, 0x57	; 87
 29a:	7e 4f       	sbci	r23, 0xFE	; 254
 29c:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 2a0:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 2a4:	78 94       	sei
 2a6:	ff 90       	pop	r15
 2a8:	ef 90       	pop	r14
 2aa:	df 90       	pop	r13
 2ac:	cf 90       	pop	r12
 2ae:	08 95       	ret

000002b0 <initWheels>:
	straight(0);
	
}

void initWheels() {
	DDRC |= 0x0F; 
 2b0:	87 b1       	in	r24, 0x07	; 7
 2b2:	8f 60       	ori	r24, 0x0F	; 15
 2b4:	87 b9       	out	0x07, r24	; 7
	DDRL |= 0x18;
 2b6:	ea e0       	ldi	r30, 0x0A	; 10
 2b8:	f1 e0       	ldi	r31, 0x01	; 1
 2ba:	80 81       	ld	r24, Z
 2bc:	88 61       	ori	r24, 0x18	; 24
 2be:	80 83       	st	Z, r24
	
	timer = 0;
 2c0:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <timer>
 2c4:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <timer+0x1>
 2c8:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <timer+0x2>
 2cc:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <timer+0x3>
 2d0:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <timer+0x4>
 2d4:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <timer+0x5>
 2d8:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <timer+0x6>
 2dc:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <timer+0x7>

	int period = 1000; //total time

	// set up left timer
	ICR5 = period;
 2e0:	88 ee       	ldi	r24, 0xE8	; 232
 2e2:	93 e0       	ldi	r25, 0x03	; 3
 2e4:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
 2e8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>

// setDutyCycle accepts a dutycycle (number between 0.0 and 1.0) and the wheel (L_WHEEL or R_WHEEL)
void setDutyCycle(float dutycycle, int wheel) {
	
	if (dutycycle == 0) {
		if (wheel == L_WHEEL) OCR5A = 0;
 2ec:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 2f0:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
		else if (wheel == R_WHEEL) OCR5B = 0;
 2f4:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 2f8:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
	// set up left timer
	ICR5 = period;
	setDutyCycle(0, L_WHEEL);
	setDutyCycle(0, R_WHEEL);

	TCCR5A |= (1 <<COM5A1) | (1 << COM5B1);
 2fc:	e0 e2       	ldi	r30, 0x20	; 32
 2fe:	f1 e0       	ldi	r31, 0x01	; 1
 300:	80 81       	ld	r24, Z
 302:	80 6a       	ori	r24, 0xA0	; 160
 304:	80 83       	st	Z, r24
	TCCR5B |= (1 << WGM53) | (1 << CS51);
 306:	e1 e2       	ldi	r30, 0x21	; 33
 308:	f1 e0       	ldi	r31, 0x01	; 1
 30a:	80 81       	ld	r24, Z
 30c:	82 61       	ori	r24, 0x12	; 18
 30e:	80 83       	st	Z, r24
	
	
	PORTC |= L_FORWARD;
 310:	43 9a       	sbi	0x08, 3	; 8
	PORTC |= R_FORWARD; 
 312:	40 9a       	sbi	0x08, 0	; 8
	
	// setup photoregister slit detection.
	PORTJ &= ~((1 << PJ1) | (1 << PJ0));
 314:	e5 e0       	ldi	r30, 0x05	; 5
 316:	f1 e0       	ldi	r31, 0x01	; 1
 318:	80 81       	ld	r24, Z
 31a:	8c 7f       	andi	r24, 0xFC	; 252
 31c:	80 83       	st	Z, r24
	
	PCMSK1 |= (1 << PCINT9);
 31e:	ec e6       	ldi	r30, 0x6C	; 108
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	82 60       	ori	r24, 0x02	; 2
 326:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT10);
 328:	80 81       	ld	r24, Z
 32a:	84 60       	ori	r24, 0x04	; 4
 32c:	80 83       	st	Z, r24
	
	PCICR |= (1<<PCIE1);
 32e:	e8 e6       	ldi	r30, 0x68	; 104
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	82 60       	ori	r24, 0x02	; 2
 336:	80 83       	st	Z, r24
 338:	08 95       	ret

0000033a <changeDirection>:
	
}

void changeDirection(int direction, int wheelNumber) {
	//_delay_ms(100);
	if (wheelNumber == L_WHEEL && direction == FORWARD) {
 33a:	61 15       	cp	r22, r1
 33c:	71 05       	cpc	r23, r1
 33e:	71 f4       	brne	.+28     	; 0x35c <changeDirection+0x22>
 340:	00 97       	sbiw	r24, 0x00	; 0
 342:	29 f4       	brne	.+10     	; 0x34e <changeDirection+0x14>
		PORTC &= 0xF3;
 344:	88 b1       	in	r24, 0x08	; 8
 346:	83 7f       	andi	r24, 0xF3	; 243
 348:	88 b9       	out	0x08, r24	; 8
		PORTC |=  L_FORWARD;
 34a:	43 9a       	sbi	0x08, 3	; 8
 34c:	08 95       	ret
	} else if (wheelNumber == L_WHEEL && direction == BACKWARD) {
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	a9 f4       	brne	.+42     	; 0x37c <changeDirection+0x42>
		PORTC &= 0xF3;
 352:	88 b1       	in	r24, 0x08	; 8
 354:	83 7f       	andi	r24, 0xF3	; 243
 356:	88 b9       	out	0x08, r24	; 8
		PORTC |=  L_BACKWARD;
 358:	42 9a       	sbi	0x08, 2	; 8
 35a:	08 95       	ret
	} else if (wheelNumber == R_WHEEL && direction == FORWARD) {
 35c:	61 30       	cpi	r22, 0x01	; 1
 35e:	71 05       	cpc	r23, r1
 360:	69 f4       	brne	.+26     	; 0x37c <changeDirection+0x42>
 362:	00 97       	sbiw	r24, 0x00	; 0
 364:	29 f4       	brne	.+10     	; 0x370 <changeDirection+0x36>
		PORTC &= 0xFC;
 366:	88 b1       	in	r24, 0x08	; 8
 368:	8c 7f       	andi	r24, 0xFC	; 252
 36a:	88 b9       	out	0x08, r24	; 8
		PORTC |=  R_FORWARD;
 36c:	40 9a       	sbi	0x08, 0	; 8
 36e:	08 95       	ret
	} else if (wheelNumber == R_WHEEL && direction == BACKWARD) {
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	21 f4       	brne	.+8      	; 0x37c <changeDirection+0x42>
		PORTC &= 0xFC;
 374:	88 b1       	in	r24, 0x08	; 8
 376:	8c 7f       	andi	r24, 0xFC	; 252
 378:	88 b9       	out	0x08, r24	; 8
		PORTC |=  R_BACKWARD;
 37a:	41 9a       	sbi	0x08, 1	; 8
 37c:	08 95       	ret

0000037e <setTurn>:
	sei();
}

void setTurn() {
	
	changeDirection(FORWARD, L_WHEEL);
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	70 e0       	ldi	r23, 0x00	; 0
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	d9 df       	rcall	.-78     	; 0x33a <changeDirection>
	changeDirection(BACKWARD, R_WHEEL);
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	d4 df       	rcall	.-88     	; 0x33a <changeDirection>
		if (wheel == L_WHEEL) OCR5A = 0;
		else if (wheel == R_WHEEL) OCR5B = 0;
	} else {
		int ontime = ((int)(dutycycle * 400.0) + 400) ;
		
		if (wheel == L_WHEEL) OCR5A = ontime ;
 392:	88 ea       	ldi	r24, 0xA8	; 168
 394:	92 e0       	ldi	r25, 0x02	; 2
 396:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 39a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
		else if (wheel == R_WHEEL) OCR5B = ontime + 25;
 39e:	81 ec       	ldi	r24, 0xC1	; 193
 3a0:	92 e0       	ldi	r25, 0x02	; 2
 3a2:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 3a6:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 3aa:	08 95       	ret

000003ac <turn>:
	changeDirection(BACKWARD, R_WHEEL);
	setDutyCycle(0.7, L_WHEEL);
	setDutyCycle(0.7, R_WHEEL);
}

void turn(int d) {
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	ec 01       	movw	r28, r24
	cli();
 3b2:	f8 94       	cli
	setTurn();
 3b4:	e4 df       	rcall	.-56     	; 0x37e <setTurn>
	leftCount = 0;
 3b6:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <leftCount+0x1>
 3ba:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <leftCount>
	rightcount = 0;
 3be:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <rightcount+0x1>
 3c2:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <rightcount>
	sei();
 3c6:	78 94       	sei
	
	int count = (d * 50) / 90;
 3c8:	22 e3       	ldi	r18, 0x32	; 50
 3ca:	2c 9f       	mul	r18, r28
 3cc:	c0 01       	movw	r24, r0
 3ce:	2d 9f       	mul	r18, r29
 3d0:	90 0d       	add	r25, r0
 3d2:	11 24       	eor	r1, r1
 3d4:	6a e5       	ldi	r22, 0x5A	; 90
 3d6:	70 e0       	ldi	r23, 0x00	; 0
 3d8:	ff d1       	rcall	.+1022   	; 0x7d8 <__divmodhi4>

	while(leftCount < count) {
 3da:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <leftCount>
 3de:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <leftCount+0x1>
 3e2:	86 17       	cp	r24, r22
 3e4:	97 07       	cpc	r25, r23
 3e6:	5c f4       	brge	.+22     	; 0x3fe <turn+0x52>
		 PORTF ^= (1<<PF2);
 3e8:	24 e0       	ldi	r18, 0x04	; 4
 3ea:	81 b3       	in	r24, 0x11	; 17
 3ec:	82 27       	eor	r24, r18
 3ee:	81 bb       	out	0x11, r24	; 17
	rightcount = 0;
	sei();
	
	int count = (d * 50) / 90;

	while(leftCount < count) {
 3f0:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <leftCount>
 3f4:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <leftCount+0x1>
 3f8:	86 17       	cp	r24, r22
 3fa:	97 07       	cpc	r25, r23
 3fc:	b4 f3       	brlt	.-20     	; 0x3ea <turn+0x3e>
		 PORTF ^= (1<<PF2);
	}
	straight(0);
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	70 e0       	ldi	r23, 0x00	; 0
 402:	cb 01       	movw	r24, r22
 404:	24 df       	rcall	.-440    	; 0x24e <straight>
	
}
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	08 95       	ret

0000040c <setDutyCycle>:
	}

}

// setDutyCycle accepts a dutycycle (number between 0.0 and 1.0) and the wheel (L_WHEEL or R_WHEEL)
void setDutyCycle(float dutycycle, int wheel) {
 40c:	cf 92       	push	r12
 40e:	df 92       	push	r13
 410:	ef 92       	push	r14
 412:	ff 92       	push	r15
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	6b 01       	movw	r12, r22
 41a:	7c 01       	movw	r14, r24
 41c:	ea 01       	movw	r28, r20
	
	if (dutycycle == 0) {
 41e:	20 e0       	ldi	r18, 0x00	; 0
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	a9 01       	movw	r20, r18
 424:	cc d0       	rcall	.+408    	; 0x5be <__cmpsf2>
 426:	81 11       	cpse	r24, r1
 428:	0e c0       	rjmp	.+28     	; 0x446 <setDutyCycle+0x3a>
		if (wheel == L_WHEEL) OCR5A = 0;
 42a:	20 97       	sbiw	r28, 0x00	; 0
 42c:	29 f4       	brne	.+10     	; 0x438 <setDutyCycle+0x2c>
 42e:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 432:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 436:	20 c0       	rjmp	.+64     	; 0x478 <setDutyCycle+0x6c>
		else if (wheel == R_WHEEL) OCR5B = 0;
 438:	21 97       	sbiw	r28, 0x01	; 1
 43a:	f1 f4       	brne	.+60     	; 0x478 <setDutyCycle+0x6c>
 43c:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 440:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 444:	19 c0       	rjmp	.+50     	; 0x478 <setDutyCycle+0x6c>
	} else {
		int ontime = ((int)(dutycycle * 400.0) + 400) ;
 446:	20 e0       	ldi	r18, 0x00	; 0
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	48 ec       	ldi	r20, 0xC8	; 200
 44c:	53 e4       	ldi	r21, 0x43	; 67
 44e:	c7 01       	movw	r24, r14
 450:	b6 01       	movw	r22, r12
 452:	37 d1       	rcall	.+622    	; 0x6c2 <__mulsf3>
 454:	b8 d0       	rcall	.+368    	; 0x5c6 <__fixsfsi>
		
		if (wheel == L_WHEEL) OCR5A = ontime ;
 456:	20 97       	sbiw	r28, 0x00	; 0
 458:	39 f4       	brne	.+14     	; 0x468 <setDutyCycle+0x5c>
 45a:	60 57       	subi	r22, 0x70	; 112
 45c:	7e 4f       	sbci	r23, 0xFE	; 254
 45e:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 462:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 466:	08 c0       	rjmp	.+16     	; 0x478 <setDutyCycle+0x6c>
		else if (wheel == R_WHEEL) OCR5B = ontime + 25;
 468:	21 97       	sbiw	r28, 0x01	; 1
 46a:	31 f4       	brne	.+12     	; 0x478 <setDutyCycle+0x6c>
 46c:	67 55       	subi	r22, 0x57	; 87
 46e:	7e 4f       	sbci	r23, 0xFE	; 254
 470:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 474:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
	}
}
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	ff 90       	pop	r15
 47e:	ef 90       	pop	r14
 480:	df 90       	pop	r13
 482:	cf 90       	pop	r12
 484:	08 95       	ret

00000486 <__vector_10>:


// pin 15 reads the right wheel, functions as the master
ISR(PCINT1_vect) {
 486:	1f 92       	push	r1
 488:	0f 92       	push	r0
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	0f 92       	push	r0
 48e:	11 24       	eor	r1, r1
 490:	0b b6       	in	r0, 0x3b	; 59
 492:	0f 92       	push	r0
 494:	2f 93       	push	r18
 496:	3f 93       	push	r19
 498:	4f 93       	push	r20
 49a:	5f 93       	push	r21
 49c:	6f 93       	push	r22
 49e:	7f 93       	push	r23
 4a0:	8f 93       	push	r24
 4a2:	9f 93       	push	r25
 4a4:	ef 93       	push	r30
 4a6:	ff 93       	push	r31
	//cli();
	//PSprintf(0, "%d\n\r", leftCount);
	//PORTB ^= 0x80;
	//PORTF ^= (1 << PF2);
	
	int J = PINJ;
 4a8:	e3 e0       	ldi	r30, 0x03	; 3
 4aa:	f1 e0       	ldi	r31, 0x01	; 1
 4ac:	40 81       	ld	r20, Z
 4ae:	50 e0       	ldi	r21, 0x00	; 0
	
	int change = J ^ oldJ;
	
	PORTF = change;
 4b0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end>
 4b4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_end+0x1>
 4b8:	84 27       	eor	r24, r20
 4ba:	95 27       	eor	r25, r21
 4bc:	81 bb       	out	0x11, r24	; 17
	
	int RisON = (PINJ | (1<<PJ1));
 4be:	20 81       	ld	r18, Z
	int LisON = (PINJ | (1<<PJ0));
 4c0:	80 81       	ld	r24, Z
	
	// If master
	if(change | (1 << PJ1)) {
		PORTF ^= (1 << PF0);
 4c2:	31 b3       	in	r19, 0x11	; 17
 4c4:	91 e0       	ldi	r25, 0x01	; 1
 4c6:	93 27       	eor	r25, r19
 4c8:	91 bb       	out	0x11, r25	; 17

		//	update interval time
		rightcount = rightcount + 1;
 4ca:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <rightcount>
 4ce:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <rightcount+0x1>
 4d2:	6f 5f       	subi	r22, 0xFF	; 255
 4d4:	7f 4f       	sbci	r23, 0xFF	; 255
 4d6:	70 93 03 02 	sts	0x0203, r23	; 0x800203 <rightcount+0x1>
 4da:	60 93 02 02 	sts	0x0202, r22	; 0x800202 <rightcount>
		// else if slave
	}
	if(change | (1 << PJ0)) {
		PORTF ^= (1 << PF1);
 4de:	31 b3       	in	r19, 0x11	; 17
 4e0:	92 e0       	ldi	r25, 0x02	; 2
 4e2:	93 27       	eor	r25, r19
 4e4:	91 bb       	out	0x11, r25	; 17


		//	compare interval time to master and adjust duty cycle accordingly.
		leftCount = leftCount + 1;
 4e6:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <leftCount>
 4ea:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <leftCount+0x1>
 4ee:	6f 5f       	subi	r22, 0xFF	; 255
 4f0:	7f 4f       	sbci	r23, 0xFF	; 255
 4f2:	70 93 05 02 	sts	0x0205, r23	; 0x800205 <leftCount+0x1>
 4f6:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <leftCount>
	}
	
	RwasOn = RisON;
 4fa:	22 60       	ori	r18, 0x02	; 2
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	30 93 0b 02 	sts	0x020B, r19	; 0x80020b <RwasOn+0x1>
 502:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <RwasOn>
	LwasOn = LisON;
 506:	81 60       	ori	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <LwasOn+0x1>
 50e:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <LwasOn>
	oldJ = J;
 512:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <__data_end+0x1>
 516:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <__data_end>
	//sei();
}
 51a:	ff 91       	pop	r31
 51c:	ef 91       	pop	r30
 51e:	9f 91       	pop	r25
 520:	8f 91       	pop	r24
 522:	7f 91       	pop	r23
 524:	6f 91       	pop	r22
 526:	5f 91       	pop	r21
 528:	4f 91       	pop	r20
 52a:	3f 91       	pop	r19
 52c:	2f 91       	pop	r18
 52e:	0f 90       	pop	r0
 530:	0b be       	out	0x3b, r0	; 59
 532:	0f 90       	pop	r0
 534:	0f be       	out	0x3f, r0	; 63
 536:	0f 90       	pop	r0
 538:	1f 90       	pop	r1
 53a:	18 95       	reti

0000053c <init>:
#include "wheels.h"
#include "PSerial.h"

void init() {
	//setTime();
	PSerial_open(0, BAUD9600, SERIAL_8N1);
 53c:	26 e0       	ldi	r18, 0x06	; 6
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	48 e6       	ldi	r20, 0x68	; 104
 542:	50 e0       	ldi	r21, 0x00	; 0
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	70 e0       	ldi	r23, 0x00	; 0
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	23 de       	rcall	.-954    	; 0x192 <PSerial_open>
	initWheels();
 54c:	b1 ce       	rjmp	.-670    	; 0x2b0 <initWheels>
 54e:	08 95       	ret

00000550 <main>:
 550:	26 e0       	ldi	r18, 0x06	; 6


int main(void)
{
//PORTB |= 0x80;
	PSerial_open(0, BAUD9600, SERIAL_8N1);
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	48 e6       	ldi	r20, 0x68	; 104
 556:	50 e0       	ldi	r21, 0x00	; 0
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	19 de       	rcall	.-974    	; 0x192 <PSerial_open>
	DDRB = 0x80;
 560:	80 e8       	ldi	r24, 0x80	; 128
 562:	84 b9       	out	0x04, r24	; 4
	DDRF |= (1<<DDF0)|(1<<DDF1)|(DDF2);
 564:	80 b3       	in	r24, 0x10	; 16
 566:	83 60       	ori	r24, 0x03	; 3
	init();
 568:	80 bb       	out	0x10, r24	; 16
 56a:	e8 df       	rcall	.-48     	; 0x53c <init>
	PORTJ &= ~(1 << PJ1);
 56c:	e5 e0       	ldi	r30, 0x05	; 5
 56e:	f1 e0       	ldi	r31, 0x01	; 1
 570:	80 81       	ld	r24, Z
 572:	8d 7f       	andi	r24, 0xFD	; 253
 574:	80 83       	st	Z, r24
	sei();
 576:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 578:	2f ef       	ldi	r18, 0xFF	; 255
 57a:	83 ed       	ldi	r24, 0xD3	; 211
 57c:	90 e3       	ldi	r25, 0x30	; 48
 57e:	21 50       	subi	r18, 0x01	; 1
 580:	80 40       	sbci	r24, 0x00	; 0
 582:	90 40       	sbci	r25, 0x00	; 0
 584:	e1 f7       	brne	.-8      	; 0x57e <main+0x2e>
 586:	00 c0       	rjmp	.+0      	; 0x588 <main+0x38>
 588:	00 00       	nop

/* Replace with your application code */
	_delay_ms(1000);
	//changeDirection(FORWARD, L_WHEEL);
	
	setDutyCycle(0, L_WHEEL);
 58a:	40 e0       	ldi	r20, 0x00	; 0
 58c:	50 e0       	ldi	r21, 0x00	; 0
 58e:	60 e0       	ldi	r22, 0x00	; 0
 590:	70 e0       	ldi	r23, 0x00	; 0
 592:	cb 01       	movw	r24, r22
 594:	3b df       	rcall	.-394    	; 0x40c <setDutyCycle>
	setDutyCycle(0, R_WHEEL);
 596:	41 e0       	ldi	r20, 0x01	; 1
 598:	50 e0       	ldi	r21, 0x00	; 0
 59a:	60 e0       	ldi	r22, 0x00	; 0
 59c:	70 e0       	ldi	r23, 0x00	; 0
 59e:	cb 01       	movw	r24, r22
 5a0:	35 df       	rcall	.-406    	; 0x40c <setDutyCycle>
 5a2:	2f ef       	ldi	r18, 0xFF	; 255
 5a4:	8b e7       	ldi	r24, 0x7B	; 123
 5a6:	92 e9       	ldi	r25, 0x92	; 146
 5a8:	21 50       	subi	r18, 0x01	; 1
 5aa:	80 40       	sbci	r24, 0x00	; 0
 5ac:	90 40       	sbci	r25, 0x00	; 0
 5ae:	e1 f7       	brne	.-8      	; 0x5a8 <main+0x58>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <main+0x62>
	while (1)
	{
		//unsigned long t = getTime();
		//PSprintf(0, "Time: %X\n\r", t);
		_delay_ms(3000);
		turn(90);
 5b2:	00 00       	nop
 5b4:	8a e5       	ldi	r24, 0x5A	; 90
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	f9 de       	rcall	.-526    	; 0x3ac <turn>
		PORTF |= (1<<PF2);
 5ba:	8a 9a       	sbi	0x11, 2	; 17
 5bc:	f2 cf       	rjmp	.-28     	; 0x5a2 <main+0x52>

000005be <__cmpsf2>:
 5be:	34 d0       	rcall	.+104    	; 0x628 <__fp_cmp>
 5c0:	08 f4       	brcc	.+2      	; 0x5c4 <__cmpsf2+0x6>
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	08 95       	ret

000005c6 <__fixsfsi>:
 5c6:	04 d0       	rcall	.+8      	; 0x5d0 <__fixunssfsi>
 5c8:	68 94       	set
 5ca:	b1 11       	cpse	r27, r1
 5cc:	74 c0       	rjmp	.+232    	; 0x6b6 <__fp_szero>
 5ce:	08 95       	ret

000005d0 <__fixunssfsi>:
 5d0:	57 d0       	rcall	.+174    	; 0x680 <__fp_splitA>
 5d2:	88 f0       	brcs	.+34     	; 0x5f6 <__fixunssfsi+0x26>
 5d4:	9f 57       	subi	r25, 0x7F	; 127
 5d6:	90 f0       	brcs	.+36     	; 0x5fc <__fixunssfsi+0x2c>
 5d8:	b9 2f       	mov	r27, r25
 5da:	99 27       	eor	r25, r25
 5dc:	b7 51       	subi	r27, 0x17	; 23
 5de:	a0 f0       	brcs	.+40     	; 0x608 <__fixunssfsi+0x38>
 5e0:	d1 f0       	breq	.+52     	; 0x616 <__fixunssfsi+0x46>
 5e2:	66 0f       	add	r22, r22
 5e4:	77 1f       	adc	r23, r23
 5e6:	88 1f       	adc	r24, r24
 5e8:	99 1f       	adc	r25, r25
 5ea:	1a f0       	brmi	.+6      	; 0x5f2 <__fixunssfsi+0x22>
 5ec:	ba 95       	dec	r27
 5ee:	c9 f7       	brne	.-14     	; 0x5e2 <__fixunssfsi+0x12>
 5f0:	12 c0       	rjmp	.+36     	; 0x616 <__fixunssfsi+0x46>
 5f2:	b1 30       	cpi	r27, 0x01	; 1
 5f4:	81 f0       	breq	.+32     	; 0x616 <__fixunssfsi+0x46>
 5f6:	5e d0       	rcall	.+188    	; 0x6b4 <__fp_zero>
 5f8:	b1 e0       	ldi	r27, 0x01	; 1
 5fa:	08 95       	ret
 5fc:	5b c0       	rjmp	.+182    	; 0x6b4 <__fp_zero>
 5fe:	67 2f       	mov	r22, r23
 600:	78 2f       	mov	r23, r24
 602:	88 27       	eor	r24, r24
 604:	b8 5f       	subi	r27, 0xF8	; 248
 606:	39 f0       	breq	.+14     	; 0x616 <__fixunssfsi+0x46>
 608:	b9 3f       	cpi	r27, 0xF9	; 249
 60a:	cc f3       	brlt	.-14     	; 0x5fe <__fixunssfsi+0x2e>
 60c:	86 95       	lsr	r24
 60e:	77 95       	ror	r23
 610:	67 95       	ror	r22
 612:	b3 95       	inc	r27
 614:	d9 f7       	brne	.-10     	; 0x60c <__fixunssfsi+0x3c>
 616:	3e f4       	brtc	.+14     	; 0x626 <__fixunssfsi+0x56>
 618:	90 95       	com	r25
 61a:	80 95       	com	r24
 61c:	70 95       	com	r23
 61e:	61 95       	neg	r22
 620:	7f 4f       	sbci	r23, 0xFF	; 255
 622:	8f 4f       	sbci	r24, 0xFF	; 255
 624:	9f 4f       	sbci	r25, 0xFF	; 255
 626:	08 95       	ret

00000628 <__fp_cmp>:
 628:	99 0f       	add	r25, r25
 62a:	00 08       	sbc	r0, r0
 62c:	55 0f       	add	r21, r21
 62e:	aa 0b       	sbc	r26, r26
 630:	e0 e8       	ldi	r30, 0x80	; 128
 632:	fe ef       	ldi	r31, 0xFE	; 254
 634:	16 16       	cp	r1, r22
 636:	17 06       	cpc	r1, r23
 638:	e8 07       	cpc	r30, r24
 63a:	f9 07       	cpc	r31, r25
 63c:	c0 f0       	brcs	.+48     	; 0x66e <__fp_cmp+0x46>
 63e:	12 16       	cp	r1, r18
 640:	13 06       	cpc	r1, r19
 642:	e4 07       	cpc	r30, r20
 644:	f5 07       	cpc	r31, r21
 646:	98 f0       	brcs	.+38     	; 0x66e <__fp_cmp+0x46>
 648:	62 1b       	sub	r22, r18
 64a:	73 0b       	sbc	r23, r19
 64c:	84 0b       	sbc	r24, r20
 64e:	95 0b       	sbc	r25, r21
 650:	39 f4       	brne	.+14     	; 0x660 <__fp_cmp+0x38>
 652:	0a 26       	eor	r0, r26
 654:	61 f0       	breq	.+24     	; 0x66e <__fp_cmp+0x46>
 656:	23 2b       	or	r18, r19
 658:	24 2b       	or	r18, r20
 65a:	25 2b       	or	r18, r21
 65c:	21 f4       	brne	.+8      	; 0x666 <__fp_cmp+0x3e>
 65e:	08 95       	ret
 660:	0a 26       	eor	r0, r26
 662:	09 f4       	brne	.+2      	; 0x666 <__fp_cmp+0x3e>
 664:	a1 40       	sbci	r26, 0x01	; 1
 666:	a6 95       	lsr	r26
 668:	8f ef       	ldi	r24, 0xFF	; 255
 66a:	81 1d       	adc	r24, r1
 66c:	81 1d       	adc	r24, r1
 66e:	08 95       	ret

00000670 <__fp_split3>:
 670:	57 fd       	sbrc	r21, 7
 672:	90 58       	subi	r25, 0x80	; 128
 674:	44 0f       	add	r20, r20
 676:	55 1f       	adc	r21, r21
 678:	59 f0       	breq	.+22     	; 0x690 <__fp_splitA+0x10>
 67a:	5f 3f       	cpi	r21, 0xFF	; 255
 67c:	71 f0       	breq	.+28     	; 0x69a <__fp_splitA+0x1a>
 67e:	47 95       	ror	r20

00000680 <__fp_splitA>:
 680:	88 0f       	add	r24, r24
 682:	97 fb       	bst	r25, 7
 684:	99 1f       	adc	r25, r25
 686:	61 f0       	breq	.+24     	; 0x6a0 <__fp_splitA+0x20>
 688:	9f 3f       	cpi	r25, 0xFF	; 255
 68a:	79 f0       	breq	.+30     	; 0x6aa <__fp_splitA+0x2a>
 68c:	87 95       	ror	r24
 68e:	08 95       	ret
 690:	12 16       	cp	r1, r18
 692:	13 06       	cpc	r1, r19
 694:	14 06       	cpc	r1, r20
 696:	55 1f       	adc	r21, r21
 698:	f2 cf       	rjmp	.-28     	; 0x67e <__fp_split3+0xe>
 69a:	46 95       	lsr	r20
 69c:	f1 df       	rcall	.-30     	; 0x680 <__fp_splitA>
 69e:	08 c0       	rjmp	.+16     	; 0x6b0 <__fp_splitA+0x30>
 6a0:	16 16       	cp	r1, r22
 6a2:	17 06       	cpc	r1, r23
 6a4:	18 06       	cpc	r1, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	f1 cf       	rjmp	.-30     	; 0x68c <__fp_splitA+0xc>
 6aa:	86 95       	lsr	r24
 6ac:	71 05       	cpc	r23, r1
 6ae:	61 05       	cpc	r22, r1
 6b0:	08 94       	sec
 6b2:	08 95       	ret

000006b4 <__fp_zero>:
 6b4:	e8 94       	clt

000006b6 <__fp_szero>:
 6b6:	bb 27       	eor	r27, r27
 6b8:	66 27       	eor	r22, r22
 6ba:	77 27       	eor	r23, r23
 6bc:	cb 01       	movw	r24, r22
 6be:	97 f9       	bld	r25, 7
 6c0:	08 95       	ret

000006c2 <__mulsf3>:
 6c2:	0b d0       	rcall	.+22     	; 0x6da <__mulsf3x>
 6c4:	78 c0       	rjmp	.+240    	; 0x7b6 <__fp_round>
 6c6:	69 d0       	rcall	.+210    	; 0x79a <__fp_pscA>
 6c8:	28 f0       	brcs	.+10     	; 0x6d4 <__mulsf3+0x12>
 6ca:	6e d0       	rcall	.+220    	; 0x7a8 <__fp_pscB>
 6cc:	18 f0       	brcs	.+6      	; 0x6d4 <__mulsf3+0x12>
 6ce:	95 23       	and	r25, r21
 6d0:	09 f0       	breq	.+2      	; 0x6d4 <__mulsf3+0x12>
 6d2:	5a c0       	rjmp	.+180    	; 0x788 <__fp_inf>
 6d4:	5f c0       	rjmp	.+190    	; 0x794 <__fp_nan>
 6d6:	11 24       	eor	r1, r1
 6d8:	ee cf       	rjmp	.-36     	; 0x6b6 <__fp_szero>

000006da <__mulsf3x>:
 6da:	ca df       	rcall	.-108    	; 0x670 <__fp_split3>
 6dc:	a0 f3       	brcs	.-24     	; 0x6c6 <__mulsf3+0x4>

000006de <__mulsf3_pse>:
 6de:	95 9f       	mul	r25, r21
 6e0:	d1 f3       	breq	.-12     	; 0x6d6 <__mulsf3+0x14>
 6e2:	95 0f       	add	r25, r21
 6e4:	50 e0       	ldi	r21, 0x00	; 0
 6e6:	55 1f       	adc	r21, r21
 6e8:	62 9f       	mul	r22, r18
 6ea:	f0 01       	movw	r30, r0
 6ec:	72 9f       	mul	r23, r18
 6ee:	bb 27       	eor	r27, r27
 6f0:	f0 0d       	add	r31, r0
 6f2:	b1 1d       	adc	r27, r1
 6f4:	63 9f       	mul	r22, r19
 6f6:	aa 27       	eor	r26, r26
 6f8:	f0 0d       	add	r31, r0
 6fa:	b1 1d       	adc	r27, r1
 6fc:	aa 1f       	adc	r26, r26
 6fe:	64 9f       	mul	r22, r20
 700:	66 27       	eor	r22, r22
 702:	b0 0d       	add	r27, r0
 704:	a1 1d       	adc	r26, r1
 706:	66 1f       	adc	r22, r22
 708:	82 9f       	mul	r24, r18
 70a:	22 27       	eor	r18, r18
 70c:	b0 0d       	add	r27, r0
 70e:	a1 1d       	adc	r26, r1
 710:	62 1f       	adc	r22, r18
 712:	73 9f       	mul	r23, r19
 714:	b0 0d       	add	r27, r0
 716:	a1 1d       	adc	r26, r1
 718:	62 1f       	adc	r22, r18
 71a:	83 9f       	mul	r24, r19
 71c:	a0 0d       	add	r26, r0
 71e:	61 1d       	adc	r22, r1
 720:	22 1f       	adc	r18, r18
 722:	74 9f       	mul	r23, r20
 724:	33 27       	eor	r19, r19
 726:	a0 0d       	add	r26, r0
 728:	61 1d       	adc	r22, r1
 72a:	23 1f       	adc	r18, r19
 72c:	84 9f       	mul	r24, r20
 72e:	60 0d       	add	r22, r0
 730:	21 1d       	adc	r18, r1
 732:	82 2f       	mov	r24, r18
 734:	76 2f       	mov	r23, r22
 736:	6a 2f       	mov	r22, r26
 738:	11 24       	eor	r1, r1
 73a:	9f 57       	subi	r25, 0x7F	; 127
 73c:	50 40       	sbci	r21, 0x00	; 0
 73e:	8a f0       	brmi	.+34     	; 0x762 <__mulsf3_pse+0x84>
 740:	e1 f0       	breq	.+56     	; 0x77a <__mulsf3_pse+0x9c>
 742:	88 23       	and	r24, r24
 744:	4a f0       	brmi	.+18     	; 0x758 <__mulsf3_pse+0x7a>
 746:	ee 0f       	add	r30, r30
 748:	ff 1f       	adc	r31, r31
 74a:	bb 1f       	adc	r27, r27
 74c:	66 1f       	adc	r22, r22
 74e:	77 1f       	adc	r23, r23
 750:	88 1f       	adc	r24, r24
 752:	91 50       	subi	r25, 0x01	; 1
 754:	50 40       	sbci	r21, 0x00	; 0
 756:	a9 f7       	brne	.-22     	; 0x742 <__mulsf3_pse+0x64>
 758:	9e 3f       	cpi	r25, 0xFE	; 254
 75a:	51 05       	cpc	r21, r1
 75c:	70 f0       	brcs	.+28     	; 0x77a <__mulsf3_pse+0x9c>
 75e:	14 c0       	rjmp	.+40     	; 0x788 <__fp_inf>
 760:	aa cf       	rjmp	.-172    	; 0x6b6 <__fp_szero>
 762:	5f 3f       	cpi	r21, 0xFF	; 255
 764:	ec f3       	brlt	.-6      	; 0x760 <__mulsf3_pse+0x82>
 766:	98 3e       	cpi	r25, 0xE8	; 232
 768:	dc f3       	brlt	.-10     	; 0x760 <__mulsf3_pse+0x82>
 76a:	86 95       	lsr	r24
 76c:	77 95       	ror	r23
 76e:	67 95       	ror	r22
 770:	b7 95       	ror	r27
 772:	f7 95       	ror	r31
 774:	e7 95       	ror	r30
 776:	9f 5f       	subi	r25, 0xFF	; 255
 778:	c1 f7       	brne	.-16     	; 0x76a <__mulsf3_pse+0x8c>
 77a:	fe 2b       	or	r31, r30
 77c:	88 0f       	add	r24, r24
 77e:	91 1d       	adc	r25, r1
 780:	96 95       	lsr	r25
 782:	87 95       	ror	r24
 784:	97 f9       	bld	r25, 7
 786:	08 95       	ret

00000788 <__fp_inf>:
 788:	97 f9       	bld	r25, 7
 78a:	9f 67       	ori	r25, 0x7F	; 127
 78c:	80 e8       	ldi	r24, 0x80	; 128
 78e:	70 e0       	ldi	r23, 0x00	; 0
 790:	60 e0       	ldi	r22, 0x00	; 0
 792:	08 95       	ret

00000794 <__fp_nan>:
 794:	9f ef       	ldi	r25, 0xFF	; 255
 796:	80 ec       	ldi	r24, 0xC0	; 192
 798:	08 95       	ret

0000079a <__fp_pscA>:
 79a:	00 24       	eor	r0, r0
 79c:	0a 94       	dec	r0
 79e:	16 16       	cp	r1, r22
 7a0:	17 06       	cpc	r1, r23
 7a2:	18 06       	cpc	r1, r24
 7a4:	09 06       	cpc	r0, r25
 7a6:	08 95       	ret

000007a8 <__fp_pscB>:
 7a8:	00 24       	eor	r0, r0
 7aa:	0a 94       	dec	r0
 7ac:	12 16       	cp	r1, r18
 7ae:	13 06       	cpc	r1, r19
 7b0:	14 06       	cpc	r1, r20
 7b2:	05 06       	cpc	r0, r21
 7b4:	08 95       	ret

000007b6 <__fp_round>:
 7b6:	09 2e       	mov	r0, r25
 7b8:	03 94       	inc	r0
 7ba:	00 0c       	add	r0, r0
 7bc:	11 f4       	brne	.+4      	; 0x7c2 <__fp_round+0xc>
 7be:	88 23       	and	r24, r24
 7c0:	52 f0       	brmi	.+20     	; 0x7d6 <__fp_round+0x20>
 7c2:	bb 0f       	add	r27, r27
 7c4:	40 f4       	brcc	.+16     	; 0x7d6 <__fp_round+0x20>
 7c6:	bf 2b       	or	r27, r31
 7c8:	11 f4       	brne	.+4      	; 0x7ce <__fp_round+0x18>
 7ca:	60 ff       	sbrs	r22, 0
 7cc:	04 c0       	rjmp	.+8      	; 0x7d6 <__fp_round+0x20>
 7ce:	6f 5f       	subi	r22, 0xFF	; 255
 7d0:	7f 4f       	sbci	r23, 0xFF	; 255
 7d2:	8f 4f       	sbci	r24, 0xFF	; 255
 7d4:	9f 4f       	sbci	r25, 0xFF	; 255
 7d6:	08 95       	ret

000007d8 <__divmodhi4>:
 7d8:	97 fb       	bst	r25, 7
 7da:	07 2e       	mov	r0, r23
 7dc:	16 f4       	brtc	.+4      	; 0x7e2 <__divmodhi4+0xa>
 7de:	00 94       	com	r0
 7e0:	06 d0       	rcall	.+12     	; 0x7ee <__divmodhi4_neg1>
 7e2:	77 fd       	sbrc	r23, 7
 7e4:	08 d0       	rcall	.+16     	; 0x7f6 <__divmodhi4_neg2>
 7e6:	0b d0       	rcall	.+22     	; 0x7fe <__udivmodhi4>
 7e8:	07 fc       	sbrc	r0, 7
 7ea:	05 d0       	rcall	.+10     	; 0x7f6 <__divmodhi4_neg2>
 7ec:	3e f4       	brtc	.+14     	; 0x7fc <__divmodhi4_exit>

000007ee <__divmodhi4_neg1>:
 7ee:	90 95       	com	r25
 7f0:	81 95       	neg	r24
 7f2:	9f 4f       	sbci	r25, 0xFF	; 255
 7f4:	08 95       	ret

000007f6 <__divmodhi4_neg2>:
 7f6:	70 95       	com	r23
 7f8:	61 95       	neg	r22
 7fa:	7f 4f       	sbci	r23, 0xFF	; 255

000007fc <__divmodhi4_exit>:
 7fc:	08 95       	ret

000007fe <__udivmodhi4>:
 7fe:	aa 1b       	sub	r26, r26
 800:	bb 1b       	sub	r27, r27
 802:	51 e1       	ldi	r21, 0x11	; 17
 804:	07 c0       	rjmp	.+14     	; 0x814 <__udivmodhi4_ep>

00000806 <__udivmodhi4_loop>:
 806:	aa 1f       	adc	r26, r26
 808:	bb 1f       	adc	r27, r27
 80a:	a6 17       	cp	r26, r22
 80c:	b7 07       	cpc	r27, r23
 80e:	10 f0       	brcs	.+4      	; 0x814 <__udivmodhi4_ep>
 810:	a6 1b       	sub	r26, r22
 812:	b7 0b       	sbc	r27, r23

00000814 <__udivmodhi4_ep>:
 814:	88 1f       	adc	r24, r24
 816:	99 1f       	adc	r25, r25
 818:	5a 95       	dec	r21
 81a:	a9 f7       	brne	.-22     	; 0x806 <__udivmodhi4_loop>
 81c:	80 95       	com	r24
 81e:	90 95       	com	r25
 820:	bc 01       	movw	r22, r24
 822:	cd 01       	movw	r24, r26
 824:	08 95       	ret

00000826 <_exit>:
 826:	f8 94       	cli

00000828 <__stop_program>:
 828:	ff cf       	rjmp	.-2      	; 0x828 <__stop_program>
