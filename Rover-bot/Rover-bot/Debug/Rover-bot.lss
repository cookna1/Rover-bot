
Rover-bot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  0000042e  000004c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000042e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800202  00800202  000004c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001041  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d21  00000000  00000000  000015dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005d6  00000000  00000000  000022fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  000028d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000622  00000000  00000000  000029b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000038c  00000000  00000000  00002fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003362  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	ae c1       	rjmp	.+860    	; 0x392 <__vector_13>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	e1 c0       	rjmp	.+450    	; 0x268 <__vector_41>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e2       	ldi	r30, 0x2E	; 46
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 31       	cpi	r26, 0x13	; 19
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	84 c1       	rjmp	.+776    	; 0x42a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
	Use Timer4 input capture mode to capture and time pulses for IR command.
	PORTL bit 0 / IPC4 Digital Pin 35 for interrupt
	*/
	
	//Digital Data Register B : Setting Pins 7 for output (w)
	DDRB |= 0x80;
 124:	27 9a       	sbi	0x04, 7	; 4
	//Digital Data Register F : Setting Pins 0, 1, 2 for output (w)
	DDRF |= (1<<DDF0)|(1<<DDF1)|(1<<DDF2);
 126:	80 b3       	in	r24, 0x10	; 16
 128:	87 60       	ori	r24, 0x07	; 7
 12a:	80 bb       	out	0x10, r24	; 16
	
	//Timer 4 Interrupt Mask Register
	TIMSK4 |= (1<<ICIE4); // ICIE4: Timer/Counter, Input Capture Interrupt Enable
 12c:	e2 e7       	ldi	r30, 0x72	; 114
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	80 62       	ori	r24, 0x20	; 32
 134:	80 83       	st	Z, r24
	
	//Timer 4 Control Register B
	TCCR4B |= (1<<ICES4)|(1<<ICNC4); // ICES4: Rising Edge Triggers Capture
 136:	e1 ea       	ldi	r30, 0xA1	; 161
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	80 6c       	ori	r24, 0xC0	; 192
 13e:	80 83       	st	Z, r24
	//TIFR4 = (1<<ICF4);
	//TCNT4 = 0;
	//ICR4 = 5;
	RISING_EDGE = 1;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <RISING_EDGE+0x1>
 148:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <RISING_EDGE>
	//Enable Interrupts
	sei();
 14c:	78 94       	sei
	
	setTime();
 14e:	ff d0       	rcall	.+510    	; 0x34e <setTime>
	 timeset = 0;
 150:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <timeset+0x1>
 154:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <timeset>
    /* Replace with your application code */
    while (1) 
    {	
		//Used to display timeset value - for testing purposes
		if (timeset) {
			PORTF = 0x07;
 158:	0f 2e       	mov	r0, r31
 15a:	f7 e0       	ldi	r31, 0x07	; 7
 15c:	ff 2e       	mov	r15, r31
 15e:	f0 2d       	mov	r31, r0
			int count = timeset / 100;
 160:	c4 e6       	ldi	r28, 0x64	; 100
 162:	d0 e0       	ldi	r29, 0x00	; 0
			for(int i = 0; i < count; i+=1) {
				PORTF = 0x04;
 164:	44 e0       	ldi	r20, 0x04	; 4
				_delay_ms(200);
				PORTF = 0x00;
				_delay_ms(200);
			}
			count = (timeset - (count * 100)) / 10;
 166:	ea e0       	ldi	r30, 0x0A	; 10
 168:	f0 e0       	ldi	r31, 0x00	; 0
			for(int i = 0; i < count; i++) {
				PORTF = 0x02;
 16a:	02 e0       	ldi	r16, 0x02	; 2
				_delay_ms(200);
			}	
			count = timeset % 10;
			PORTF = 0x00;
			for(int i = 0; i < count; i++) {
				PORTF = 0x01;
 16c:	11 e0       	ldi	r17, 0x01	; 1
	 timeset = 0;
    /* Replace with your application code */
    while (1) 
    {	
		//Used to display timeset value - for testing purposes
		if (timeset) {
 16e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <timeset>
 172:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <timeset+0x1>
 176:	00 97       	sbiw	r24, 0x00	; 0
 178:	f1 f3       	breq	.-4      	; 0x176 <main+0x52>
			PORTF = 0x07;
 17a:	f1 ba       	out	0x11, r15	; 17
			int count = timeset / 100;
 17c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <timeset>
 180:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <timeset+0x1>
 184:	be 01       	movw	r22, r28
 186:	2a d1       	rcall	.+596    	; 0x3dc <__divmodhi4>
 188:	9b 01       	movw	r18, r22
			for(int i = 0; i < count; i+=1) {
 18a:	16 16       	cp	r1, r22
 18c:	17 06       	cpc	r1, r23
 18e:	d4 f4       	brge	.+52     	; 0x1c4 <main+0xa0>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
				PORTF = 0x04;
 194:	41 bb       	out	0x11, r20	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	5f ef       	ldi	r21, 0xFF	; 255
 198:	a3 ec       	ldi	r26, 0xC3	; 195
 19a:	b9 e0       	ldi	r27, 0x09	; 9
 19c:	51 50       	subi	r21, 0x01	; 1
 19e:	a0 40       	sbci	r26, 0x00	; 0
 1a0:	b0 40       	sbci	r27, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x78>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x82>
 1a6:	00 00       	nop
				_delay_ms(200);
				PORTF = 0x00;
 1a8:	11 ba       	out	0x11, r1	; 17
 1aa:	5f ef       	ldi	r21, 0xFF	; 255
 1ac:	a3 ec       	ldi	r26, 0xC3	; 195
 1ae:	b9 e0       	ldi	r27, 0x09	; 9
 1b0:	51 50       	subi	r21, 0x01	; 1
 1b2:	a0 40       	sbci	r26, 0x00	; 0
 1b4:	b0 40       	sbci	r27, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <main+0x8c>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0x96>
 1ba:	00 00       	nop
    {	
		//Used to display timeset value - for testing purposes
		if (timeset) {
			PORTF = 0x07;
			int count = timeset / 100;
			for(int i = 0; i < count; i+=1) {
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	28 17       	cp	r18, r24
 1c0:	39 07       	cpc	r19, r25
 1c2:	41 f7       	brne	.-48     	; 0x194 <main+0x70>
				PORTF = 0x04;
				_delay_ms(200);
				PORTF = 0x00;
				_delay_ms(200);
			}
			count = (timeset - (count * 100)) / 10;
 1c4:	5c e9       	ldi	r21, 0x9C	; 156
 1c6:	56 03       	mulsu	r21, r22
 1c8:	90 01       	movw	r18, r0
 1ca:	57 9f       	mul	r21, r23
 1cc:	30 0d       	add	r19, r0
 1ce:	11 24       	eor	r1, r1
 1d0:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <timeset>
 1d4:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <timeset+0x1>
 1d8:	82 0f       	add	r24, r18
 1da:	93 1f       	adc	r25, r19
 1dc:	bf 01       	movw	r22, r30
 1de:	fe d0       	rcall	.+508    	; 0x3dc <__divmodhi4>
			for(int i = 0; i < count; i++) {
 1e0:	16 16       	cp	r1, r22
 1e2:	17 06       	cpc	r1, r23
 1e4:	d4 f4       	brge	.+52     	; 0x21a <main+0xf6>
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	90 e0       	ldi	r25, 0x00	; 0
				PORTF = 0x02;
 1ea:	01 bb       	out	0x11, r16	; 17
 1ec:	af ef       	ldi	r26, 0xFF	; 255
 1ee:	b3 ec       	ldi	r27, 0xC3	; 195
 1f0:	29 e0       	ldi	r18, 0x09	; 9
 1f2:	a1 50       	subi	r26, 0x01	; 1
 1f4:	b0 40       	sbci	r27, 0x00	; 0
 1f6:	20 40       	sbci	r18, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0xce>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0xd8>
 1fc:	00 00       	nop
				_delay_ms(200);
				PORTF = 0x00;
 1fe:	11 ba       	out	0x11, r1	; 17
 200:	3f ef       	ldi	r19, 0xFF	; 255
 202:	53 ec       	ldi	r21, 0xC3	; 195
 204:	a9 e0       	ldi	r26, 0x09	; 9
 206:	31 50       	subi	r19, 0x01	; 1
 208:	50 40       	sbci	r21, 0x00	; 0
 20a:	a0 40       	sbci	r26, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <main+0xe2>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <main+0xec>
 210:	00 00       	nop
				_delay_ms(200);
				PORTF = 0x00;
				_delay_ms(200);
			}
			count = (timeset - (count * 100)) / 10;
			for(int i = 0; i < count; i++) {
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	68 17       	cp	r22, r24
 216:	79 07       	cpc	r23, r25
 218:	41 f7       	brne	.-48     	; 0x1ea <main+0xc6>
				PORTF = 0x02;
				_delay_ms(200);
				PORTF = 0x00;
				_delay_ms(200);
			}	
			count = timeset % 10;
 21a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <timeset>
 21e:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <timeset+0x1>
 222:	bf 01       	movw	r22, r30
 224:	db d0       	rcall	.+438    	; 0x3dc <__divmodhi4>
			PORTF = 0x00;
 226:	11 ba       	out	0x11, r1	; 17
			for(int i = 0; i < count; i++) {
 228:	18 16       	cp	r1, r24
 22a:	19 06       	cpc	r1, r25
 22c:	0c f0       	brlt	.+2      	; 0x230 <main+0x10c>
 22e:	9f cf       	rjmp	.-194    	; 0x16e <main+0x4a>
 230:	20 e0       	ldi	r18, 0x00	; 0
 232:	30 e0       	ldi	r19, 0x00	; 0
				PORTF = 0x01;
 234:	11 bb       	out	0x11, r17	; 17
 236:	bf ef       	ldi	r27, 0xFF	; 255
 238:	53 ec       	ldi	r21, 0xC3	; 195
 23a:	69 e0       	ldi	r22, 0x09	; 9
 23c:	b1 50       	subi	r27, 0x01	; 1
 23e:	50 40       	sbci	r21, 0x00	; 0
 240:	60 40       	sbci	r22, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <main+0x118>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0x122>
 246:	00 00       	nop
				_delay_ms(200);
				PORTF = 0x00;
 248:	11 ba       	out	0x11, r1	; 17
 24a:	7f ef       	ldi	r23, 0xFF	; 255
 24c:	a3 ec       	ldi	r26, 0xC3	; 195
 24e:	b9 e0       	ldi	r27, 0x09	; 9
 250:	71 50       	subi	r23, 0x01	; 1
 252:	a0 40       	sbci	r26, 0x00	; 0
 254:	b0 40       	sbci	r27, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <main+0x12c>
 258:	00 c0       	rjmp	.+0      	; 0x25a <main+0x136>
 25a:	00 00       	nop
				PORTF = 0x00;
				_delay_ms(200);
			}	
			count = timeset % 10;
			PORTF = 0x00;
			for(int i = 0; i < count; i++) {
 25c:	2f 5f       	subi	r18, 0xFF	; 255
 25e:	3f 4f       	sbci	r19, 0xFF	; 255
 260:	82 17       	cp	r24, r18
 262:	93 07       	cpc	r25, r19
 264:	39 f7       	brne	.-50     	; 0x234 <main+0x110>
 266:	83 cf       	rjmp	.-250    	; 0x16e <main+0x4a>

00000268 <__vector_41>:
		}
    }
}

//Input Capture Mode
ISR(TIMER4_CAPT_vect) {
 268:	1f 92       	push	r1
 26a:	0f 92       	push	r0
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
 272:	0b b6       	in	r0, 0x3b	; 59
 274:	0f 92       	push	r0
 276:	2f 93       	push	r18
 278:	3f 93       	push	r19
 27a:	8f 93       	push	r24
 27c:	9f 93       	push	r25
 27e:	ef 93       	push	r30
 280:	ff 93       	push	r31
	//test to see if making it inside
	PORTF ^= 0x07;
 282:	91 b3       	in	r25, 0x11	; 17
 284:	87 e0       	ldi	r24, 0x07	; 7
 286:	89 27       	eor	r24, r25
 288:	81 bb       	out	0x11, r24	; 17
	//TCNT4 = 0;
	//TCCR4B &= ~(1<<ICES4); //Set up to capture the falling edge
	timeset = 101;
 28a:	85 e6       	ldi	r24, 0x65	; 101
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <timeset+0x1>
 292:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <timeset>
	//check rising edge
	if (RISING_EDGE) {
 296:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <RISING_EDGE>
 29a:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <RISING_EDGE+0x1>
 29e:	89 2b       	or	r24, r25
 2a0:	71 f0       	breq	.+28     	; 0x2be <__vector_41+0x56>
		RISING_EDGE = 0;
 2a2:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <RISING_EDGE+0x1>
 2a6:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <RISING_EDGE>
		TCCR4B &= ~(1<<ICES4); //Set up to capture the falling edge
 2aa:	e1 ea       	ldi	r30, 0xA1	; 161
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	8f 7b       	andi	r24, 0xBF	; 191
 2b2:	80 83       	st	Z, r24
		TCNT4 = 0;
 2b4:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
 2b8:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
 2bc:	3b c0       	rjmp	.+118    	; 0x334 <__vector_41+0xcc>
		//clearTime();
	} 
	//check falling edge
	else {
		RISING_EDGE = 1;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <RISING_EDGE+0x1>
 2c6:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <RISING_EDGE>
		TCCR4B |= (1<<ICES4); //Set up to capture the rising edge
 2ca:	e1 ea       	ldi	r30, 0xA1	; 161
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	80 64       	ori	r24, 0x40	; 64
 2d2:	80 83       	st	Z, r24
 2d4:	2f ef       	ldi	r18, 0xFF	; 255
 2d6:	83 ed       	ldi	r24, 0xD3	; 211
 2d8:	90 e3       	ldi	r25, 0x30	; 48
 2da:	21 50       	subi	r18, 0x01	; 1
 2dc:	80 40       	sbci	r24, 0x00	; 0
 2de:	90 40       	sbci	r25, 0x00	; 0
 2e0:	e1 f7       	brne	.-8      	; 0x2da <__vector_41+0x72>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <__vector_41+0x7c>
 2e4:	00 00       	nop
		_delay_ms(1000);
		th = TCNT4H - th;
 2e6:	e5 ea       	ldi	r30, 0xA5	; 165
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <th>
 2f0:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <th+0x1>
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	82 1b       	sub	r24, r18
 2f8:	93 0b       	sbc	r25, r19
 2fa:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <th+0x1>
 2fe:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <th>
		tl = TCNT4H - tl;
 302:	80 81       	ld	r24, Z
 304:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <tl>
 308:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <tl+0x1>
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	82 1b       	sub	r24, r18
 310:	93 0b       	sbc	r25, r19
 312:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <tl+0x1>
 316:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <tl>
		//timeset = TCNT4 - timeset;
		timeset = ICR4;
 31a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
 31e:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 322:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <timeset+0x1>
 326:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <timeset>
		TIMSK4 &= ~(1<<ICIE4);
 32a:	e2 e7       	ldi	r30, 0x72	; 114
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	8f 7d       	andi	r24, 0xDF	; 223
 332:	80 83       	st	Z, r24
	}
}
 334:	ff 91       	pop	r31
 336:	ef 91       	pop	r30
 338:	9f 91       	pop	r25
 33a:	8f 91       	pop	r24
 33c:	3f 91       	pop	r19
 33e:	2f 91       	pop	r18
 340:	0f 90       	pop	r0
 342:	0b be       	out	0x3b, r0	; 59
 344:	0f 90       	pop	r0
 346:	0f be       	out	0x3f, r0	; 63
 348:	0f 90       	pop	r0
 34a:	1f 90       	pop	r1
 34c:	18 95       	reti

0000034e <setTime>:
void clearTime(void) {
	timeCounter = 0;
}

void setTime() {
	initialized = 1;
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 356:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
	timeCounter = 0;
 35a:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <timeCounter>
 35e:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <timeCounter+0x1>
 362:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <timeCounter+0x2>
 366:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <timeCounter+0x3>
	TCCR2A |= (1 << COM2A1);
 36a:	e0 eb       	ldi	r30, 0xB0	; 176
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	80 68       	ori	r24, 0x80	; 128
 372:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS20) | (1 << CS22) | (1 << WGM22);
 374:	e1 eb       	ldi	r30, 0xB1	; 177
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	8d 60       	ori	r24, 0x0D	; 13
 37c:	80 83       	st	Z, r24
	TIMSK2 |= (1 << OCIE2A);
 37e:	e0 e7       	ldi	r30, 0x70	; 112
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	82 60       	ori	r24, 0x02	; 2
 386:	80 83       	st	Z, r24
	
	OCR2A = tickTime;
 388:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 38c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
 390:	08 95       	ret

00000392 <__vector_13>:
}

ISR(TIMER2_COMPA_vect) {
 392:	1f 92       	push	r1
 394:	0f 92       	push	r0
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	0f 92       	push	r0
 39a:	11 24       	eor	r1, r1
 39c:	8f 93       	push	r24
 39e:	9f 93       	push	r25
 3a0:	af 93       	push	r26
 3a2:	bf 93       	push	r27
	timeCounter++;
 3a4:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <timeCounter>
 3a8:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <timeCounter+0x1>
 3ac:	a0 91 11 02 	lds	r26, 0x0211	; 0x800211 <timeCounter+0x2>
 3b0:	b0 91 12 02 	lds	r27, 0x0212	; 0x800212 <timeCounter+0x3>
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	a1 1d       	adc	r26, r1
 3b8:	b1 1d       	adc	r27, r1
 3ba:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <timeCounter>
 3be:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <timeCounter+0x1>
 3c2:	a0 93 11 02 	sts	0x0211, r26	; 0x800211 <timeCounter+0x2>
 3c6:	b0 93 12 02 	sts	0x0212, r27	; 0x800212 <timeCounter+0x3>
	/*if (timeCounter % 1000 == 0)*/ //PORTB ^= 0x80;
 3ca:	bf 91       	pop	r27
 3cc:	af 91       	pop	r26
 3ce:	9f 91       	pop	r25
 3d0:	8f 91       	pop	r24
 3d2:	0f 90       	pop	r0
 3d4:	0f be       	out	0x3f, r0	; 63
 3d6:	0f 90       	pop	r0
 3d8:	1f 90       	pop	r1
 3da:	18 95       	reti

000003dc <__divmodhi4>:
 3dc:	97 fb       	bst	r25, 7
 3de:	07 2e       	mov	r0, r23
 3e0:	16 f4       	brtc	.+4      	; 0x3e6 <__divmodhi4+0xa>
 3e2:	00 94       	com	r0
 3e4:	06 d0       	rcall	.+12     	; 0x3f2 <__divmodhi4_neg1>
 3e6:	77 fd       	sbrc	r23, 7
 3e8:	08 d0       	rcall	.+16     	; 0x3fa <__divmodhi4_neg2>
 3ea:	0b d0       	rcall	.+22     	; 0x402 <__udivmodhi4>
 3ec:	07 fc       	sbrc	r0, 7
 3ee:	05 d0       	rcall	.+10     	; 0x3fa <__divmodhi4_neg2>
 3f0:	3e f4       	brtc	.+14     	; 0x400 <__divmodhi4_exit>

000003f2 <__divmodhi4_neg1>:
 3f2:	90 95       	com	r25
 3f4:	81 95       	neg	r24
 3f6:	9f 4f       	sbci	r25, 0xFF	; 255
 3f8:	08 95       	ret

000003fa <__divmodhi4_neg2>:
 3fa:	70 95       	com	r23
 3fc:	61 95       	neg	r22
 3fe:	7f 4f       	sbci	r23, 0xFF	; 255

00000400 <__divmodhi4_exit>:
 400:	08 95       	ret

00000402 <__udivmodhi4>:
 402:	aa 1b       	sub	r26, r26
 404:	bb 1b       	sub	r27, r27
 406:	51 e1       	ldi	r21, 0x11	; 17
 408:	07 c0       	rjmp	.+14     	; 0x418 <__udivmodhi4_ep>

0000040a <__udivmodhi4_loop>:
 40a:	aa 1f       	adc	r26, r26
 40c:	bb 1f       	adc	r27, r27
 40e:	a6 17       	cp	r26, r22
 410:	b7 07       	cpc	r27, r23
 412:	10 f0       	brcs	.+4      	; 0x418 <__udivmodhi4_ep>
 414:	a6 1b       	sub	r26, r22
 416:	b7 0b       	sbc	r27, r23

00000418 <__udivmodhi4_ep>:
 418:	88 1f       	adc	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	5a 95       	dec	r21
 41e:	a9 f7       	brne	.-22     	; 0x40a <__udivmodhi4_loop>
 420:	80 95       	com	r24
 422:	90 95       	com	r25
 424:	bc 01       	movw	r22, r24
 426:	cd 01       	movw	r24, r26
 428:	08 95       	ret

0000042a <_exit>:
 42a:	f8 94       	cli

0000042c <__stop_program>:
 42c:	ff cf       	rjmp	.-2      	; 0x42c <__stop_program>
