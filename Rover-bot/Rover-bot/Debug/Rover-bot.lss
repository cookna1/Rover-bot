
Rover-bot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000988  00000a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000988  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  00800202  00800202  00000a1e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000161b  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fa3  00000000  00000000  0000219b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b56  00000000  00000000  0000313e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00003c94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b4  00000000  00000000  00003edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bdf  00000000  00000000  00004690  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000526f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	3d c1       	rjmp	.+634    	; 0x2a4 <__vector_10>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	12 c1       	rjmp	.+548    	; 0x25a <__vector_13>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e8       	ldi	r30, 0x88	; 136
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 32       	cpi	r26, 0x28	; 40
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	4d d2       	rcall	.+1178   	; 0x5ba <main>
 120:	31 c4       	rjmp	.+2146   	; 0x984 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <PSerial_read>:
}

int PSerial_read(unsigned char port){
    int data = -1;

    switch (port) {
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	71 f0       	breq	.+28     	; 0x144 <PSerial_read+0x20>
 128:	28 f0       	brcs	.+10     	; 0x134 <PSerial_read+0x10>
 12a:	82 30       	cpi	r24, 0x02	; 2
 12c:	99 f0       	breq	.+38     	; 0x154 <PSerial_read+0x30>
 12e:	83 30       	cpi	r24, 0x03	; 3
 130:	c9 f0       	breq	.+50     	; 0x164 <PSerial_read+0x40>
 132:	20 c0       	rjmp	.+64     	; 0x174 <PSerial_read+0x50>
        case 0: 
           if (UCSR0A & (1<<RXC0))
 134:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 138:	88 23       	and	r24, r24
 13a:	fc f4       	brge	.+62     	; 0x17a <PSerial_read+0x56>
                data = UDR0;
 13c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	08 95       	ret
           break;
        case 1:
            if (UCSR1A & (1<<RXC1))
 144:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 148:	88 23       	and	r24, r24
 14a:	d4 f4       	brge	.+52     	; 0x180 <PSerial_read+0x5c>
                data = UDR1;
 14c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	08 95       	ret
            break;
        case 2:
            if (UCSR2A & (1<<RXC2))
 154:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
 158:	88 23       	and	r24, r24
 15a:	ac f4       	brge	.+42     	; 0x186 <PSerial_read+0x62>
                data = UDR2;
 15c:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	08 95       	ret
            break;
        case 3:
             if (UCSR3A & (1<<RXC3))
 164:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
 168:	88 23       	and	r24, r24
 16a:	84 f4       	brge	.+32     	; 0x18c <PSerial_read+0x68>
                data = UDR3;
 16c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	08 95       	ret
	if (speed == 250000l) return 3l;
	return 103l;
}

int PSerial_read(unsigned char port){
    int data = -1;
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	9f ef       	ldi	r25, 0xFF	; 255
 178:	08 95       	ret
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	9f ef       	ldi	r25, 0xFF	; 255
 17e:	08 95       	ret
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	9f ef       	ldi	r25, 0xFF	; 255
 184:	08 95       	ret
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	9f ef       	ldi	r25, 0xFF	; 255
 18a:	08 95       	ret
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	9f ef       	ldi	r25, 0xFF	; 255
            break;
        default :
            break;
    }
    return data;
}
 190:	08 95       	ret

00000192 <PSerial_open>:


#include "PSerial.h"

void PSerial_open(unsigned char port, long speed, int config){
    switch (port) {
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	91 f0       	breq	.+36     	; 0x1ba <PSerial_open+0x28>
 196:	28 f0       	brcs	.+10     	; 0x1a2 <PSerial_open+0x10>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	d9 f0       	breq	.+54     	; 0x1d2 <PSerial_open+0x40>
 19c:	83 30       	cpi	r24, 0x03	; 3
 19e:	29 f1       	breq	.+74     	; 0x1ea <PSerial_open+0x58>
 1a0:	2f c0       	rjmp	.+94     	; 0x200 <PSerial_open+0x6e>
        case 0: 
			UCSR0B |= 0x18;
 1a2:	e1 ec       	ldi	r30, 0xC1	; 193
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	90 81       	ld	r25, Z
 1a8:	98 61       	ori	r25, 0x18	; 24
 1aa:	90 83       	st	Z, r25
            UCSR0C = config;
 1ac:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
			UBRR0 = speed;
 1b0:	50 93 c5 00 	sts	0x00C5, r21	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 1b4:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
            break;
 1b8:	23 c0       	rjmp	.+70     	; 0x200 <PSerial_open+0x6e>
        case 1:
            UCSR1C = config;
 1ba:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
			UCSR1B |= 0x18;
 1be:	e9 ec       	ldi	r30, 0xC9	; 201
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	90 81       	ld	r25, Z
 1c4:	98 61       	ori	r25, 0x18	; 24
 1c6:	90 83       	st	Z, r25
            UBRR1 = speed;
 1c8:	50 93 cd 00 	sts	0x00CD, r21	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
 1cc:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
            break;
 1d0:	17 c0       	rjmp	.+46     	; 0x200 <PSerial_open+0x6e>
        case 2:
            UCSR2C = config;
 1d2:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
			UCSR2B |= 0x18;
 1d6:	e1 ed       	ldi	r30, 0xD1	; 209
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	90 81       	ld	r25, Z
 1dc:	98 61       	ori	r25, 0x18	; 24
 1de:	90 83       	st	Z, r25
            UBRR2 = speed;
 1e0:	50 93 d5 00 	sts	0x00D5, r21	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
 1e4:	40 93 d4 00 	sts	0x00D4, r20	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
            break;
 1e8:	0b c0       	rjmp	.+22     	; 0x200 <PSerial_open+0x6e>
        case 3:
            UCSR3C = config;
 1ea:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
			UCSR3B |= 0x18;
 1ee:	e1 e3       	ldi	r30, 0x31	; 49
 1f0:	f1 e0       	ldi	r31, 0x01	; 1
 1f2:	90 81       	ld	r25, Z
 1f4:	98 61       	ori	r25, 0x18	; 24
 1f6:	90 83       	st	Z, r25
            UBRR3 = speed;
 1f8:	50 93 35 01 	sts	0x0135, r21	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
 1fc:	40 93 34 01 	sts	0x0134, r20	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
            break;
        default:
            break;
    }
	PSerial_read(port);
 200:	91 cf       	rjmp	.-222    	; 0x124 <PSerial_read>
 202:	08 95       	ret

00000204 <getTime>:
int timerInitialized(void) {
	return initialized;
}

unsigned long getTime(void) {
	return timeCounter;
 204:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <timeCounter>
 208:	70 91 11 02 	lds	r23, 0x0211	; 0x800211 <timeCounter+0x1>
 20c:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <timeCounter+0x2>
 210:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <timeCounter+0x3>
}
 214:	08 95       	ret

00000216 <setTime>:

void setTime() {
	initialized = 1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 21e:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
	timeCounter = 0;
 222:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <timeCounter>
 226:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <timeCounter+0x1>
 22a:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <timeCounter+0x2>
 22e:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <timeCounter+0x3>
	TCCR2A |= (1 << COM2A1);
 232:	e0 eb       	ldi	r30, 0xB0	; 176
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	80 68       	ori	r24, 0x80	; 128
 23a:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS20) | (1 << CS22) | (1 << WGM22);
 23c:	e1 eb       	ldi	r30, 0xB1	; 177
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	8d 60       	ori	r24, 0x0D	; 13
 244:	80 83       	st	Z, r24
	TIMSK2 |= (1 << OCIE2A);
 246:	e0 e7       	ldi	r30, 0x70	; 112
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	82 60       	ori	r24, 0x02	; 2
 24e:	80 83       	st	Z, r24
	
	OCR2A = tickTime;
 250:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 254:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
 258:	08 95       	ret

0000025a <__vector_13>:
}

ISR(TIMER2_COMPA_vect) {
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	af 93       	push	r26
 26a:	bf 93       	push	r27
	timeCounter++;
 26c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <timeCounter>
 270:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <timeCounter+0x1>
 274:	a0 91 12 02 	lds	r26, 0x0212	; 0x800212 <timeCounter+0x2>
 278:	b0 91 13 02 	lds	r27, 0x0213	; 0x800213 <timeCounter+0x3>
 27c:	01 96       	adiw	r24, 0x01	; 1
 27e:	a1 1d       	adc	r26, r1
 280:	b1 1d       	adc	r27, r1
 282:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <timeCounter>
 286:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <timeCounter+0x1>
 28a:	a0 93 12 02 	sts	0x0212, r26	; 0x800212 <timeCounter+0x2>
 28e:	b0 93 13 02 	sts	0x0213, r27	; 0x800213 <timeCounter+0x3>
	/*if (timeCounter % 1000 == 0)*/ //PORTB ^= 0x80;
 292:	bf 91       	pop	r27
 294:	af 91       	pop	r26
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <__vector_10>:
	} else if (wheelNumber == R_WHEEL && direction == FORWARD) {
		PORTC &= 0xFC;
		PORTC |=  R_FORWARD;
	} else if (wheelNumber == R_WHEEL && direction == BACKWARD) {
		PORTC &= 0xFC;
		PORTC |=  R_BACKWARD;
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	0b b6       	in	r0, 0x3b	; 59
 2b0:	0f 92       	push	r0
 2b2:	8f 92       	push	r8
 2b4:	9f 92       	push	r9
 2b6:	af 92       	push	r10
 2b8:	bf 92       	push	r11
 2ba:	ef 92       	push	r14
 2bc:	ff 92       	push	r15
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	2f 93       	push	r18
 2c4:	3f 93       	push	r19
 2c6:	4f 93       	push	r20
 2c8:	5f 93       	push	r21
 2ca:	6f 93       	push	r22
 2cc:	7f 93       	push	r23
 2ce:	8f 93       	push	r24
 2d0:	9f 93       	push	r25
 2d2:	af 93       	push	r26
 2d4:	bf 93       	push	r27
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	ef 93       	push	r30
 2dc:	ff 93       	push	r31
 2de:	e3 e0       	ldi	r30, 0x03	; 3
 2e0:	f1 e0       	ldi	r31, 0x01	; 1
 2e2:	e0 80       	ld	r14, Z
 2e4:	f1 2c       	mov	r15, r1
 2e6:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <oldJ>
 2ea:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <oldJ+0x1>
 2ee:	8e 25       	eor	r24, r14
 2f0:	9f 25       	eor	r25, r15
 2f2:	81 bb       	out	0x11, r24	; 17
 2f4:	00 81       	ld	r16, Z
 2f6:	02 60       	ori	r16, 0x02	; 2
 2f8:	10 e0       	ldi	r17, 0x00	; 0
 2fa:	c0 81       	ld	r28, Z
 2fc:	c1 60       	ori	r28, 0x01	; 1
 2fe:	d0 e0       	ldi	r29, 0x00	; 0
 300:	91 b3       	in	r25, 0x11	; 17
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	89 27       	eor	r24, r25
 306:	81 bb       	out	0x11, r24	; 17
 308:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <rightcount>
 30c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <rightcount+0x1>
 310:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <rightcount+0x2>
 314:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <rightcount+0x3>
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	a1 1d       	adc	r26, r1
 31c:	b1 1d       	adc	r27, r1
 31e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <rightcount>
 322:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <rightcount+0x1>
 326:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <rightcount+0x2>
 32a:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <rightcount+0x3>
 32e:	91 b3       	in	r25, 0x11	; 17
 330:	82 e0       	ldi	r24, 0x02	; 2
 332:	89 27       	eor	r24, r25
 334:	81 bb       	out	0x11, r24	; 17
 336:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <leftCount>
 33a:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <leftCount+0x1>
 33e:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <leftCount+0x2>
 342:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <leftCount+0x3>
 346:	01 96       	adiw	r24, 0x01	; 1
 348:	a1 1d       	adc	r26, r1
 34a:	b1 1d       	adc	r27, r1
 34c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <leftCount>
 350:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <leftCount+0x1>
 354:	a0 93 0c 02 	sts	0x020C, r26	; 0x80020c <leftCount+0x2>
 358:	b0 93 0d 02 	sts	0x020D, r27	; 0x80020d <leftCount+0x3>
 35c:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <rightcount>
 360:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <rightcount+0x1>
 364:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <rightcount+0x2>
 368:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <rightcount+0x3>
 36c:	84 17       	cp	r24, r20
 36e:	95 07       	cpc	r25, r21
 370:	a6 07       	cpc	r26, r22
 372:	b7 07       	cpc	r27, r23
 374:	a4 f5       	brge	.+104    	; 0x3de <__vector_10+0x13a>
 376:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <l_ds>
 37a:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <l_ds+0x1>
 37e:	07 2e       	mov	r0, r23
 380:	00 0c       	add	r0, r0
 382:	88 0b       	sbc	r24, r24
 384:	99 0b       	sbc	r25, r25
 386:	eb d1       	rcall	.+982    	; 0x75e <__floatsisf>
 388:	2d ec       	ldi	r18, 0xCD	; 205
 38a:	3c ec       	ldi	r19, 0xCC	; 204
 38c:	4c ec       	ldi	r20, 0xCC	; 204
 38e:	5d e3       	ldi	r21, 0x3D	; 61
 390:	4b d1       	rcall	.+662    	; 0x628 <__addsf3>
 392:	b2 d1       	rcall	.+868    	; 0x6f8 <__fixsfsi>
 394:	70 93 0f 02 	sts	0x020F, r23	; 0x80020f <l_ds+0x1>
 398:	60 93 0e 02 	sts	0x020E, r22	; 0x80020e <l_ds>
 39c:	07 2e       	mov	r0, r23
 39e:	00 0c       	add	r0, r0
 3a0:	88 0b       	sbc	r24, r24
 3a2:	99 0b       	sbc	r25, r25
 3a4:	dc d1       	rcall	.+952    	; 0x75e <__floatsisf>
 3a6:	4b 01       	movw	r8, r22
 3a8:	5c 01       	movw	r10, r24
 3aa:	20 e0       	ldi	r18, 0x00	; 0
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	a9 01       	movw	r20, r18
 3b0:	9f d1       	rcall	.+830    	; 0x6f0 <__cmpsf2>
 3b2:	81 11       	cpse	r24, r1
 3b4:	05 c0       	rjmp	.+10     	; 0x3c0 <__vector_10+0x11c>
 3b6:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 3ba:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 3be:	47 c0       	rjmp	.+142    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 3c0:	20 e0       	ldi	r18, 0x00	; 0
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	48 ec       	ldi	r20, 0xC8	; 200
 3c6:	53 e4       	ldi	r21, 0x43	; 67
 3c8:	c5 01       	movw	r24, r10
 3ca:	b4 01       	movw	r22, r8
 3cc:	78 d2       	rcall	.+1264   	; 0x8be <__mulsf3>
 3ce:	94 d1       	rcall	.+808    	; 0x6f8 <__fixsfsi>
 3d0:	60 57       	subi	r22, 0x70	; 112
 3d2:	7e 4f       	sbci	r23, 0xFE	; 254
 3d4:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 3d8:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 3dc:	38 c0       	rjmp	.+112    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 3de:	48 17       	cp	r20, r24
 3e0:	59 07       	cpc	r21, r25
 3e2:	6a 07       	cpc	r22, r26
 3e4:	7b 07       	cpc	r23, r27
 3e6:	9c f5       	brge	.+102    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 3e8:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <l_ds>
 3ec:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <l_ds+0x1>
 3f0:	07 2e       	mov	r0, r23
 3f2:	00 0c       	add	r0, r0
 3f4:	88 0b       	sbc	r24, r24
 3f6:	99 0b       	sbc	r25, r25
 3f8:	b2 d1       	rcall	.+868    	; 0x75e <__floatsisf>
 3fa:	2d ec       	ldi	r18, 0xCD	; 205
 3fc:	3c ec       	ldi	r19, 0xCC	; 204
 3fe:	4c ec       	ldi	r20, 0xCC	; 204
 400:	5d e3       	ldi	r21, 0x3D	; 61
 402:	11 d1       	rcall	.+546    	; 0x626 <__subsf3>
 404:	79 d1       	rcall	.+754    	; 0x6f8 <__fixsfsi>
 406:	70 93 0f 02 	sts	0x020F, r23	; 0x80020f <l_ds+0x1>
 40a:	60 93 0e 02 	sts	0x020E, r22	; 0x80020e <l_ds>
 40e:	07 2e       	mov	r0, r23
 410:	00 0c       	add	r0, r0
 412:	88 0b       	sbc	r24, r24
 414:	99 0b       	sbc	r25, r25
 416:	a3 d1       	rcall	.+838    	; 0x75e <__floatsisf>
 418:	4b 01       	movw	r8, r22
 41a:	5c 01       	movw	r10, r24
 41c:	20 e0       	ldi	r18, 0x00	; 0
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	a9 01       	movw	r20, r18
 422:	66 d1       	rcall	.+716    	; 0x6f0 <__cmpsf2>
 424:	81 11       	cpse	r24, r1
 426:	05 c0       	rjmp	.+10     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 428:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 42c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 430:	0e c0       	rjmp	.+28     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 432:	20 e0       	ldi	r18, 0x00	; 0
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	48 ec       	ldi	r20, 0xC8	; 200
 438:	53 e4       	ldi	r21, 0x43	; 67
 43a:	c5 01       	movw	r24, r10
 43c:	b4 01       	movw	r22, r8
 43e:	3f d2       	rcall	.+1150   	; 0x8be <__mulsf3>
 440:	5b d1       	rcall	.+694    	; 0x6f8 <__fixsfsi>
 442:	60 57       	subi	r22, 0x70	; 112
 444:	7e 4f       	sbci	r23, 0xFE	; 254
 446:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 44a:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 44e:	10 93 15 02 	sts	0x0215, r17	; 0x800215 <RwasOn+0x1>
 452:	00 93 14 02 	sts	0x0214, r16	; 0x800214 <RwasOn>
 456:	d0 93 23 02 	sts	0x0223, r29	; 0x800223 <LwasOn+0x1>
 45a:	c0 93 22 02 	sts	0x0222, r28	; 0x800222 <LwasOn>
 45e:	f0 92 05 02 	sts	0x0205, r15	; 0x800205 <oldJ+0x1>
 462:	e0 92 04 02 	sts	0x0204, r14	; 0x800204 <oldJ>
 466:	ff 91       	pop	r31
 468:	ef 91       	pop	r30
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	bf 91       	pop	r27
 470:	af 91       	pop	r26
 472:	9f 91       	pop	r25
 474:	8f 91       	pop	r24
 476:	7f 91       	pop	r23
 478:	6f 91       	pop	r22
 47a:	5f 91       	pop	r21
 47c:	4f 91       	pop	r20
 47e:	3f 91       	pop	r19
 480:	2f 91       	pop	r18
 482:	1f 91       	pop	r17
 484:	0f 91       	pop	r16
 486:	ff 90       	pop	r15
 488:	ef 90       	pop	r14
 48a:	bf 90       	pop	r11
 48c:	af 90       	pop	r10
 48e:	9f 90       	pop	r9
 490:	8f 90       	pop	r8
 492:	0f 90       	pop	r0
 494:	0b be       	out	0x3b, r0	; 59
 496:	0f 90       	pop	r0
 498:	0f be       	out	0x3f, r0	; 63
 49a:	0f 90       	pop	r0
 49c:	1f 90       	pop	r1
 49e:	18 95       	reti

000004a0 <initWheels>:
 4a0:	87 b1       	in	r24, 0x07	; 7
 4a2:	8f 60       	ori	r24, 0x0F	; 15
 4a4:	87 b9       	out	0x07, r24	; 7
 4a6:	ea e0       	ldi	r30, 0x0A	; 10
 4a8:	f1 e0       	ldi	r31, 0x01	; 1
 4aa:	80 81       	ld	r24, Z
 4ac:	88 61       	ori	r24, 0x18	; 24
 4ae:	80 83       	st	Z, r24
 4b0:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <timer>
 4b4:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <timer+0x1>
 4b8:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <timer+0x2>
 4bc:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <timer+0x3>
 4c0:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <timer+0x4>
 4c4:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <timer+0x5>
 4c8:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <timer+0x6>
 4cc:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <timer+0x7>
 4d0:	88 ee       	ldi	r24, 0xE8	; 232
 4d2:	93 e0       	ldi	r25, 0x03	; 3
 4d4:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
 4d8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 4dc:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 4e0:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 4e4:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 4e8:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 4ec:	e0 e2       	ldi	r30, 0x20	; 32
 4ee:	f1 e0       	ldi	r31, 0x01	; 1
 4f0:	80 81       	ld	r24, Z
 4f2:	80 6a       	ori	r24, 0xA0	; 160
 4f4:	80 83       	st	Z, r24
 4f6:	e1 e2       	ldi	r30, 0x21	; 33
 4f8:	f1 e0       	ldi	r31, 0x01	; 1
 4fa:	80 81       	ld	r24, Z
 4fc:	82 61       	ori	r24, 0x12	; 18
 4fe:	80 83       	st	Z, r24
 500:	43 9a       	sbi	0x08, 3	; 8
 502:	40 9a       	sbi	0x08, 0	; 8
 504:	e5 e0       	ldi	r30, 0x05	; 5
 506:	f1 e0       	ldi	r31, 0x01	; 1
 508:	80 81       	ld	r24, Z
 50a:	8c 7f       	andi	r24, 0xFC	; 252
 50c:	80 83       	st	Z, r24
 50e:	ec e6       	ldi	r30, 0x6C	; 108
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	80 81       	ld	r24, Z
 514:	82 60       	ori	r24, 0x02	; 2
 516:	80 83       	st	Z, r24
 518:	80 81       	ld	r24, Z
 51a:	84 60       	ori	r24, 0x04	; 4
 51c:	80 83       	st	Z, r24
 51e:	e8 e6       	ldi	r30, 0x68	; 104
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	80 81       	ld	r24, Z
 524:	82 60       	ori	r24, 0x02	; 2
 526:	80 83       	st	Z, r24
 528:	08 95       	ret

0000052a <setDutyCycle>:
	}

}

// setDutyCycle accepts a dutycycle (number between 0.0 and 1.0) and the wheel (L_WHEEL or R_WHEEL)
void setDutyCycle(float dutycycle, int wheel) {
 52a:	cf 92       	push	r12
 52c:	df 92       	push	r13
 52e:	ef 92       	push	r14
 530:	ff 92       	push	r15
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	6b 01       	movw	r12, r22
 538:	7c 01       	movw	r14, r24
 53a:	ea 01       	movw	r28, r20
	
	if (dutycycle == 0) {
 53c:	20 e0       	ldi	r18, 0x00	; 0
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	a9 01       	movw	r20, r18
 542:	d6 d0       	rcall	.+428    	; 0x6f0 <__cmpsf2>
 544:	81 11       	cpse	r24, r1
 546:	0f c0       	rjmp	.+30     	; 0x566 <setDutyCycle+0x3c>
		if (wheel == L_WHEEL) OCR5A = 0;
 548:	c1 30       	cpi	r28, 0x01	; 1
 54a:	d1 05       	cpc	r29, r1
 54c:	29 f4       	brne	.+10     	; 0x558 <setDutyCycle+0x2e>
 54e:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 552:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 556:	1f c0       	rjmp	.+62     	; 0x596 <setDutyCycle+0x6c>
		else if (wheel == R_WHEEL) OCR5B = 0;
 558:	cd 2b       	or	r28, r29
 55a:	e9 f4       	brne	.+58     	; 0x596 <setDutyCycle+0x6c>
 55c:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 560:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 564:	18 c0       	rjmp	.+48     	; 0x596 <setDutyCycle+0x6c>
	} else {
		int ontime = ((int)(dutycycle * 400.0) + 400) ;
 566:	20 e0       	ldi	r18, 0x00	; 0
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	48 ec       	ldi	r20, 0xC8	; 200
 56c:	53 e4       	ldi	r21, 0x43	; 67
 56e:	c7 01       	movw	r24, r14
 570:	b6 01       	movw	r22, r12
 572:	a5 d1       	rcall	.+842    	; 0x8be <__mulsf3>
 574:	c1 d0       	rcall	.+386    	; 0x6f8 <__fixsfsi>
 576:	60 57       	subi	r22, 0x70	; 112
 578:	7e 4f       	sbci	r23, 0xFE	; 254
		
		if (wheel == L_WHEEL) OCR5A = ontime;
 57a:	c1 30       	cpi	r28, 0x01	; 1
 57c:	d1 05       	cpc	r29, r1
 57e:	29 f4       	brne	.+10     	; 0x58a <setDutyCycle+0x60>
 580:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 584:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 588:	06 c0       	rjmp	.+12     	; 0x596 <setDutyCycle+0x6c>
		else if (wheel == R_WHEEL) OCR5B = ontime;
 58a:	cd 2b       	or	r28, r29
 58c:	21 f4       	brne	.+8      	; 0x596 <setDutyCycle+0x6c>
 58e:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 592:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
	}
}
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	ff 90       	pop	r15
 59c:	ef 90       	pop	r14
 59e:	df 90       	pop	r13
 5a0:	cf 90       	pop	r12
 5a2:	08 95       	ret

000005a4 <init>:
#include "time.h"
#include "wheels.h"
#include "PSerial.h"

void init() {
	setTime();
 5a4:	38 de       	rcall	.-912    	; 0x216 <setTime>
	PSerial_open(0, BAUD9600, SERIAL_8N1);
 5a6:	26 e0       	ldi	r18, 0x06	; 6
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	48 e6       	ldi	r20, 0x68	; 104
 5ac:	50 e0       	ldi	r21, 0x00	; 0
 5ae:	60 e0       	ldi	r22, 0x00	; 0
 5b0:	70 e0       	ldi	r23, 0x00	; 0
 5b2:	80 e0       	ldi	r24, 0x00	; 0
	initWheels();
 5b4:	ee dd       	rcall	.-1060   	; 0x192 <PSerial_open>
 5b6:	74 cf       	rjmp	.-280    	; 0x4a0 <initWheels>
 5b8:	08 95       	ret

000005ba <main>:


int main(void)
{
//PORTB |= 0x80;
	PSerial_open(0, BAUD9600, SERIAL_8N1);
 5ba:	26 e0       	ldi	r18, 0x06	; 6
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	48 e6       	ldi	r20, 0x68	; 104
 5c0:	50 e0       	ldi	r21, 0x00	; 0
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	70 e0       	ldi	r23, 0x00	; 0
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	e4 dd       	rcall	.-1080   	; 0x192 <PSerial_open>
	DDRB = 0x80;
 5ca:	80 e8       	ldi	r24, 0x80	; 128
 5cc:	84 b9       	out	0x04, r24	; 4
	DDRF |= (1<<DDF0)|(1<<DDF1)|(DDF2);
 5ce:	80 b3       	in	r24, 0x10	; 16
 5d0:	83 60       	ori	r24, 0x03	; 3
	init();
 5d2:	80 bb       	out	0x10, r24	; 16
 5d4:	e7 df       	rcall	.-50     	; 0x5a4 <init>
	PORTJ &= ~(1 << PJ1);
 5d6:	e5 e0       	ldi	r30, 0x05	; 5
 5d8:	f1 e0       	ldi	r31, 0x01	; 1
 5da:	80 81       	ld	r24, Z
 5dc:	8d 7f       	andi	r24, 0xFD	; 253
 5de:	80 83       	st	Z, r24
	sei();
 5e0:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5e2:	2f ef       	ldi	r18, 0xFF	; 255
 5e4:	83 ed       	ldi	r24, 0xD3	; 211
 5e6:	90 e3       	ldi	r25, 0x30	; 48
 5e8:	21 50       	subi	r18, 0x01	; 1
 5ea:	80 40       	sbci	r24, 0x00	; 0
 5ec:	90 40       	sbci	r25, 0x00	; 0
 5ee:	e1 f7       	brne	.-8      	; 0x5e8 <main+0x2e>
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <main+0x38>
 5f2:	00 00       	nop

/* Replace with your application code */
	_delay_ms(1000);
	//changeDirection(FORWARD, L_WHEEL);
	
	setDutyCycle(.6, L_WHEEL);
 5f4:	41 e0       	ldi	r20, 0x01	; 1
 5f6:	50 e0       	ldi	r21, 0x00	; 0
 5f8:	6a e9       	ldi	r22, 0x9A	; 154
 5fa:	79 e9       	ldi	r23, 0x99	; 153
 5fc:	89 e1       	ldi	r24, 0x19	; 25
 5fe:	9f e3       	ldi	r25, 0x3F	; 63
 600:	94 df       	rcall	.-216    	; 0x52a <setDutyCycle>
	setDutyCycle(.6, R_WHEEL);
 602:	40 e0       	ldi	r20, 0x00	; 0
 604:	50 e0       	ldi	r21, 0x00	; 0
 606:	6a e9       	ldi	r22, 0x9A	; 154
 608:	79 e9       	ldi	r23, 0x99	; 153
 60a:	89 e1       	ldi	r24, 0x19	; 25
 60c:	9f e3       	ldi	r25, 0x3F	; 63
	

	
	while (1)
	{
		unsigned long t = getTime();
 60e:	8d df       	rcall	.-230    	; 0x52a <setDutyCycle>
 610:	f9 dd       	rcall	.-1038   	; 0x204 <getTime>
 612:	2f ef       	ldi	r18, 0xFF	; 255
 614:	81 ee       	ldi	r24, 0xE1	; 225
 616:	94 e0       	ldi	r25, 0x04	; 4
 618:	21 50       	subi	r18, 0x01	; 1
 61a:	80 40       	sbci	r24, 0x00	; 0
 61c:	90 40       	sbci	r25, 0x00	; 0
 61e:	e1 f7       	brne	.-8      	; 0x618 <main+0x5e>
 620:	00 c0       	rjmp	.+0      	; 0x622 <main+0x68>
 622:	00 00       	nop
 624:	f5 cf       	rjmp	.-22     	; 0x610 <main+0x56>

00000626 <__subsf3>:
 626:	50 58       	subi	r21, 0x80	; 128

00000628 <__addsf3>:
 628:	bb 27       	eor	r27, r27
 62a:	aa 27       	eor	r26, r26
 62c:	0e d0       	rcall	.+28     	; 0x64a <__addsf3x>
 62e:	0d c1       	rjmp	.+538    	; 0x84a <__fp_round>
 630:	fe d0       	rcall	.+508    	; 0x82e <__fp_pscA>
 632:	30 f0       	brcs	.+12     	; 0x640 <__addsf3+0x18>
 634:	03 d1       	rcall	.+518    	; 0x83c <__fp_pscB>
 636:	20 f0       	brcs	.+8      	; 0x640 <__addsf3+0x18>
 638:	31 f4       	brne	.+12     	; 0x646 <__addsf3+0x1e>
 63a:	9f 3f       	cpi	r25, 0xFF	; 255
 63c:	11 f4       	brne	.+4      	; 0x642 <__addsf3+0x1a>
 63e:	1e f4       	brtc	.+6      	; 0x646 <__addsf3+0x1e>
 640:	f3 c0       	rjmp	.+486    	; 0x828 <__fp_nan>
 642:	0e f4       	brtc	.+2      	; 0x646 <__addsf3+0x1e>
 644:	e0 95       	com	r30
 646:	e7 fb       	bst	r30, 7
 648:	e9 c0       	rjmp	.+466    	; 0x81c <__fp_inf>

0000064a <__addsf3x>:
 64a:	e9 2f       	mov	r30, r25
 64c:	0f d1       	rcall	.+542    	; 0x86c <__fp_split3>
 64e:	80 f3       	brcs	.-32     	; 0x630 <__addsf3+0x8>
 650:	ba 17       	cp	r27, r26
 652:	62 07       	cpc	r22, r18
 654:	73 07       	cpc	r23, r19
 656:	84 07       	cpc	r24, r20
 658:	95 07       	cpc	r25, r21
 65a:	18 f0       	brcs	.+6      	; 0x662 <__addsf3x+0x18>
 65c:	71 f4       	brne	.+28     	; 0x67a <__addsf3x+0x30>
 65e:	9e f5       	brtc	.+102    	; 0x6c6 <__addsf3x+0x7c>
 660:	27 c1       	rjmp	.+590    	; 0x8b0 <__fp_zero>
 662:	0e f4       	brtc	.+2      	; 0x666 <__addsf3x+0x1c>
 664:	e0 95       	com	r30
 666:	0b 2e       	mov	r0, r27
 668:	ba 2f       	mov	r27, r26
 66a:	a0 2d       	mov	r26, r0
 66c:	0b 01       	movw	r0, r22
 66e:	b9 01       	movw	r22, r18
 670:	90 01       	movw	r18, r0
 672:	0c 01       	movw	r0, r24
 674:	ca 01       	movw	r24, r20
 676:	a0 01       	movw	r20, r0
 678:	11 24       	eor	r1, r1
 67a:	ff 27       	eor	r31, r31
 67c:	59 1b       	sub	r21, r25
 67e:	99 f0       	breq	.+38     	; 0x6a6 <__addsf3x+0x5c>
 680:	59 3f       	cpi	r21, 0xF9	; 249
 682:	50 f4       	brcc	.+20     	; 0x698 <__addsf3x+0x4e>
 684:	50 3e       	cpi	r21, 0xE0	; 224
 686:	68 f1       	brcs	.+90     	; 0x6e2 <__addsf3x+0x98>
 688:	1a 16       	cp	r1, r26
 68a:	f0 40       	sbci	r31, 0x00	; 0
 68c:	a2 2f       	mov	r26, r18
 68e:	23 2f       	mov	r18, r19
 690:	34 2f       	mov	r19, r20
 692:	44 27       	eor	r20, r20
 694:	58 5f       	subi	r21, 0xF8	; 248
 696:	f3 cf       	rjmp	.-26     	; 0x67e <__addsf3x+0x34>
 698:	46 95       	lsr	r20
 69a:	37 95       	ror	r19
 69c:	27 95       	ror	r18
 69e:	a7 95       	ror	r26
 6a0:	f0 40       	sbci	r31, 0x00	; 0
 6a2:	53 95       	inc	r21
 6a4:	c9 f7       	brne	.-14     	; 0x698 <__addsf3x+0x4e>
 6a6:	7e f4       	brtc	.+30     	; 0x6c6 <__addsf3x+0x7c>
 6a8:	1f 16       	cp	r1, r31
 6aa:	ba 0b       	sbc	r27, r26
 6ac:	62 0b       	sbc	r22, r18
 6ae:	73 0b       	sbc	r23, r19
 6b0:	84 0b       	sbc	r24, r20
 6b2:	ba f0       	brmi	.+46     	; 0x6e2 <__addsf3x+0x98>
 6b4:	91 50       	subi	r25, 0x01	; 1
 6b6:	a1 f0       	breq	.+40     	; 0x6e0 <__addsf3x+0x96>
 6b8:	ff 0f       	add	r31, r31
 6ba:	bb 1f       	adc	r27, r27
 6bc:	66 1f       	adc	r22, r22
 6be:	77 1f       	adc	r23, r23
 6c0:	88 1f       	adc	r24, r24
 6c2:	c2 f7       	brpl	.-16     	; 0x6b4 <__addsf3x+0x6a>
 6c4:	0e c0       	rjmp	.+28     	; 0x6e2 <__addsf3x+0x98>
 6c6:	ba 0f       	add	r27, r26
 6c8:	62 1f       	adc	r22, r18
 6ca:	73 1f       	adc	r23, r19
 6cc:	84 1f       	adc	r24, r20
 6ce:	48 f4       	brcc	.+18     	; 0x6e2 <__addsf3x+0x98>
 6d0:	87 95       	ror	r24
 6d2:	77 95       	ror	r23
 6d4:	67 95       	ror	r22
 6d6:	b7 95       	ror	r27
 6d8:	f7 95       	ror	r31
 6da:	9e 3f       	cpi	r25, 0xFE	; 254
 6dc:	08 f0       	brcs	.+2      	; 0x6e0 <__addsf3x+0x96>
 6de:	b3 cf       	rjmp	.-154    	; 0x646 <__addsf3+0x1e>
 6e0:	93 95       	inc	r25
 6e2:	88 0f       	add	r24, r24
 6e4:	08 f0       	brcs	.+2      	; 0x6e8 <__addsf3x+0x9e>
 6e6:	99 27       	eor	r25, r25
 6e8:	ee 0f       	add	r30, r30
 6ea:	97 95       	ror	r25
 6ec:	87 95       	ror	r24
 6ee:	08 95       	ret

000006f0 <__cmpsf2>:
 6f0:	71 d0       	rcall	.+226    	; 0x7d4 <__fp_cmp>
 6f2:	08 f4       	brcc	.+2      	; 0x6f6 <__cmpsf2+0x6>
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	08 95       	ret

000006f8 <__fixsfsi>:
 6f8:	04 d0       	rcall	.+8      	; 0x702 <__fixunssfsi>
 6fa:	68 94       	set
 6fc:	b1 11       	cpse	r27, r1
 6fe:	d9 c0       	rjmp	.+434    	; 0x8b2 <__fp_szero>
 700:	08 95       	ret

00000702 <__fixunssfsi>:
 702:	bc d0       	rcall	.+376    	; 0x87c <__fp_splitA>
 704:	88 f0       	brcs	.+34     	; 0x728 <__fixunssfsi+0x26>
 706:	9f 57       	subi	r25, 0x7F	; 127
 708:	90 f0       	brcs	.+36     	; 0x72e <__fixunssfsi+0x2c>
 70a:	b9 2f       	mov	r27, r25
 70c:	99 27       	eor	r25, r25
 70e:	b7 51       	subi	r27, 0x17	; 23
 710:	a0 f0       	brcs	.+40     	; 0x73a <__fixunssfsi+0x38>
 712:	d1 f0       	breq	.+52     	; 0x748 <__fixunssfsi+0x46>
 714:	66 0f       	add	r22, r22
 716:	77 1f       	adc	r23, r23
 718:	88 1f       	adc	r24, r24
 71a:	99 1f       	adc	r25, r25
 71c:	1a f0       	brmi	.+6      	; 0x724 <__fixunssfsi+0x22>
 71e:	ba 95       	dec	r27
 720:	c9 f7       	brne	.-14     	; 0x714 <__fixunssfsi+0x12>
 722:	12 c0       	rjmp	.+36     	; 0x748 <__fixunssfsi+0x46>
 724:	b1 30       	cpi	r27, 0x01	; 1
 726:	81 f0       	breq	.+32     	; 0x748 <__fixunssfsi+0x46>
 728:	c3 d0       	rcall	.+390    	; 0x8b0 <__fp_zero>
 72a:	b1 e0       	ldi	r27, 0x01	; 1
 72c:	08 95       	ret
 72e:	c0 c0       	rjmp	.+384    	; 0x8b0 <__fp_zero>
 730:	67 2f       	mov	r22, r23
 732:	78 2f       	mov	r23, r24
 734:	88 27       	eor	r24, r24
 736:	b8 5f       	subi	r27, 0xF8	; 248
 738:	39 f0       	breq	.+14     	; 0x748 <__fixunssfsi+0x46>
 73a:	b9 3f       	cpi	r27, 0xF9	; 249
 73c:	cc f3       	brlt	.-14     	; 0x730 <__fixunssfsi+0x2e>
 73e:	86 95       	lsr	r24
 740:	77 95       	ror	r23
 742:	67 95       	ror	r22
 744:	b3 95       	inc	r27
 746:	d9 f7       	brne	.-10     	; 0x73e <__fixunssfsi+0x3c>
 748:	3e f4       	brtc	.+14     	; 0x758 <__fixunssfsi+0x56>
 74a:	90 95       	com	r25
 74c:	80 95       	com	r24
 74e:	70 95       	com	r23
 750:	61 95       	neg	r22
 752:	7f 4f       	sbci	r23, 0xFF	; 255
 754:	8f 4f       	sbci	r24, 0xFF	; 255
 756:	9f 4f       	sbci	r25, 0xFF	; 255
 758:	08 95       	ret

0000075a <__floatunsisf>:
 75a:	e8 94       	clt
 75c:	09 c0       	rjmp	.+18     	; 0x770 <__floatsisf+0x12>

0000075e <__floatsisf>:
 75e:	97 fb       	bst	r25, 7
 760:	3e f4       	brtc	.+14     	; 0x770 <__floatsisf+0x12>
 762:	90 95       	com	r25
 764:	80 95       	com	r24
 766:	70 95       	com	r23
 768:	61 95       	neg	r22
 76a:	7f 4f       	sbci	r23, 0xFF	; 255
 76c:	8f 4f       	sbci	r24, 0xFF	; 255
 76e:	9f 4f       	sbci	r25, 0xFF	; 255
 770:	99 23       	and	r25, r25
 772:	a9 f0       	breq	.+42     	; 0x79e <__floatsisf+0x40>
 774:	f9 2f       	mov	r31, r25
 776:	96 e9       	ldi	r25, 0x96	; 150
 778:	bb 27       	eor	r27, r27
 77a:	93 95       	inc	r25
 77c:	f6 95       	lsr	r31
 77e:	87 95       	ror	r24
 780:	77 95       	ror	r23
 782:	67 95       	ror	r22
 784:	b7 95       	ror	r27
 786:	f1 11       	cpse	r31, r1
 788:	f8 cf       	rjmp	.-16     	; 0x77a <__floatsisf+0x1c>
 78a:	fa f4       	brpl	.+62     	; 0x7ca <__floatsisf+0x6c>
 78c:	bb 0f       	add	r27, r27
 78e:	11 f4       	brne	.+4      	; 0x794 <__floatsisf+0x36>
 790:	60 ff       	sbrs	r22, 0
 792:	1b c0       	rjmp	.+54     	; 0x7ca <__floatsisf+0x6c>
 794:	6f 5f       	subi	r22, 0xFF	; 255
 796:	7f 4f       	sbci	r23, 0xFF	; 255
 798:	8f 4f       	sbci	r24, 0xFF	; 255
 79a:	9f 4f       	sbci	r25, 0xFF	; 255
 79c:	16 c0       	rjmp	.+44     	; 0x7ca <__floatsisf+0x6c>
 79e:	88 23       	and	r24, r24
 7a0:	11 f0       	breq	.+4      	; 0x7a6 <__floatsisf+0x48>
 7a2:	96 e9       	ldi	r25, 0x96	; 150
 7a4:	11 c0       	rjmp	.+34     	; 0x7c8 <__floatsisf+0x6a>
 7a6:	77 23       	and	r23, r23
 7a8:	21 f0       	breq	.+8      	; 0x7b2 <__floatsisf+0x54>
 7aa:	9e e8       	ldi	r25, 0x8E	; 142
 7ac:	87 2f       	mov	r24, r23
 7ae:	76 2f       	mov	r23, r22
 7b0:	05 c0       	rjmp	.+10     	; 0x7bc <__floatsisf+0x5e>
 7b2:	66 23       	and	r22, r22
 7b4:	71 f0       	breq	.+28     	; 0x7d2 <__floatsisf+0x74>
 7b6:	96 e8       	ldi	r25, 0x86	; 134
 7b8:	86 2f       	mov	r24, r22
 7ba:	70 e0       	ldi	r23, 0x00	; 0
 7bc:	60 e0       	ldi	r22, 0x00	; 0
 7be:	2a f0       	brmi	.+10     	; 0x7ca <__floatsisf+0x6c>
 7c0:	9a 95       	dec	r25
 7c2:	66 0f       	add	r22, r22
 7c4:	77 1f       	adc	r23, r23
 7c6:	88 1f       	adc	r24, r24
 7c8:	da f7       	brpl	.-10     	; 0x7c0 <__floatsisf+0x62>
 7ca:	88 0f       	add	r24, r24
 7cc:	96 95       	lsr	r25
 7ce:	87 95       	ror	r24
 7d0:	97 f9       	bld	r25, 7
 7d2:	08 95       	ret

000007d4 <__fp_cmp>:
 7d4:	99 0f       	add	r25, r25
 7d6:	00 08       	sbc	r0, r0
 7d8:	55 0f       	add	r21, r21
 7da:	aa 0b       	sbc	r26, r26
 7dc:	e0 e8       	ldi	r30, 0x80	; 128
 7de:	fe ef       	ldi	r31, 0xFE	; 254
 7e0:	16 16       	cp	r1, r22
 7e2:	17 06       	cpc	r1, r23
 7e4:	e8 07       	cpc	r30, r24
 7e6:	f9 07       	cpc	r31, r25
 7e8:	c0 f0       	brcs	.+48     	; 0x81a <__fp_cmp+0x46>
 7ea:	12 16       	cp	r1, r18
 7ec:	13 06       	cpc	r1, r19
 7ee:	e4 07       	cpc	r30, r20
 7f0:	f5 07       	cpc	r31, r21
 7f2:	98 f0       	brcs	.+38     	; 0x81a <__fp_cmp+0x46>
 7f4:	62 1b       	sub	r22, r18
 7f6:	73 0b       	sbc	r23, r19
 7f8:	84 0b       	sbc	r24, r20
 7fa:	95 0b       	sbc	r25, r21
 7fc:	39 f4       	brne	.+14     	; 0x80c <__fp_cmp+0x38>
 7fe:	0a 26       	eor	r0, r26
 800:	61 f0       	breq	.+24     	; 0x81a <__fp_cmp+0x46>
 802:	23 2b       	or	r18, r19
 804:	24 2b       	or	r18, r20
 806:	25 2b       	or	r18, r21
 808:	21 f4       	brne	.+8      	; 0x812 <__fp_cmp+0x3e>
 80a:	08 95       	ret
 80c:	0a 26       	eor	r0, r26
 80e:	09 f4       	brne	.+2      	; 0x812 <__fp_cmp+0x3e>
 810:	a1 40       	sbci	r26, 0x01	; 1
 812:	a6 95       	lsr	r26
 814:	8f ef       	ldi	r24, 0xFF	; 255
 816:	81 1d       	adc	r24, r1
 818:	81 1d       	adc	r24, r1
 81a:	08 95       	ret

0000081c <__fp_inf>:
 81c:	97 f9       	bld	r25, 7
 81e:	9f 67       	ori	r25, 0x7F	; 127
 820:	80 e8       	ldi	r24, 0x80	; 128
 822:	70 e0       	ldi	r23, 0x00	; 0
 824:	60 e0       	ldi	r22, 0x00	; 0
 826:	08 95       	ret

00000828 <__fp_nan>:
 828:	9f ef       	ldi	r25, 0xFF	; 255
 82a:	80 ec       	ldi	r24, 0xC0	; 192
 82c:	08 95       	ret

0000082e <__fp_pscA>:
 82e:	00 24       	eor	r0, r0
 830:	0a 94       	dec	r0
 832:	16 16       	cp	r1, r22
 834:	17 06       	cpc	r1, r23
 836:	18 06       	cpc	r1, r24
 838:	09 06       	cpc	r0, r25
 83a:	08 95       	ret

0000083c <__fp_pscB>:
 83c:	00 24       	eor	r0, r0
 83e:	0a 94       	dec	r0
 840:	12 16       	cp	r1, r18
 842:	13 06       	cpc	r1, r19
 844:	14 06       	cpc	r1, r20
 846:	05 06       	cpc	r0, r21
 848:	08 95       	ret

0000084a <__fp_round>:
 84a:	09 2e       	mov	r0, r25
 84c:	03 94       	inc	r0
 84e:	00 0c       	add	r0, r0
 850:	11 f4       	brne	.+4      	; 0x856 <__fp_round+0xc>
 852:	88 23       	and	r24, r24
 854:	52 f0       	brmi	.+20     	; 0x86a <__fp_round+0x20>
 856:	bb 0f       	add	r27, r27
 858:	40 f4       	brcc	.+16     	; 0x86a <__fp_round+0x20>
 85a:	bf 2b       	or	r27, r31
 85c:	11 f4       	brne	.+4      	; 0x862 <__fp_round+0x18>
 85e:	60 ff       	sbrs	r22, 0
 860:	04 c0       	rjmp	.+8      	; 0x86a <__fp_round+0x20>
 862:	6f 5f       	subi	r22, 0xFF	; 255
 864:	7f 4f       	sbci	r23, 0xFF	; 255
 866:	8f 4f       	sbci	r24, 0xFF	; 255
 868:	9f 4f       	sbci	r25, 0xFF	; 255
 86a:	08 95       	ret

0000086c <__fp_split3>:
 86c:	57 fd       	sbrc	r21, 7
 86e:	90 58       	subi	r25, 0x80	; 128
 870:	44 0f       	add	r20, r20
 872:	55 1f       	adc	r21, r21
 874:	59 f0       	breq	.+22     	; 0x88c <__fp_splitA+0x10>
 876:	5f 3f       	cpi	r21, 0xFF	; 255
 878:	71 f0       	breq	.+28     	; 0x896 <__fp_splitA+0x1a>
 87a:	47 95       	ror	r20

0000087c <__fp_splitA>:
 87c:	88 0f       	add	r24, r24
 87e:	97 fb       	bst	r25, 7
 880:	99 1f       	adc	r25, r25
 882:	61 f0       	breq	.+24     	; 0x89c <__fp_splitA+0x20>
 884:	9f 3f       	cpi	r25, 0xFF	; 255
 886:	79 f0       	breq	.+30     	; 0x8a6 <__fp_splitA+0x2a>
 888:	87 95       	ror	r24
 88a:	08 95       	ret
 88c:	12 16       	cp	r1, r18
 88e:	13 06       	cpc	r1, r19
 890:	14 06       	cpc	r1, r20
 892:	55 1f       	adc	r21, r21
 894:	f2 cf       	rjmp	.-28     	; 0x87a <__fp_split3+0xe>
 896:	46 95       	lsr	r20
 898:	f1 df       	rcall	.-30     	; 0x87c <__fp_splitA>
 89a:	08 c0       	rjmp	.+16     	; 0x8ac <__fp_splitA+0x30>
 89c:	16 16       	cp	r1, r22
 89e:	17 06       	cpc	r1, r23
 8a0:	18 06       	cpc	r1, r24
 8a2:	99 1f       	adc	r25, r25
 8a4:	f1 cf       	rjmp	.-30     	; 0x888 <__fp_splitA+0xc>
 8a6:	86 95       	lsr	r24
 8a8:	71 05       	cpc	r23, r1
 8aa:	61 05       	cpc	r22, r1
 8ac:	08 94       	sec
 8ae:	08 95       	ret

000008b0 <__fp_zero>:
 8b0:	e8 94       	clt

000008b2 <__fp_szero>:
 8b2:	bb 27       	eor	r27, r27
 8b4:	66 27       	eor	r22, r22
 8b6:	77 27       	eor	r23, r23
 8b8:	cb 01       	movw	r24, r22
 8ba:	97 f9       	bld	r25, 7
 8bc:	08 95       	ret

000008be <__mulsf3>:
 8be:	0b d0       	rcall	.+22     	; 0x8d6 <__mulsf3x>
 8c0:	c4 cf       	rjmp	.-120    	; 0x84a <__fp_round>
 8c2:	b5 df       	rcall	.-150    	; 0x82e <__fp_pscA>
 8c4:	28 f0       	brcs	.+10     	; 0x8d0 <__mulsf3+0x12>
 8c6:	ba df       	rcall	.-140    	; 0x83c <__fp_pscB>
 8c8:	18 f0       	brcs	.+6      	; 0x8d0 <__mulsf3+0x12>
 8ca:	95 23       	and	r25, r21
 8cc:	09 f0       	breq	.+2      	; 0x8d0 <__mulsf3+0x12>
 8ce:	a6 cf       	rjmp	.-180    	; 0x81c <__fp_inf>
 8d0:	ab cf       	rjmp	.-170    	; 0x828 <__fp_nan>
 8d2:	11 24       	eor	r1, r1
 8d4:	ee cf       	rjmp	.-36     	; 0x8b2 <__fp_szero>

000008d6 <__mulsf3x>:
 8d6:	ca df       	rcall	.-108    	; 0x86c <__fp_split3>
 8d8:	a0 f3       	brcs	.-24     	; 0x8c2 <__mulsf3+0x4>

000008da <__mulsf3_pse>:
 8da:	95 9f       	mul	r25, r21
 8dc:	d1 f3       	breq	.-12     	; 0x8d2 <__mulsf3+0x14>
 8de:	95 0f       	add	r25, r21
 8e0:	50 e0       	ldi	r21, 0x00	; 0
 8e2:	55 1f       	adc	r21, r21
 8e4:	62 9f       	mul	r22, r18
 8e6:	f0 01       	movw	r30, r0
 8e8:	72 9f       	mul	r23, r18
 8ea:	bb 27       	eor	r27, r27
 8ec:	f0 0d       	add	r31, r0
 8ee:	b1 1d       	adc	r27, r1
 8f0:	63 9f       	mul	r22, r19
 8f2:	aa 27       	eor	r26, r26
 8f4:	f0 0d       	add	r31, r0
 8f6:	b1 1d       	adc	r27, r1
 8f8:	aa 1f       	adc	r26, r26
 8fa:	64 9f       	mul	r22, r20
 8fc:	66 27       	eor	r22, r22
 8fe:	b0 0d       	add	r27, r0
 900:	a1 1d       	adc	r26, r1
 902:	66 1f       	adc	r22, r22
 904:	82 9f       	mul	r24, r18
 906:	22 27       	eor	r18, r18
 908:	b0 0d       	add	r27, r0
 90a:	a1 1d       	adc	r26, r1
 90c:	62 1f       	adc	r22, r18
 90e:	73 9f       	mul	r23, r19
 910:	b0 0d       	add	r27, r0
 912:	a1 1d       	adc	r26, r1
 914:	62 1f       	adc	r22, r18
 916:	83 9f       	mul	r24, r19
 918:	a0 0d       	add	r26, r0
 91a:	61 1d       	adc	r22, r1
 91c:	22 1f       	adc	r18, r18
 91e:	74 9f       	mul	r23, r20
 920:	33 27       	eor	r19, r19
 922:	a0 0d       	add	r26, r0
 924:	61 1d       	adc	r22, r1
 926:	23 1f       	adc	r18, r19
 928:	84 9f       	mul	r24, r20
 92a:	60 0d       	add	r22, r0
 92c:	21 1d       	adc	r18, r1
 92e:	82 2f       	mov	r24, r18
 930:	76 2f       	mov	r23, r22
 932:	6a 2f       	mov	r22, r26
 934:	11 24       	eor	r1, r1
 936:	9f 57       	subi	r25, 0x7F	; 127
 938:	50 40       	sbci	r21, 0x00	; 0
 93a:	8a f0       	brmi	.+34     	; 0x95e <__mulsf3_pse+0x84>
 93c:	e1 f0       	breq	.+56     	; 0x976 <__mulsf3_pse+0x9c>
 93e:	88 23       	and	r24, r24
 940:	4a f0       	brmi	.+18     	; 0x954 <__mulsf3_pse+0x7a>
 942:	ee 0f       	add	r30, r30
 944:	ff 1f       	adc	r31, r31
 946:	bb 1f       	adc	r27, r27
 948:	66 1f       	adc	r22, r22
 94a:	77 1f       	adc	r23, r23
 94c:	88 1f       	adc	r24, r24
 94e:	91 50       	subi	r25, 0x01	; 1
 950:	50 40       	sbci	r21, 0x00	; 0
 952:	a9 f7       	brne	.-22     	; 0x93e <__mulsf3_pse+0x64>
 954:	9e 3f       	cpi	r25, 0xFE	; 254
 956:	51 05       	cpc	r21, r1
 958:	70 f0       	brcs	.+28     	; 0x976 <__mulsf3_pse+0x9c>
 95a:	60 cf       	rjmp	.-320    	; 0x81c <__fp_inf>
 95c:	aa cf       	rjmp	.-172    	; 0x8b2 <__fp_szero>
 95e:	5f 3f       	cpi	r21, 0xFF	; 255
 960:	ec f3       	brlt	.-6      	; 0x95c <__mulsf3_pse+0x82>
 962:	98 3e       	cpi	r25, 0xE8	; 232
 964:	dc f3       	brlt	.-10     	; 0x95c <__mulsf3_pse+0x82>
 966:	86 95       	lsr	r24
 968:	77 95       	ror	r23
 96a:	67 95       	ror	r22
 96c:	b7 95       	ror	r27
 96e:	f7 95       	ror	r31
 970:	e7 95       	ror	r30
 972:	9f 5f       	subi	r25, 0xFF	; 255
 974:	c1 f7       	brne	.-16     	; 0x966 <__mulsf3_pse+0x8c>
 976:	fe 2b       	or	r31, r30
 978:	88 0f       	add	r24, r24
 97a:	91 1d       	adc	r25, r1
 97c:	96 95       	lsr	r25
 97e:	87 95       	ror	r24
 980:	97 f9       	bld	r25, 7
 982:	08 95       	ret

00000984 <_exit>:
 984:	f8 94       	cli

00000986 <__stop_program>:
 986:	ff cf       	rjmp	.-2      	; 0x986 <__stop_program>
