
Rover-bot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000242  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000242  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800202  00800202  000002d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f38  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf2  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b5  00000000  00000000  00001fca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00002480  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063c  00000000  00000000  0000250c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000013a  00000000  00000000  00002b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002c82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	bc c0       	rjmp	.+376    	; 0x1be <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e4       	ldi	r30, 0x42	; 66
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 30       	cpi	r26, 0x0E	; 14
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	6f d0       	rcall	.+222    	; 0x1fe <main>
 120:	8e c0       	rjmp	.+284    	; 0x23e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initWheels>:
	}
	sei();
}

// setDutyCycle accepts a dutycycle (number between 0.0 and 1.0) and the wheel (L_WHEEL or R_WHEEL)
void setDutyCycle(float dutycycle, int wheel) {
 124:	81 b1       	in	r24, 0x01	; 1
 126:	8f 60       	ori	r24, 0x0F	; 15
 128:	81 b9       	out	0x01, r24	; 1
 12a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 12e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 132:	88 51       	subi	r24, 0x18	; 24
 134:	9c 4f       	sbci	r25, 0xFC	; 252
 136:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 13a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
 13e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 142:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 146:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 14a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 14e:	80 e8       	ldi	r24, 0x80	; 128
 150:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 154:	e1 e8       	ldi	r30, 0x81	; 129
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	81 61       	ori	r24, 0x11	; 17
 15c:	80 83       	st	Z, r24
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <l_setting+0x1>
 16c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <l_setting>
 170:	08 95       	ret

00000172 <changeDirection>:
 172:	9c 01       	movw	r18, r24
 174:	f8 94       	cli
 176:	61 30       	cpi	r22, 0x01	; 1
 178:	71 05       	cpc	r23, r1
 17a:	79 f4       	brne	.+30     	; 0x19a <changeDirection+0x28>
 17c:	82 b1       	in	r24, 0x02	; 2
 17e:	8c 7f       	andi	r24, 0xFC	; 252
 180:	82 b9       	out	0x02, r24	; 2
 182:	23 2b       	or	r18, r19
 184:	19 f0       	breq	.+6      	; 0x18c <changeDirection+0x1a>
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <changeDirection+0x1e>
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <l_setting+0x1>
 194:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <l_setting>
 198:	10 c0       	rjmp	.+32     	; 0x1ba <changeDirection+0x48>
 19a:	67 2b       	or	r22, r23
 19c:	71 f4       	brne	.+28     	; 0x1ba <changeDirection+0x48>
 19e:	92 b1       	in	r25, 0x02	; 2
 1a0:	93 7f       	andi	r25, 0xF3	; 243
 1a2:	92 b9       	out	0x02, r25	; 2
 1a4:	23 2b       	or	r18, r19
 1a6:	19 f0       	breq	.+6      	; 0x1ae <changeDirection+0x3c>
 1a8:	88 e0       	ldi	r24, 0x08	; 8
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <changeDirection+0x40>
 1ae:	84 e0       	ldi	r24, 0x04	; 4
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <r_setting+0x1>
 1b6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <r_setting>
 1ba:	78 94       	sei
 1bc:	08 95       	ret

000001be <__vector_17>:
//----------------------------------------------------------------------
// Timer 1 CTC interrupt service routine (ISR)
// Used for left wheel
//----------------------------------------------------------------------

ISR(TIMER1_COMPA_vect){
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	8f 93       	push	r24
 1ca:	9f 93       	push	r25
	// Send the PWM to output port that drives motor
	if (l_setting == L_BACKWARD) PORTB |= 0x08;
 1cc:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <l_setting>
 1d0:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <l_setting+0x1>
 1d4:	02 97       	sbiw	r24, 0x02	; 2
 1d6:	11 f4       	brne	.+4      	; 0x1dc <__vector_17+0x1e>
 1d8:	2b 9a       	sbi	0x05, 3	; 5
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <__vector_17+0x24>
	else PORTB &= 0x78;
 1dc:	85 b1       	in	r24, 0x05	; 5
 1de:	88 77       	andi	r24, 0x78	; 120
 1e0:	85 b9       	out	0x05, r24	; 5
	PORTA ^= l_setting; //can change to whatever output port is
 1e2:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <l_setting>
 1e6:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <l_setting+0x1>
 1ea:	92 b1       	in	r25, 0x02	; 2
 1ec:	89 27       	eor	r24, r25
 1ee:	82 b9       	out	0x02, r24	; 2
}
 1f0:	9f 91       	pop	r25
 1f2:	8f 91       	pop	r24
 1f4:	0f 90       	pop	r0
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	0f 90       	pop	r0
 1fa:	1f 90       	pop	r1
 1fc:	18 95       	reti

000001fe <main>:
#include "wheels.h"


int main(void)
{
PORTB |= 0x80;
 1fe:	2f 9a       	sbi	0x05, 7	; 5
initWheels();
 200:	91 df       	rcall	.-222    	; 0x124 <initWheels>

sei();
 202:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 204:	2f ef       	ldi	r18, 0xFF	; 255
 206:	83 ed       	ldi	r24, 0xD3	; 211
 208:	90 e3       	ldi	r25, 0x30	; 48
 20a:	21 50       	subi	r18, 0x01	; 1
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <main+0xc>
 212:	00 c0       	rjmp	.+0      	; 0x214 <main+0x16>
 214:	00 00       	nop

	while (1)
	{
		
		_delay_ms(1000);
		changeDirection(FORWARD, L_WHEEL);
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	70 e0       	ldi	r23, 0x00	; 0
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	a9 df       	rcall	.-174    	; 0x172 <changeDirection>
 220:	2f ef       	ldi	r18, 0xFF	; 255
 222:	83 ed       	ldi	r24, 0xD3	; 211
 224:	90 e3       	ldi	r25, 0x30	; 48
 226:	21 50       	subi	r18, 0x01	; 1
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	90 40       	sbci	r25, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <main+0x28>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <main+0x32>
 230:	00 00       	nop
		_delay_ms(1000);
		changeDirection(BACKWARD, L_WHEEL);
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	9b df       	rcall	.-202    	; 0x172 <changeDirection>
 23c:	e3 cf       	rjmp	.-58     	; 0x204 <main+0x6>

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
